{
	"swagger": "2.0",
	"schemes": [
		"https"
	],
	"host": "graphqlhub.com",
	"basePath": "/graphql",
	"info": {
		"description": "Query popular APIs using GraphQL. Schemas include: **Hacker News**, **Reddit**, **GitHub**, **Twitter** and **GraphQLHub**, which contains all the other schemas. GraphQLHub is an open-source project â€” if you want to add a feature, fix a bug, or just ask a question, you can reach out on [Github](https://github.com/clayallsopp/graphqlhub)!",
		"version": "1.0.0",
		"title": "GraphQLHub",
		"termsOfService": "http://graphqlhub.com",
		"contact": {
			"url": "https://github.com/clayallsopp/graphqlhub/issues"
		},
		"license": {
			"name": "MIT",
			"url": "https://opensource.org/licenses/MIT"
		},
		"x-logo": {
			"url": "https://www.graphqlhub.com/images/graphqlhub-logo.png",
			"backgroundColor": "#FFFFFF"
		}
	},
	"externalDocs": {
		"description": "This powers the server behind GraphQLHub.",
		"url": "https://github.com/clayallsopp/graphqlhub#readme"
	},
	"produces": [
		"application/json"
	],
	"consumes": [
		"application/json",
		"application/graphql"
	],
	"tags": [
		{
			"name": "GraphQL Query",
			"description": "GraphQL Query operations"
		}
	],
	"paths": {
		"/": {
			"post": {
				"tags": [
					"GraphQL Query"
				],
				"summary": "Submit GraphQL query",
				"description": "You can make a GraphQL query by issuing a <b>POST</b> request with a JSON payload. The payload must have a string called <b>query</b>, and may optionally have a <b>variables</b> object. If the <b>query</b> parameter contains multiple queries, the <b>operationName</b> parameter must be sent to indicate which query to execute.",
				"operationId": "postQuery",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "GraphQL query parameter",
						"schema": {
							"$ref": "#/definitions/Query"
						},
						"required": true
					}
				],
				"consumes": [
					"application/json",
					"application/graphql"
				],
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Response"
						},
						"examples": {
							"application/json": {
							  "data": {
								"graphQLHub": "Use GraphQLHub to explore popular APIs with GraphQL! Created by Clay Allsopp @clayallsopp"
							  }
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/Response"
						}
					},
					"404": {
						"description": "Not found"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			},
			"get": {
				"tags": [
					"GraphQL Query"
				],
				"summary": "Submit GraphQL query",
				"description": "You can make a GraphQL query by issuing a <b>GET</b> request with a <b>query</b> parameter in the querystring",
				"operationId": "getQuery",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "query",
						"in": "query",
						"required": true,
						"type": "string",
						"description": "The GraphQL query to run"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Response"
						},
						"examples": {
							"application/json": {
							  "data": {
								"__schema": {
								  "types": [
									{
									  "name": "GraphQLHubAPI",
									  "description": "APIs exposed as GraphQL"
									},
									{
									  "name": "String",
									  "description": "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
									},
									{
									  "name": "HackerNewsAPI",
									  "description": "The Hacker News V0 API"
									},
									{
									  "name": "Int",
									  "description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. "
									},
									{
									  "name": "HackerNewsItem",
									  "description": "Stories, comments, jobs, Ask HNs and even polls are just items. They're identified by their ids, which are unique integers"
									},
									{
									  "name": "Boolean",
									  "description": "The `Boolean` scalar type represents `true` or `false`."
									},
									{
									  "name": "ItemType",
									  "description": "The type of item"
									},
									{
									  "name": "HackerNewsUser",
									  "description": "Users are identified by case-sensitive ids. Only users that have public activity (comments or story submissions) on the site are available through the API."
									},
									{
									  "name": "HackerNewsAPIV2",
									  "description": "The Hacker News V2 API; this is Relay-compatible (uses Nodes and Connections)"
									},
									{
									  "name": "ID",
									  "description": "The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID."
									},
									{
									  "name": "Node",
									  "description": "An object with an ID"
									},
									{
									  "name": "HackerNewsV2Story",
									  "description": null
									},
									{
									  "name": "HackerNewsV2User",
									  "description": null
									},
									{
									  "name": "NodeConnection",
									  "description": "A connection to a list of items."
									},
									{
									  "name": "PageInfo",
									  "description": "Information about pagination in a connection."
									},
									{
									  "name": "NodeEdge",
									  "description": "An edge in a connection."
									},
									{
									  "name": "HackerNewsV2CommentConnection",
									  "description": "A connection to a list of items."
									},
									{
									  "name": "HackerNewsV2CommentEdge",
									  "description": "An edge in a connection."
									},
									{
									  "name": "HackerNewsV2Comment",
									  "description": null
									},
									{
									  "name": "HackerNewsV2Job",
									  "description": null
									},
									{
									  "name": "HackerNewsV2Poll",
									  "description": null
									},
									{
									  "name": "HackerNewsV2PollPart",
									  "description": null
									},
									{
									  "name": "RedditAPI",
									  "description": "The Reddit API"
									},
									{
									  "name": "RedditSubreddit",
									  "description": "Information about and listings in a subreddit"
									},
									{
									  "name": "Float",
									  "description": "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). "
									},
									{
									  "name": "RedditLink",
									  "description": "A link posted to a subreddit"
									},
									{
									  "name": "RedditUser",
									  "description": "Information about a Reddit user"
									},
									{
									  "name": "RedditComment",
									  "description": "A comment on a link"
									},
									{
									  "name": "TimeInterval",
									  "description": "Time interval by which listings are queried"
									},
									{
									  "name": "KeyValueAPI",
									  "description": "An in-memory key-value store"
									},
									{
									  "name": "KeyValueItem",
									  "description": "Item for a key-value pair"
									},
									{
									  "name": "GithubAPI",
									  "description": "The Github API"
									},
									{
									  "name": "GithubUser",
									  "description": null
									},
									{
									  "name": "GithubRepo",
									  "description": null
									},
									{
									  "name": "GithubCommit",
									  "description": null
									},
									{
									  "name": "UserOrCommitAuthor",
									  "description": null
									},
									{
									  "name": "GithubCommitAuthor",
									  "description": "Commit author that is not associated with a Github acount"
									},
									{
									  "name": "GithubStatus",
									  "description": "Status of a commit"
									},
									{
									  "name": "GithubTree",
									  "description": null
									},
									{
									  "name": "GithubTreeEntry",
									  "description": null
									},
									{
									  "name": "GithubIssue",
									  "description": null
									},
									{
									  "name": "GithubIssueLabelType",
									  "description": null
									},
									{
									  "name": "GithubIssueCommentType",
									  "description": null
									},
									{
									  "name": "GithubBranch",
									  "description": null
									},
									{
									  "name": "TwitterAPI",
									  "description": "The Twitter API"
									},
									{
									  "name": "UserIdentifier",
									  "description": "Either user unique ID, or screen name"
									},
									{
									  "name": "UserIdentity",
									  "description": "Parse user provided identity"
									},
									{
									  "name": "TwitterUser",
									  "description": "Twitter user"
									},
									{
									  "name": "Tweet",
									  "description": "A tweet object"
									},
									{
									  "name": "Retweet",
									  "description": "Retweet of a tweet"
									},
									{
									  "name": "SearchReponse",
									  "description": "Type of search response."
									},
									{
									  "name": "GiphyAPI",
									  "description": null
									},
									{
									  "name": "GiphyGIFData",
									  "description": null
									},
									{
									  "name": "GiphyGIFImages",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataFixedHeight",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataFixedHeightStill",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataFixedHeightDownsample",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataFixedWidth",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataFixedWidthStill",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataFixedWidthDownsample",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataFixedHeightSmall",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataFixedHeightSmallStill",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataFixedWidthSmall",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataFixedWidthSmallStill",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataDownsized",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataDownsizedStill",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataDownsizedLarge",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataOriginal",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataOriginalStill",
									  "description": null
									},
									{
									  "name": "GiphyGIFImageDataLooping",
									  "description": null
									},
									{
									  "name": "GiphyRatingType",
									  "description": "The rating of a GIF"
									},
									{
									  "name": "GraphQLHubMutationAPI",
									  "description": "APIs exposed as GraphQL mutations"
									},
									{
									  "name": "SetValueForKeyInput",
									  "description": null
									},
									{
									  "name": "SetValueForKeyPayload",
									  "description": null
									},
									{
									  "name": "__Schema",
									  "description": "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations."
									},
									{
									  "name": "__Type",
									  "description": "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types."
									},
									{
									  "name": "__TypeKind",
									  "description": "An enum describing what kind of type a given `__Type` is."
									},
									{
									  "name": "__Field",
									  "description": "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type."
									},
									{
									  "name": "__InputValue",
									  "description": "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value."
									},
									{
									  "name": "__EnumValue",
									  "description": "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string."
									},
									{
									  "name": "__Directive",
									  "description": "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQLâ€™s execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor."
									}
								  ]
								}
							  }
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/Response"
						}
					},
					"404": {
						"description": "Not found"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		}
	},
	"definitions": {
		"Query": {
			"properties": {
				"query": {
					"type": "string"
				},
				"variables": {
					"type": "object"
				},
				"operationName": {
					"type": "string"
				}
			},
			"required": [
				"query"
			],
			"example": {
				"query": "query { graphQLHub }"
			}

		},
		"Response": {
			"type": "object",
			"properties": {
				"data": {
					"description": "The returned data",
					"type": "object"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Error"
					}
				}
			}
		},
		"Error": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string"
				},
				"locations": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Location"
					}
				}
			}
		},
		"Location": {
			"type": "object",
			"properties": {
				"line": {
					"type": "integer"
				},
				"column": {
					"type": "integer"
				}
			}
		}
	}
}