{
  "swagger": "2.0",
  "info": {
    "title": "On Entertainment Sports APIs",
    "version": "1",
    "contact": {
      "name": "Mike Ralphson",
      "email": "mike.ralphson@gmail.com",
      "url": "https://github.com/mermade/mashery2openapi"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "description": "Test our Gracenote API services using API Explorer. Simply enter the parameters and click “Try It”. You must have a valid API key for this to work (if you do not already have one, Get Started to read more about plans and request a key). ",
    "x-mashery-id": "3553"
  },
  "schemes": [
    "http"
  ],
  "host": "api.tmsapi.com",
  "basePath": "/sports/v1",
  "externalDocs": {
    "description": "You can also view our written documentation.",
    "url": "http://developer.tmsapi.com/Getting_Started"
  },
  "consumes": [],
  "produces": [],
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "apikey",
      "in": "query"
    }
  },
  "security": [
    {
      "key": []
    }
  ],
  "tags": [
    {
      "name": "On Entertainment Sports Data APIs"
    }
  ],
  "paths": {
    "/Sports": {
      "get": {
        "operationId": "SportsOnEntertainmentSportsDataAPIs",
        "summary": "Helper API to download sports and their related ID...",
        "description": "Helper API to download sports and their related IDs (baseball, football etc). Response schema: gracenote_sports__sports_1.0.xsd",
        "tags": [
          "On Entertainment Sports Data APIs"
        ],
        "parameters": [
          {
            "name": "updateId",
            "type": "string",
            "description": "Token-based update retrieval. Updates will be retrieved with specified updateId value. For full seeding, specify updateId=0. Increment max updateId by one to retrieve next set of updated records.",
            "in": "query",
            "required": true
          },
          {
            "name": "limit",
            "type": "string",
            "description": "Maximum number of objects to retrieve for processing predictable batch sizes. Each iteration would retain limit number for same batch size.",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Events": {
      "get": {
        "operationId": "EventsOnEntertainmentSportsDataAPIs",
        "summary": "Sports events (games, races, tournaments). Respons...",
        "description": "Sports events (games, races, tournaments). Response schema: gracenote_sports_events_1.0.xsd",
        "tags": [
          "On Entertainment Sports Data APIs"
        ],
        "parameters": [
          {
            "name": "updateId",
            "type": "string",
            "description": "Token-based update retrieval. Updates will be retrieved with specified updateId value. For full seeding, specify updateId=0. Increment max updateId by one to retrieve next set of updated records.",
            "in": "query",
            "required": true
          },
          {
            "name": "limit",
            "type": "string",
            "description": "Maximum number of objects to retrieve for processing predictable batch sizes. Each iteration would retain limit number for same batch size.",
            "in": "query",
            "required": false
          },
          {
            "name": "sportId",
            "type": "string",
            "description": "Comma-separated list of sport identifiers; can be used to filter events, organizationSeasons and teamSeasons APIs.",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Organizations": {
      "get": {
        "operationId": "OrganizationsOnEntertainmentSportsDataAPIs",
        "summary": "Instances of leagues, conferences and divisions. R...",
        "description": "Instances of leagues, conferences and divisions. Response schema: gracenote_sports_organizations_1.0.xsd",
        "tags": [
          "On Entertainment Sports Data APIs"
        ],
        "parameters": [
          {
            "name": "updateId",
            "type": "string",
            "description": "Token-based update retrieval. Updates will be retrieved with specified updateId value. For full seeding, specify updateId=0. Increment max updateId by one to retrieve next set of updated records.",
            "in": "query",
            "required": true
          },
          {
            "name": "limit",
            "type": "string",
            "description": "Maximum number of objects to retrieve for processing predictable batch sizes. Each iteration would retain limit number for same batch size.",
            "in": "query",
            "required": false
          },
          {
            "name": "sportId",
            "type": "string",
            "description": "Comma-separated list of sport identifiers; can be used to filter events, organizationSeasons and teamSeasons APIs.",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/OrganizationSeasons": {
      "get": {
        "operationId": "OrganizationSeasonsOnEntertainmentSportsDataAPIs",
        "summary": "Seasonal instances of leagues, conferences and div...",
        "description": "Seasonal instances of leagues, conferences and divisions. Response schema: gracenote_sports_organization_seasons_1.0.xsd",
        "tags": [
          "On Entertainment Sports Data APIs"
        ],
        "parameters": [
          {
            "name": "updateId",
            "type": "string",
            "description": "Token-based update retrieval. Updates will be retrieved with specified updateId value. For full seeding, specify updateId=0. Increment max updateId by one to retrieve next set of updated records.",
            "in": "query",
            "required": true
          },
          {
            "name": "limit",
            "type": "string",
            "description": "Maximum number of objects to retrieve for processing predictable batch sizes. Each iteration would retain limit number for same batch size.",
            "in": "query",
            "required": false
          },
          {
            "name": "sportId",
            "type": "string",
            "description": "Comma-separated list of sport identifiers; can be used to filter events, organizationSeasons and teamSeasons APIs.",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Teams": {
      "get": {
        "operationId": "TeamsOnEntertainmentSportsDataAPIs",
        "summary": "Instances of teams. Response schema: gracenote_spo...",
        "description": "Instances of teams. Response schema: gracenote_sports_teams_1.0.xsd",
        "tags": [
          "On Entertainment Sports Data APIs"
        ],
        "parameters": [
          {
            "name": "updateId",
            "type": "string",
            "description": "Token-based update retrieval. Updates will be retrieved with specified updateId value. For full seeding, specify updateId=0. Increment max updateId by one to retrieve next set of updated records.",
            "in": "query",
            "required": true
          },
          {
            "name": "limit",
            "type": "string",
            "description": "Maximum number of objects to retrieve for processing predictable batch sizes. Each iteration would retain limit number for same batch size.",
            "in": "query",
            "required": false
          },
          {
            "name": "sportId",
            "type": "string",
            "description": "Comma-separated list of sport identifiers; can be used to filter events, organizationSeasons and teamSeasons APIs.",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/TeamSeasons": {
      "get": {
        "operationId": "TeamSeasonsOnEntertainmentSportsDataAPIs",
        "summary": "Seasonal instances of teams. Response schema: grac...",
        "description": "Seasonal instances of teams. Response schema: gracenote_sports_team_seasons_1.0.xsd",
        "tags": [
          "On Entertainment Sports Data APIs"
        ],
        "parameters": [
          {
            "name": "updateId",
            "type": "string",
            "description": "Token-based update retrieval. Updates will be retrieved with specified updateId value. For full seeding, specify updateId=0. Increment max updateId by one to retrieve next set of updated records.",
            "in": "query",
            "required": true
          },
          {
            "name": "limit",
            "type": "string",
            "description": "Maximum number of objects to retrieve for processing predictable batch sizes. Each iteration would retain limit number for same batch size.",
            "in": "query",
            "required": false
          },
          {
            "name": "sportId",
            "type": "string",
            "description": "Comma-separated list of sport identifiers; can be used to filter events, organizationSeasons and teamSeasons APIs.",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Universities": {
      "get": {
        "operationId": "UniversitiesOnEntertainmentSportsDataAPIs",
        "summary": "Instances of Universities. Response schema: gracen...",
        "description": "Instances of Universities. Response schema: gracenote_sports_universities_1.0.xsd",
        "tags": [
          "On Entertainment Sports Data APIs"
        ],
        "parameters": [
          {
            "name": "updateId",
            "type": "string",
            "description": "Token-based update retrieval. Updates will be retrieved with specified updateId value. For full seeding, specify updateId=0. Increment max updateId by one to retrieve next set of updated records.",
            "in": "query",
            "required": true
          },
          {
            "name": "limit",
            "type": "string",
            "description": "Maximum number of objects to retrieve for processing predictable batch sizes. Each iteration would retain limit number for same batch size.",
            "in": "query",
            "required": false
          },
          {
            "name": "sportId",
            "type": "string",
            "description": "Comma-separated list of sport identifiers; can be used to filter events, organizationSeasons and teamSeasons APIs.",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Venues": {
      "get": {
        "operationId": "VenuesOnEntertainmentSportsDataAPIs",
        "summary": "Sports venues and arenas. Response schema: graceno...",
        "description": "Sports venues and arenas. Response schema: gracenote_sports_venues_1.0.xsd",
        "tags": [
          "On Entertainment Sports Data APIs"
        ],
        "parameters": [
          {
            "name": "updateId",
            "type": "string",
            "description": "Token-based update retrieval. Updates will be retrieved with specified updateId value. For full seeding, specify updateId=0. Increment max updateId by one to retrieve next set of updated records.",
            "in": "query",
            "required": true
          },
          {
            "name": "limit",
            "type": "string",
            "description": "Maximum number of objects to retrieve for processing predictable batch sizes. Each iteration would retain limit number for same batch size.",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/RelatedPrograms": {
      "get": {
        "operationId": "RelatedProgramsOnEntertainmentSportsDataAPIs",
        "summary": "Related Gracenote program Ids mapped to sports eve...",
        "description": "Related Gracenote program Ids mapped to sports events, teams and organizations. Includes pre, post game shows, coaches shows and other related programs. Response schema: gracenote_sports_venues_1.0.xsd",
        "tags": [
          "On Entertainment Sports Data APIs"
        ],
        "parameters": [
          {
            "name": "updateId",
            "type": "string",
            "description": "Token-based update retrieval. Updates will be retrieved with specified updateId value. For full seeding, specify updateId=0. Increment max updateId by one to retrieve next set of updated records.",
            "in": "query",
            "required": true
          },
          {
            "name": "limit",
            "type": "string",
            "description": "Maximum number of objects to retrieve for processing predictable batch sizes. Each iteration would retain limit number for same batch size.",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "definitions": {}
}