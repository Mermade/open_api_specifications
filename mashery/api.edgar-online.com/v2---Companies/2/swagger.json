{
  "swagger": "2.0",
  "info": {
    "title": "v2 - Companies",
    "version": "2",
    "contact": {
      "name": "Mike Ralphson",
      "email": "mike.ralphson@gmail.com",
      "url": "https://github.com/mermade/mashery2openapi"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "description": "Test our API services using I/O Docs. The Company API provides company data for a given search.",
    "x-mashery-id": "3151"
  },
  "schemes": [
    "http"
  ],
  "host": "api.edgar-online.com",
  "basePath": "/v2",
  "externalDocs": {
    "description": "You can also view our written documentation.",
    "url": "http://developer.edgar-online.com/iodocs/docs"
  },
  "consumes": [],
  "produces": [],
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "apikey",
      "in": "query"
    }
  },
  "security": [
    {
      "key": []
    }
  ],
  "tags": [
    {
      "name": "Company Calls"
    }
  ],
  "paths": {
    "/companies": {
      "get": {
        "operationId": "GetCompaniesCompanyCalls",
        "summary": "URI for this resource.",
        "tags": [
          "Company Calls"
        ],
        "parameters": [
          {
            "name": "ciks",
            "type": "integer",
            "description": "Search company data using single CIK or list of CIKs separated by comma. Example: 0001287145,000094982,0001097945, etc., numeric value only",
            "in": "query",
            "required": false
          },
          {
            "name": "companynames",
            "type": "string",
            "description": "Search company data using single company name or list of company names separated by comma. Example: ADVANCE AUTO PARTS INC,a*, etc.",
            "in": "query",
            "required": false
          },
          {
            "name": "entityids",
            "type": "string",
            "description": "Search company data using single EntityId or list of EntityIds separated by comma. Example: 8528,10358,9112,etc., numeric value only",
            "in": "query",
            "required": false
          },
          {
            "name": "primarysymbols",
            "type": "string",
            "description": "Search company data using single primarySymbol or list of primarySymbols separated by comma. Example: msft,ibm,aapl,etc.",
            "in": "query",
            "required": false
          },
          {
            "name": "industries",
            "type": "string",
            "description": "Search company data using single Industry or list of Industries separated by comma. Example: hotels%20%26%20Motels,airline,etc.",
            "in": "query",
            "required": false
          },
          {
            "name": "sectors",
            "type": "string",
            "description": "Search company data using single sector or list of sectors separated by comma. Example: services,Transportation,etc.",
            "in": "query",
            "required": false
          },
          {
            "name": "siccodes",
            "type": "integer",
            "description": "Search company data using single SIC code or list of SIC codes separated by comma. Example: 4512,7011,etc., numeric value only",
            "in": "query",
            "required": false
          },
          {
            "name": "primarycusips",
            "type": "string",
            "description": "Search company data using single CUSIP or list of CUSIPs separated by comma. Example: 00846U10,00030710,etc.",
            "in": "query",
            "required": false
          },
          {
            "name": "primaryexchanges",
            "type": "string",
            "description": "Search company data using single exchange or list of exchanges separated by comma. Example: Nasdaq Global Market,NYSE,OTC,etc.",
            "in": "query",
            "required": false
          },
          {
            "name": "cities",
            "type": "string",
            "description": "Search company data using single city or list of cities separated by comma. Example: SANTIAGO,DALLAS,etc.",
            "in": "query",
            "required": false
          },
          {
            "name": "zipcodes",
            "type": "string",
            "description": "Search company data using single Zip Code or list of Zip Codes separated by comma. Example: 76155,89144,etc.",
            "in": "query",
            "required": false
          },
          {
            "name": "countries",
            "type": "string",
            "description": "Search company data using single country or list of countries separated by comma. Example: UNITED STATES OF AMERICA,CANADA,etc.",
            "in": "query",
            "required": false
          },
          {
            "name": "states",
            "type": "string",
            "description": "Search company data using single state or list of states separated by comma. Example: Tennessee,California,etc.",
            "in": "query",
            "required": false
          },
          {
            "name": "activecompanies",
            "type": "boolean",
            "description": "Flag that shows active companies. Example: false,true",
            "in": "query",
            "required": false
          },
          {
            "name": "deleted",
            "type": "string",
            "description": "Parameter to filter the result set by IsDeleted.",
            "in": "query",
            "required": false,
            "enum": [
              "false",
              "true",
              "any"
            ]
          },
          {
            "name": "modifiedsince",
            "type": "string",
            "description": "Search companies metadata based on modified since date range.Example: range - 20111001~20131001, or start date - 20141001",
            "in": "query",
            "required": false
          },
          {
            "name": "filter",
            "type": "string",
            "description": "Filter expression for custom filtering. Example: entityid eq 8528",
            "in": "query",
            "required": false
          },
          {
            "name": "fields",
            "type": "string",
            "description": "Field can be used to add or suppress the fields in the response. To include fields type the field name seperated by comma, or to exclude the field use !. Example (To exclude fields): !TotalRevenue.",
            "in": "query",
            "required": false
          },
          {
            "name": "limit",
            "type": "string",
            "description": "Limit is used with paging. Limit defines the number of rows to return in a single call. Enter a number between 1 - 9999.",
            "in": "query",
            "required": false
          },
          {
            "name": "offset",
            "type": "string",
            "description": "Offset is used with paging. Offset defines which page number to retrieve based on total numbers of rows and limit.",
            "in": "query",
            "required": false
          },
          {
            "name": "debug",
            "type": "boolean",
            "description": "Debug parameter helps developers investigate what happened during the call and what items were substituted if any during the call. Select true to invoke debug parameter.",
            "in": "query",
            "required": false
          },
          {
            "name": "sortby",
            "type": "string",
            "description": "Sort Parameter can be used to sort the data in ASC or DESC. For example to sort by primarysymbols enter primarysymbols in this field followed by ASC for ascending order and DESC for descending order (primarysymbols asc).",
            "in": "query",
            "required": false,
            "default": "primarysymbol asc"
          },
          {
            "name": "Accept",
            "type": "string",
            "description": "Get the response in XML or JSON.",
            "in": "header",
            "required": false,
            "enum": [
              "application/xml",
              "application/json"
            ]
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "definitions": {}
}