{
  "swagger": "2.0",
  "info": {
    "title": "v2 - Insider-Issues",
    "version": "2",
    "contact": {
      "name": "Mike Ralphson",
      "email": "mike.ralphson@gmail.com",
      "url": "https://github.com/mermade/mashery2openapi"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "description": "Test our API services using I/O Docs. ",
    "x-mashery-id": "3158"
  },
  "schemes": [
    "http"
  ],
  "host": "api.edgar-online.com",
  "basePath": "/v2/insiders",
  "externalDocs": {
    "description": "You can also view our written documentation.",
    "url": "http://developer.edgar-online.com/iodocs/docs"
  },
  "consumes": [],
  "produces": [],
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "apikey",
      "in": "query"
    }
  },
  "security": [
    {
      "key": []
    }
  ],
  "tags": [
    {
      "name": "Insider-Issues"
    }
  ],
  "paths": {
    "/issues": {
      "get": {
        "operationId": "SearchInsider-IssuesresourceInsider-Issues",
        "summary": "",
        "tags": [
          "Insider-Issues"
        ],
        "parameters": [
          {
            "name": "fields",
            "type": "string",
            "description": "Search for data based on specified fields, separated by comma",
            "in": "query",
            "required": false
          },
          {
            "name": "filter",
            "type": "string",
            "description": "Filter parameter supports expression based search; example: issueid eq 467297",
            "in": "query",
            "required": false
          },
          {
            "name": "issueids",
            "type": "integer",
            "description": "Search Insider filers based on issueid's separated by comma; examples: 1234567 or 1234567,34567",
            "in": "query",
            "required": false,
            "default": "467297"
          },
          {
            "name": "issuenames",
            "type": "string",
            "description": "Search Insider filers based on issuenames separated by comma; field support wildcard search, starts with (name*), end with (*name), contains (*name*)",
            "in": "query",
            "required": false
          },
          {
            "name": "issuetickers",
            "type": "string",
            "description": "Search Insider filers based on issuetickers, separated by comma",
            "in": "query",
            "required": false
          },
          {
            "name": "issuecities",
            "type": "string",
            "description": "Search Insider filers based on issue cities, separated by comma; field supports wildcard search, starts with (name*), ends with (*name), contains (*name*)",
            "in": "query",
            "required": false
          },
          {
            "name": "issuestates",
            "type": "string",
            "description": "Search Insider filers based on issuestates, separated by comma; field supports wildcard search, starts with (name*), ends with (*name), contains (*name*)",
            "in": "query",
            "required": false
          },
          {
            "name": "issuezips",
            "type": "string",
            "description": "Search Insider filers based on issuezips, separated by comma",
            "in": "query",
            "required": false
          },
          {
            "name": "filerids",
            "type": "integer",
            "description": "Search Insider filers based on filerids, separated by comma",
            "in": "query",
            "required": false
          },
          {
            "name": "filernames",
            "type": "string",
            "description": "Search Insider filers based on filernames, separated by comma; field supports wildcard search, starts with (name*), ends with (*name), contains (*name*)",
            "in": "query",
            "required": false
          },
          {
            "name": "filercities",
            "type": "string",
            "description": "Search Insider filers based on filercities, separated by comma; field supports wildcard search, starts with (name*), ends with (*name), contains (*name*)",
            "in": "query",
            "required": false
          },
          {
            "name": "filerstates",
            "type": "string",
            "description": "Search Insider filers based on filerstates separated by comma; field supports wildcard search, starts with (name*), ends with (*name), contains (*name*)",
            "in": "query",
            "required": false
          },
          {
            "name": "filerzips",
            "type": "string",
            "description": "Search Insider filers based on filerzips, separated by comma",
            "in": "query",
            "required": false
          },
          {
            "name": "filerphones",
            "type": "string",
            "description": "Search Insider Issues based on filerphones, separated by comma; example: (123) 456-7890",
            "in": "query",
            "required": false
          },
          {
            "name": "relationships",
            "type": "string",
            "description": "Select relationship of the filer to the issuer; example: Director,Beneficial Owner (10%),Officer,Other",
            "in": "query",
            "required": false,
            "enum": [
              "Director",
              "Beneficial Owner (10%)",
              "Officer",
              "Director,Officer"
            ]
          },
          {
            "name": "ownershiptypes",
            "type": "string",
            "description": "Select the ownershiptypes; use comma as separator; example: direct,indirect",
            "in": "query",
            "required": false
          },
          {
            "name": "ownershiptypeids",
            "type": "integer",
            "description": "Select the ownershiptypeids. For example: 0 = 'direct' and 1 = 'indirect'; use comma as separator",
            "in": "query",
            "required": false
          },
          {
            "name": "transactiontypes",
            "type": "string",
            "description": "Specifies the type of transaction for specified filer; possible values include: Acquisition (Non Open Market), Automatic Buy, Automatic Sell, Buy, Disposition (Non Open Market),Dividend Reinvestment, Option Execute, Sell; use comma to separate types",
            "in": "query",
            "required": false,
            "enum": [
              "Acquisition (Non Open Market)",
              "Automatic Buy",
              "Automatic Sell",
              "Buy",
              "Disposition (Non Open Market)",
              "Dividend Reinvestment",
              "Option Execute",
              "Sell"
            ]
          },
          {
            "name": "transactiontypeids",
            "type": "integer",
            "description": "Select transaction type ID; example: 1 - 'Buy', 2 - 'Sell', 3 - 'Acquisition (Non Open Market)' etc.; use comma as separator",
            "in": "query",
            "required": false
          },
          {
            "name": "transactiondates",
            "type": "string",
            "description": "Select the date or dates range of transactions, where the first date is the beginning of the range, the second one is the end of the range; example: 20131026~20131027",
            "in": "query",
            "required": false
          },
          {
            "name": "insiderformtypes",
            "type": "string",
            "description": "Select the insiderformtypes, separated by comma",
            "in": "query",
            "required": false,
            "enum": [
              "Form 4",
              "Form 4 Option"
            ]
          },
          {
            "name": "insiderformtypeids",
            "type": "integer",
            "description": "Select the insider form type Id, use comma as separator; example: '4' = 'Form 4', and '5' = 'Form 4 Option'",
            "in": "query",
            "required": false
          },
          {
            "name": "modifiedsince",
            "type": "string",
            "description": "Search data based on modified since date range; example: range - 20151001~20151101 or start date - 20151001",
            "in": "query",
            "required": false
          },
          {
            "name": "deleted",
            "type": "boolean",
            "description": "Parameter to filter the result set by IsDeleted",
            "in": "query",
            "required": false,
            "enum": [
              "true",
              "false",
              "any"
            ]
          },
          {
            "name": "limit",
            "type": "integer",
            "description": "Limit is used with paging to define the number of rows to return in a single call; use a number between 1 - 9999",
            "in": "query",
            "required": false
          },
          {
            "name": "offset",
            "type": "integer",
            "description": "Offset is used with paging to define which page number to retrieve based on total numbers of rows and limit",
            "in": "query",
            "required": false
          },
          {
            "name": "debug",
            "type": "boolean",
            "description": "Debug parameter helps developers investigate what happened during the call and what items were substituted if any during the call; select true to invoke debug parameter",
            "in": "query",
            "required": false
          },
          {
            "name": "sortby",
            "type": "string",
            "description": "Sort can be used to sort the data as ASC or DESC; for example to sort by filerid enter filerid in this field followed by ASC for ascending order (filerid asc) and DESC for descending order (filerid desc).",
            "in": "query",
            "required": false,
            "default": "filerid asc"
          },
          {
            "name": "Accept",
            "type": "string",
            "description": "Get the response in XML or JSON.",
            "in": "header",
            "required": false,
            "enum": [
              "application/xml",
              "application/json"
            ]
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "definitions": {}
}