{
  "swagger": "2.0",
  "info": {
    "version": "2014-06-30",
    "x-release": "v4",
    "title": "Amazon Cognito Identity",
    "description": "<fullname>Amazon Cognito</fullname> <p>Amazon Cognito is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. Amazon Cognito uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon), and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>To provide end-user credentials, first make an unsigned call to <a>GetId</a>. If the end user is authenticated with one of the supported identity providers, set the <code>Logins</code> map with the identity provider token. <code>GetId</code> returns a unique identifier for the user.</p> <p>Next, make an unsigned call to <a>GetCredentialsForIdentity</a>. This call expects the same <code>Logins</code> map as the <code>GetId</code> call, as well as the <code>IdentityID</code> originally returned by <code>GetId</code>. Assuming your identity pool has been configured via the <a>SetIdentityPoolRoles</a> operation, <code>GetCredentialsForIdentity</code> will return AWS credentials for your use. If your pool has not been configured with <code>SetIdentityPoolRoles</code>, or if you want to follow legacy flow, make an unsigned call to <a>GetOpenIdToken</a>, which returns the OpenID token necessary to call STS and retrieve AWS credentials. This call expects the same <code>Logins</code> map as the <code>GetId</code> call, as well as the <code>IdentityID</code> originally returned by <code>GetId</code>. The token returned by <code>GetOpenIdToken</code> can be passed to the STS operation <a href=\"http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html\">AssumeRoleWithWebIdentity</a> to retrieve AWS credentials.</p> <p>If you want to use Amazon Cognito in an Android, iOS, or Unity application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/index.html\">AWS Mobile SDK Developer Guide</a>.</p>",
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "contact": {
      "name": "Mike Ralphson",
      "email": "mike.ralphson@gmail.com",
      "url": "https://github.com/mermade/aws2openapi"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    }
  },
  "x-logo": {
    "url": "https://media.amazonwebservices.com/blog/2007/big_pbaws_logo_300px.jpg",
    "backgroundColor": "#FFFFFF"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/cognito-identity/"
  },
  "host": "cognito-identity.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "hmac": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "paths": {
    "/": {
      "post": {
        "operationId": "UpdateIdentityPool",
        "description": "<p>Updates a user pool.</p><p>You must use AWS Developer credentials to call this API.</p>",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IdentityPool"
            }
          },
          "400": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "401": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "402": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "403": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "405": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "406": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          },
          "407": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentityPool"
            }
          }
        ]
      }
    }
  },
  "definitions": {
    "ARNString": {
      "type": "string",
      "minLength": 20,
      "maxLength": 2048
    },
    "AccessKeyString": {
      "type": "string"
    },
    "AccountId": {
      "type": "string",
      "pattern": "\\d+",
      "minLength": 1,
      "maxLength": 15
    },
    "CognitoIdentityProvider": {
      "type": "object",
      "properties": {
        "ProviderName": {
          "$ref": "#/definitions/CognitoIdentityProviderName",
          "description": "The provider name for an Amazon Cognito Identity User Pool. For example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>."
        },
        "ClientId": {
          "$ref": "#/definitions/CognitoIdentityProviderClientId",
          "description": "The client ID for the Amazon Cognito Identity User Pool."
        }
      },
      "description": "A provider representing an Amazon Cognito Identity User Pool and its client ID."
    },
    "CognitoIdentityProviderClientId": {
      "type": "string",
      "pattern": "[\\w_]+",
      "minLength": 1,
      "maxLength": 128
    },
    "CognitoIdentityProviderList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CognitoIdentityProvider"
      }
    },
    "CognitoIdentityProviderName": {
      "type": "string",
      "pattern": "[\\w._:/-]+",
      "minLength": 1,
      "maxLength": 128
    },
    "ConcurrentModificationException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "The message returned by a ConcurrentModificationException."
        }
      },
      "description": "Thrown if there are parallel requests to modify a resource."
    },
    "CreateIdentityPoolInput": {
      "type": "object",
      "required": [
        "IdentityPoolName",
        "AllowUnauthenticatedIdentities"
      ],
      "properties": {
        "IdentityPoolName": {
          "$ref": "#/definitions/IdentityPoolName",
          "description": "A string that you provide."
        },
        "AllowUnauthenticatedIdentities": {
          "$ref": "#/definitions/IdentityPoolUnauthenticated",
          "description": "TRUE if the identity pool supports unauthenticated logins."
        },
        "SupportedLoginProviders": {
          "$ref": "#/definitions/IdentityProviders",
          "description": "Optional key:value pairs mapping provider names to provider app IDs."
        },
        "DeveloperProviderName": {
          "$ref": "#/definitions/DeveloperProviderName",
          "description": "<p>The \"domain\" by which Cognito will refer to your users. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (<code>.</code>), underscore (<code>_</code>), and dash (<code>-</code>).</p> <p>Once you have set a developer provider name, you cannot change it. Please take care in setting this parameter.</p>"
        },
        "OpenIdConnectProviderARNs": {
          "$ref": "#/definitions/OIDCProviderList",
          "description": "A list of OpendID Connect provider ARNs."
        },
        "CognitoIdentityProviders": {
          "$ref": "#/definitions/CognitoIdentityProviderList",
          "description": "An array of Amazon Cognito Identity user pools."
        },
        "SamlProviderARNs": {
          "$ref": "#/definitions/SAMLProviderList",
          "description": "An array of Amazon Resource Names (ARNs) of the SAML provider for your identity pool."
        }
      },
      "description": "Input to the CreateIdentityPool action."
    },
    "Credentials": {
      "type": "object",
      "properties": {
        "AccessKeyId": {
          "$ref": "#/definitions/AccessKeyString",
          "description": "The Access Key portion of the credentials."
        },
        "SecretKey": {
          "$ref": "#/definitions/SecretKeyString",
          "description": "The Secret Access Key portion of the credentials"
        },
        "SessionToken": {
          "$ref": "#/definitions/SessionTokenString",
          "description": "The Session Token portion of the credentials"
        },
        "Expiration": {
          "$ref": "#/definitions/DateType",
          "description": "The date at which these credentials will expire."
        }
      },
      "description": "Credentials for the provided identity ID."
    },
    "DateType": {
      "type": "string",
      "format": "date-time"
    },
    "DeleteIdentitiesInput": {
      "type": "object",
      "required": [
        "IdentityIdsToDelete"
      ],
      "properties": {
        "IdentityIdsToDelete": {
          "$ref": "#/definitions/IdentityIdList",
          "description": "A list of 1-60 identities that you want to delete."
        }
      },
      "description": "Input to the <code>DeleteIdentities</code> action."
    },
    "DeleteIdentitiesResponse": {
      "type": "object",
      "properties": {
        "UnprocessedIdentityIds": {
          "$ref": "#/definitions/UnprocessedIdentityIdList",
          "description": "An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and IdentityId."
        }
      },
      "description": "Returned in response to a successful <code>DeleteIdentities</code> operation."
    },
    "DeleteIdentityPoolInput": {
      "type": "object",
      "required": [
        "IdentityPoolId"
      ],
      "properties": {
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        }
      },
      "description": "Input to the DeleteIdentityPool action."
    },
    "DescribeIdentityInput": {
      "type": "object",
      "required": [
        "IdentityId"
      ],
      "properties": {
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        }
      },
      "description": "Input to the <code>DescribeIdentity</code> action."
    },
    "DescribeIdentityPoolInput": {
      "type": "object",
      "required": [
        "IdentityPoolId"
      ],
      "properties": {
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        }
      },
      "description": "Input to the DescribeIdentityPool action."
    },
    "DeveloperProviderName": {
      "type": "string",
      "pattern": "[\\w._-]+",
      "minLength": 1,
      "maxLength": 128
    },
    "DeveloperUserAlreadyRegisteredException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "This developer user identifier is already registered with Cognito."
        }
      },
      "description": "The provided developer user identifier is already registered with Cognito under a different identity ID."
    },
    "DeveloperUserIdentifier": {
      "type": "string",
      "pattern": "[\\w.@_-]+",
      "minLength": 1,
      "maxLength": 1024
    },
    "DeveloperUserIdentifierList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DeveloperUserIdentifier"
      }
    },
    "ErrorCode": {
      "type": "string",
      "enum": [
        "AccessDenied",
        "InternalServerError"
      ]
    },
    "ExternalServiceException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "The message returned by an ExternalServiceException"
        }
      },
      "description": "An exception thrown when a dependent service such as Facebook or Twitter is not responding"
    },
    "GetCredentialsForIdentityInput": {
      "type": "object",
      "required": [
        "IdentityId"
      ],
      "properties": {
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        },
        "Logins": {
          "$ref": "#/definitions/LoginsMap",
          "description": "A set of optional name-value pairs that map provider names to provider tokens."
        },
        "CustomRoleArn": {
          "$ref": "#/definitions/ARNString",
          "description": "The Amazon Resource Name (ARN) of the role to be assumed when multiple roles were received in the token from the identity provider. For example, a SAML-based identity provider. This parameter is optional for identity providers that do not support role customization."
        }
      },
      "description": "Input to the <code>GetCredentialsForIdentity</code> action."
    },
    "GetCredentialsForIdentityResponse": {
      "type": "object",
      "properties": {
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        },
        "Credentials": {
          "$ref": "#/definitions/Credentials",
          "description": "Credentials for the provided identity ID."
        }
      },
      "description": "Returned in response to a successful <code>GetCredentialsForIdentity</code> operation."
    },
    "GetIdInput": {
      "type": "object",
      "required": [
        "IdentityPoolId"
      ],
      "properties": {
        "AccountId": {
          "$ref": "#/definitions/AccountId",
          "description": "A standard AWS account ID (9+ digits)."
        },
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        },
        "Logins": {
          "$ref": "#/definitions/LoginsMap",
          "description": "<p>A set of optional name-value pairs that map provider names to provider tokens.</p> <p>The available provider names for <code>Logins</code> are as follows: <ul> <li>Facebook: <code>graph.facebook.com</code></li> <li>Google: <code>accounts.google.com</code></li> <li>Amazon: <code>www.amazon.com</code></li> <li>Twitter: <code>api.twitter.com</code></li> <li>Digits: <code>www.digits.com</code></li> </ul> </p>"
        }
      },
      "description": "Input to the GetId action."
    },
    "GetIdResponse": {
      "type": "object",
      "properties": {
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        }
      },
      "description": "Returned in response to a GetId request."
    },
    "GetIdentityPoolRolesInput": {
      "type": "object",
      "required": [
        "IdentityPoolId"
      ],
      "properties": {
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        }
      },
      "description": "Input to the <code>GetIdentityPoolRoles</code> action."
    },
    "GetIdentityPoolRolesResponse": {
      "type": "object",
      "properties": {
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        },
        "Roles": {
          "$ref": "#/definitions/RolesMap",
          "description": "The map of roles associated with this pool. Currently only authenticated and unauthenticated roles are supported."
        }
      },
      "description": "Returned in response to a successful <code>GetIdentityPoolRoles</code> operation."
    },
    "GetOpenIdTokenForDeveloperIdentityInput": {
      "type": "object",
      "required": [
        "IdentityPoolId",
        "Logins"
      ],
      "properties": {
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        },
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        },
        "Logins": {
          "$ref": "#/definitions/LoginsMap",
          "description": "A set of optional name-value pairs that map provider names to provider tokens. Each name-value pair represents a user from a public provider or developer provider. If the user is from a developer provider, the name-value pair will follow the syntax <code>\"developer_provider_name\": \"developer_user_identifier\"</code>. The developer provider is the \"domain\" by which Cognito will refer to your users; you provided this domain while creating/updating the identity pool. The developer user identifier is an identifier from your backend that uniquely identifies a user. When you create an identity pool, you can specify the supported logins."
        },
        "TokenDuration": {
          "$ref": "#/definitions/TokenDuration",
          "description": "The expiration time of the token, in seconds. You can specify a custom expiration time for the token so that you can cache it. If you don't provide an expiration time, the token is valid for 15 minutes. You can exchange the token with Amazon STS for temporary AWS credentials, which are valid for a maximum of one hour. The maximum token duration you can set is 24 hours. You should take care in setting the expiration time for a token, as there are significant security implications: an attacker could use a leaked token to access your AWS resources for the token's duration."
        }
      },
      "description": "Input to the <code>GetOpenIdTokenForDeveloperIdentity</code> action."
    },
    "GetOpenIdTokenForDeveloperIdentityResponse": {
      "type": "object",
      "properties": {
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        },
        "Token": {
          "$ref": "#/definitions/OIDCToken",
          "description": "An OpenID token."
        }
      },
      "description": "Returned in response to a successful <code>GetOpenIdTokenForDeveloperIdentity</code> request."
    },
    "GetOpenIdTokenInput": {
      "type": "object",
      "required": [
        "IdentityId"
      ],
      "properties": {
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        },
        "Logins": {
          "$ref": "#/definitions/LoginsMap",
          "description": "A set of optional name-value pairs that map provider names to provider tokens. When using graph.facebook.com and www.amazon.com, supply the access_token returned from the provider's authflow. For accounts.google.com or any other OpenId Connect provider, always include the id_token."
        }
      },
      "description": "Input to the GetOpenIdToken action."
    },
    "GetOpenIdTokenResponse": {
      "type": "object",
      "properties": {
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID. Note that the IdentityId returned may not match the one passed on input."
        },
        "Token": {
          "$ref": "#/definitions/OIDCToken",
          "description": "An OpenID token, valid for 15 minutes."
        }
      },
      "description": "Returned in response to a successful GetOpenIdToken request."
    },
    "HideDisabled": {
      "type": "boolean"
    },
    "IdentitiesList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/IdentityDescription"
      }
    },
    "IdentityDescription": {
      "type": "object",
      "properties": {
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        },
        "Logins": {
          "$ref": "#/definitions/LoginsList",
          "description": "A set of optional name-value pairs that map provider names to provider tokens."
        },
        "CreationDate": {
          "$ref": "#/definitions/DateType",
          "description": "Date on which the identity was created."
        },
        "LastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "Date on which the identity was last modified."
        }
      },
      "description": "A description of the identity."
    },
    "IdentityId": {
      "type": "string",
      "pattern": "[\\w-]+:[0-9a-f-]+",
      "minLength": 1,
      "maxLength": 55
    },
    "IdentityIdList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/IdentityId"
      },
      "minItems": 1,
      "maxItems": 60
    },
    "IdentityPool": {
      "type": "object",
      "required": [
        "IdentityPoolId",
        "IdentityPoolName",
        "AllowUnauthenticatedIdentities"
      ],
      "properties": {
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        },
        "IdentityPoolName": {
          "$ref": "#/definitions/IdentityPoolName",
          "description": "A string that you provide."
        },
        "AllowUnauthenticatedIdentities": {
          "$ref": "#/definitions/IdentityPoolUnauthenticated",
          "description": "TRUE if the identity pool supports unauthenticated logins."
        },
        "SupportedLoginProviders": {
          "$ref": "#/definitions/IdentityProviders",
          "description": "Optional key:value pairs mapping provider names to provider app IDs."
        },
        "DeveloperProviderName": {
          "$ref": "#/definitions/DeveloperProviderName",
          "description": "The \"domain\" by which Cognito will refer to your users."
        },
        "OpenIdConnectProviderARNs": {
          "$ref": "#/definitions/OIDCProviderList",
          "description": "A list of OpendID Connect provider ARNs."
        },
        "CognitoIdentityProviders": {
          "$ref": "#/definitions/CognitoIdentityProviderList",
          "description": "A list representing an Amazon Cognito Identity User Pool and its client ID."
        },
        "SamlProviderARNs": {
          "$ref": "#/definitions/SAMLProviderList",
          "description": "An array of Amazon Resource Names (ARNs) of the SAML provider for your identity pool."
        }
      },
      "description": "An object representing a Cognito identity pool."
    },
    "IdentityPoolId": {
      "type": "string",
      "pattern": "[\\w-]+:[0-9a-f-]+",
      "minLength": 1,
      "maxLength": 55
    },
    "IdentityPoolName": {
      "type": "string",
      "pattern": "[\\w ]+",
      "minLength": 1,
      "maxLength": 128
    },
    "IdentityPoolShortDescription": {
      "type": "object",
      "properties": {
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        },
        "IdentityPoolName": {
          "$ref": "#/definitions/IdentityPoolName",
          "description": "A string that you provide."
        }
      },
      "description": "A description of the identity pool."
    },
    "IdentityPoolUnauthenticated": {
      "type": "boolean"
    },
    "IdentityPoolsList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/IdentityPoolShortDescription"
      }
    },
    "IdentityProviderId": {
      "type": "string",
      "pattern": "[\\w.;_/-]+",
      "minLength": 1,
      "maxLength": 128
    },
    "IdentityProviderName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 128
    },
    "IdentityProviderToken": {
      "type": "string",
      "minLength": 1,
      "maxLength": 50000
    },
    "IdentityProviders": {
      "type": "array",
      "maxItems": 10,
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/IdentityProviderName"
          },
          "value": {
            "$ref": "#/definitions/IdentityProviderId"
          }
        }
      }
    },
    "InternalErrorException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "The message returned by an InternalErrorException."
        }
      },
      "description": "Thrown when the service encounters an error during processing the request."
    },
    "InvalidIdentityPoolConfigurationException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "The message returned for an <code>InvalidIdentityPoolConfigurationException</code>"
        }
      },
      "description": "Thrown if the identity pool has no role associated for the given auth type (auth/unauth) or if the AssumeRole fails."
    },
    "InvalidParameterException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "The message returned by an InvalidParameterException."
        }
      },
      "description": "Thrown for missing or bad input parameter(s)."
    },
    "LimitExceededException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "The message returned by a LimitExceededException."
        }
      },
      "description": "Thrown when the total number of user pools has exceeded a preset limit."
    },
    "ListIdentitiesInput": {
      "type": "object",
      "required": [
        "IdentityPoolId",
        "MaxResults"
      ],
      "properties": {
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        },
        "MaxResults": {
          "$ref": "#/definitions/QueryLimit",
          "description": "The maximum number of identities to return."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "A pagination token."
        },
        "HideDisabled": {
          "$ref": "#/definitions/HideDisabled",
          "description": "An optional boolean parameter that allows you to hide disabled identities. If omitted, the ListIdentities API will include disabled identities in the response."
        }
      },
      "description": "Input to the ListIdentities action."
    },
    "ListIdentitiesResponse": {
      "type": "object",
      "properties": {
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        },
        "Identities": {
          "$ref": "#/definitions/IdentitiesList",
          "description": "An object containing a set of identities and associated mappings."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "A pagination token."
        }
      },
      "description": "The response to a ListIdentities request."
    },
    "ListIdentityPoolsInput": {
      "type": "object",
      "required": [
        "MaxResults"
      ],
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/QueryLimit",
          "description": "The maximum number of identities to return."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "A pagination token."
        }
      },
      "description": "Input to the ListIdentityPools action."
    },
    "ListIdentityPoolsResponse": {
      "type": "object",
      "properties": {
        "IdentityPools": {
          "$ref": "#/definitions/IdentityPoolsList",
          "description": "The identity pools returned by the ListIdentityPools action."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "A pagination token."
        }
      },
      "description": "The result of a successful ListIdentityPools action."
    },
    "LoginsList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/IdentityProviderName"
      }
    },
    "LoginsMap": {
      "type": "array",
      "maxItems": 10,
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/IdentityProviderName"
          },
          "value": {
            "$ref": "#/definitions/IdentityProviderToken"
          }
        }
      }
    },
    "LookupDeveloperIdentityInput": {
      "type": "object",
      "required": [
        "IdentityPoolId"
      ],
      "properties": {
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        },
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        },
        "DeveloperUserIdentifier": {
          "$ref": "#/definitions/DeveloperUserIdentifier",
          "description": "A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users."
        },
        "MaxResults": {
          "$ref": "#/definitions/QueryLimit",
          "description": "The maximum number of identities to return."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match."
        }
      },
      "description": "Input to the <code>LookupDeveloperIdentityInput</code> action."
    },
    "LookupDeveloperIdentityResponse": {
      "type": "object",
      "properties": {
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        },
        "DeveloperUserIdentifierList": {
          "$ref": "#/definitions/DeveloperUserIdentifierList",
          "description": "This is the list of developer user identifiers associated with an identity ID. Cognito supports the association of multiple developer user identifiers with an identity ID."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match."
        }
      },
      "description": "Returned in response to a successful <code>LookupDeveloperIdentity</code> action."
    },
    "MergeDeveloperIdentitiesInput": {
      "type": "object",
      "required": [
        "SourceUserIdentifier",
        "DestinationUserIdentifier",
        "DeveloperProviderName",
        "IdentityPoolId"
      ],
      "properties": {
        "SourceUserIdentifier": {
          "$ref": "#/definitions/DeveloperUserIdentifier",
          "description": "User identifier for the source user. The value should be a <code>DeveloperUserIdentifier</code>."
        },
        "DestinationUserIdentifier": {
          "$ref": "#/definitions/DeveloperUserIdentifier",
          "description": "User identifier for the destination user. The value should be a <code>DeveloperUserIdentifier</code>."
        },
        "DeveloperProviderName": {
          "$ref": "#/definitions/DeveloperProviderName",
          "description": "The \"domain\" by which Cognito will refer to your users. This is a (pseudo) domain name that you provide while creating an identity pool. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (.), underscore (_), and dash (-)."
        },
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        }
      },
      "description": "Input to the <code>MergeDeveloperIdentities</code> action."
    },
    "MergeDeveloperIdentitiesResponse": {
      "type": "object",
      "properties": {
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        }
      },
      "description": "Returned in response to a successful <code>MergeDeveloperIdentities</code> action."
    },
    "NotAuthorizedException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "The message returned by a NotAuthorizedException"
        }
      },
      "description": "Thrown when a user is not authorized to access the requested resource."
    },
    "OIDCProviderList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ARNString"
      }
    },
    "OIDCToken": {
      "type": "string"
    },
    "PaginationKey": {
      "type": "string",
      "pattern": "[\\S]+",
      "minLength": 1
    },
    "QueryLimit": {
      "type": "integer",
      "minimum": 1,
      "maximum": 60
    },
    "ResourceConflictException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "The message returned by a ResourceConflictException."
        }
      },
      "description": "Thrown when a user tries to use a login which is already linked to another account."
    },
    "ResourceNotFoundException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "The message returned by a ResourceNotFoundException."
        }
      },
      "description": "Thrown when the requested resource (for example, a dataset or record) does not exist."
    },
    "RoleType": {
      "type": "string",
      "pattern": "(un)?authenticated"
    },
    "RolesMap": {
      "type": "array",
      "maxItems": 2,
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/RoleType"
          },
          "value": {
            "$ref": "#/definitions/ARNString"
          }
        }
      }
    },
    "SAMLProviderList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ARNString"
      }
    },
    "SecretKeyString": {
      "type": "string"
    },
    "SessionTokenString": {
      "type": "string"
    },
    "SetIdentityPoolRolesInput": {
      "type": "object",
      "required": [
        "IdentityPoolId",
        "Roles"
      ],
      "properties": {
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        },
        "Roles": {
          "$ref": "#/definitions/RolesMap",
          "description": "The map of roles associated with this pool. For a given role, the key will be either \"authenticated\" or \"unauthenticated\" and the value will be the Role ARN."
        }
      },
      "description": "Input to the <code>SetIdentityPoolRoles</code> action."
    },
    "String": {
      "type": "string"
    },
    "TokenDuration": {
      "type": "integer",
      "minimum": 1,
      "maximum": 86400
    },
    "TooManyRequestsException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String",
          "description": "Message returned by a TooManyRequestsException"
        }
      },
      "description": "Thrown when a request is throttled."
    },
    "UnlinkDeveloperIdentityInput": {
      "type": "object",
      "required": [
        "IdentityId",
        "IdentityPoolId",
        "DeveloperProviderName",
        "DeveloperUserIdentifier"
      ],
      "properties": {
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        },
        "IdentityPoolId": {
          "$ref": "#/definitions/IdentityPoolId",
          "description": "An identity pool ID in the format REGION:GUID."
        },
        "DeveloperProviderName": {
          "$ref": "#/definitions/DeveloperProviderName",
          "description": "The \"domain\" by which Cognito will refer to your users."
        },
        "DeveloperUserIdentifier": {
          "$ref": "#/definitions/DeveloperUserIdentifier",
          "description": "A unique ID used by your backend authentication process to identify a user."
        }
      },
      "description": "Input to the <code>UnlinkDeveloperIdentity</code> action."
    },
    "UnlinkIdentityInput": {
      "type": "object",
      "required": [
        "IdentityId",
        "Logins",
        "LoginsToRemove"
      ],
      "properties": {
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        },
        "Logins": {
          "$ref": "#/definitions/LoginsMap",
          "description": "A set of optional name-value pairs that map provider names to provider tokens."
        },
        "LoginsToRemove": {
          "$ref": "#/definitions/LoginsList",
          "description": "Provider names to unlink from this identity."
        }
      },
      "description": "Input to the UnlinkIdentity action."
    },
    "UnprocessedIdentityId": {
      "type": "object",
      "properties": {
        "IdentityId": {
          "$ref": "#/definitions/IdentityId",
          "description": "A unique identifier in the format REGION:GUID."
        },
        "ErrorCode": {
          "$ref": "#/definitions/ErrorCode",
          "description": "The error code indicating the type of error that occurred."
        }
      },
      "description": "An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and IdentityId."
    },
    "UnprocessedIdentityIdList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/UnprocessedIdentityId"
      },
      "maxItems": 60
    }
  }
}