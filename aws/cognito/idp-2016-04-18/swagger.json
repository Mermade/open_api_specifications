{
  "swagger": "2.0",
  "info": {
    "version": "2016-04-18",
    "x-release": "v4",
    "title": "Amazon Cognito Identity Provider",
    "description": "<p>You can create a user pool in Amazon Cognito Identity to manage directories and users. You can authenticate a user to obtain tokens related to user identity and access policies.</p> <p>This API reference provides information about user pools in Amazon Cognito Identity.</p> <p>For more information, see <a href=\"https://aws.amazon.com/cognito/\">Amazon Cognito</a>.</p>",
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "contact": {
      "name": "Mike Ralphson",
      "email": "mike.ralphson@gmail.com",
      "url": "https://github.com/mermade/aws2openapi"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    }
  },
  "x-logo": {
    "url": "https://media.amazonwebservices.com/blog/2007/big_pbaws_logo_300px.jpg",
    "backgroundColor": "#FFFFFF"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/cognito-idp/"
  },
  "host": "cognito-idp.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/": {
      "post": {
        "operationId": "VerifyUserAttribute",
        "description": "Verifies the specified user attributes in the user pool.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerifyUserAttributeResponse"
            }
          },
          "400": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "401": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "402": {
            "description": "CodeMismatchException",
            "schema": {
              "$ref": "#/definitions/CodeMismatchException"
            }
          },
          "403": {
            "description": "ExpiredCodeException",
            "schema": {
              "$ref": "#/definitions/ExpiredCodeException"
            }
          },
          "404": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "405": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "406": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "407": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "408": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "409": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "410": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerifyUserAttributeRequest"
            }
          }
        ]
      }
    }
  },
  "definitions": {
    "AddCustomAttributesRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "CustomAttributes"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to add custom attributes."
        },
        "CustomAttributes": {
          "$ref": "#/definitions/CustomAttributesListType",
          "description": "An array of custom attributes, such as Mutable and Name."
        }
      },
      "description": "Represents the request to add custom attributes."
    },
    "AddCustomAttributesResponse": {
      "type": "object",
      "properties": {},
      "description": "Represents the response from the server for the request to add custom attributes."
    },
    "AdminConfirmSignUpRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "Username"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for which you want to confirm user registration."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name for which you want to confirm user registration."
        }
      },
      "description": "Represents the request to confirm user registration."
    },
    "AdminConfirmSignUpResponse": {
      "type": "object",
      "properties": {},
      "description": "Represents the response from the server for the request to confirm registration."
    },
    "AdminDeleteUserAttributesRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "Username",
        "UserAttributeNames"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to delete user attributes."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user from which you would like to delete attributes."
        },
        "UserAttributeNames": {
          "$ref": "#/definitions/AttributeNameListType",
          "description": "An array of strings representing the user attribute names you wish to delete."
        }
      },
      "description": "Represents the request to delete user attributes as an administrator."
    },
    "AdminDeleteUserAttributesResponse": {
      "type": "object",
      "properties": {},
      "description": "Represents the response received from the server for a request to delete user attributes."
    },
    "AdminDeleteUserRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "Username"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to delete the user."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to delete."
        }
      },
      "description": "Represents the request to delete a user as an administrator."
    },
    "AdminDisableUserRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "Username"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to disable the user."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to disable."
        }
      },
      "description": "Represents the request to disable any user as an administrator."
    },
    "AdminDisableUserResponse": {
      "type": "object",
      "properties": {},
      "description": "Represents the response received from the server to disable the user as an administrator."
    },
    "AdminEnableUserRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "Username"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to enable the user."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to ebable."
        }
      },
      "description": "Represents the request that enables the user as an administrator."
    },
    "AdminEnableUserResponse": {
      "type": "object",
      "properties": {},
      "description": "Represents the response from the server for the request to enable a user as an administrator."
    },
    "AdminForgetDeviceRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "Username",
        "DeviceKey"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name."
        },
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        }
      },
      "description": "Sends the forgot device request, as an administrator."
    },
    "AdminGetDeviceRequest": {
      "type": "object",
      "required": [
        "DeviceKey",
        "UserPoolId",
        "Username"
      ],
      "properties": {
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name."
        }
      },
      "description": "Represents the request to get the device, as an administrator."
    },
    "AdminGetDeviceResponse": {
      "type": "object",
      "required": [
        "Device"
      ],
      "properties": {
        "Device": {
          "$ref": "#/definitions/DeviceType",
          "description": "The device."
        }
      },
      "description": "Gets the device response, as an administrator."
    },
    "AdminGetUserRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "Username"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to get information about the user."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to retrieve."
        }
      },
      "description": "Represents the request to get the specified user as an administrator."
    },
    "AdminGetUserResponse": {
      "type": "object",
      "required": [
        "Username"
      ],
      "properties": {
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user about whom you are receiving information."
        },
        "UserAttributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "An array of name-value pairs representing user attributes."
        },
        "UserCreateDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the user was created."
        },
        "UserLastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the user was last modified."
        },
        "Enabled": {
          "$ref": "#/definitions/BooleanType",
          "description": "Indicates that the status is enabled."
        },
        "UserStatus": {
          "$ref": "#/definitions/UserStatusType",
          "description": "<p>The user status. Can be one of the following:</p> <ul> <li>UNCONFIRMED - User has been created but not confirmed.</li> <li>CONFIRMED - User has been confirmed.</li> <li>ARCHIVED - User is no longer active.</li> <li>COMPROMISED - User is disabled due to a potential security threat.</li> <li>UNKNOWN - User status is not known.</li> </ul>"
        },
        "MFAOptions": {
          "$ref": "#/definitions/MFAOptionListType",
          "description": "Specifies the options for MFA (e.g., email or phone number)."
        }
      },
      "description": "Represents the response from the server from the request to get the specified user as an administrator."
    },
    "AdminInitiateAuthRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "ClientId",
        "AuthFlow"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The ID of the Amazon Cognito user pool."
        },
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The client app ID."
        },
        "AuthFlow": {
          "$ref": "#/definitions/AuthFlowType",
          "description": "The authentication flow."
        },
        "AuthParameters": {
          "$ref": "#/definitions/AuthParametersType",
          "description": "The authentication parameters."
        },
        "ClientMetadata": {
          "$ref": "#/definitions/ClientMetadataType",
          "description": "The client app metadata."
        }
      },
      "description": "Initiates the authorization request, as an administrator."
    },
    "AdminInitiateAuthResponse": {
      "type": "object",
      "properties": {
        "ChallengeName": {
          "$ref": "#/definitions/ChallengeNameType",
          "description": "The name of the challenge."
        },
        "Session": {
          "$ref": "#/definitions/SessionType",
          "description": "The session."
        },
        "ChallengeParameters": {
          "$ref": "#/definitions/ChallengeParametersType",
          "description": "The challenge parameters."
        },
        "AuthenticationResult": {
          "$ref": "#/definitions/AuthenticationResultType"
        }
      },
      "description": "Initiates the authentication response, as an administrator."
    },
    "AdminListDevicesRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "Username"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name."
        },
        "Limit": {
          "$ref": "#/definitions/QueryLimitType",
          "description": "The limit of the devices request."
        },
        "PaginationToken": {
          "$ref": "#/definitions/SearchPaginationTokenType",
          "description": "The pagination token."
        }
      },
      "description": "Represents the request to list devices, as an administrator."
    },
    "AdminListDevicesResponse": {
      "type": "object",
      "properties": {
        "Devices": {
          "$ref": "#/definitions/DeviceListType",
          "description": "The devices in the list of devices response."
        },
        "PaginationToken": {
          "$ref": "#/definitions/SearchPaginationTokenType",
          "description": "The pagination token."
        }
      },
      "description": "Lists the device's response, as an administrator."
    },
    "AdminResetUserPasswordRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "Username"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to reset the user's password."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user whose password you wish to reset."
        }
      },
      "description": "Represents the request to reset a user's password as an administrator."
    },
    "AdminResetUserPasswordResponse": {
      "type": "object",
      "properties": {},
      "description": "Represents the response from the server to reset a user password as an administrator."
    },
    "AdminRespondToAuthChallengeRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "ClientId",
        "ChallengeName"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The ID of the Amazon Cognito user pool."
        },
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The client ID."
        },
        "ChallengeName": {
          "$ref": "#/definitions/ChallengeNameType",
          "description": "The name of the challenge."
        },
        "ChallengeResponses": {
          "$ref": "#/definitions/ChallengeResponsesType",
          "description": "The challenge response."
        },
        "Session": {
          "$ref": "#/definitions/SessionType",
          "description": "The session."
        }
      },
      "description": "The request to respond to the authentication challenge, as an administrator."
    },
    "AdminRespondToAuthChallengeResponse": {
      "type": "object",
      "properties": {
        "ChallengeName": {
          "$ref": "#/definitions/ChallengeNameType",
          "description": "The name of the challenge."
        },
        "Session": {
          "$ref": "#/definitions/SessionType",
          "description": "The session."
        },
        "ChallengeParameters": {
          "$ref": "#/definitions/ChallengeParametersType",
          "description": "The challenge parameters."
        },
        "AuthenticationResult": {
          "$ref": "#/definitions/AuthenticationResultType"
        }
      },
      "description": "Responds to the authentication challenge, as an administrator."
    },
    "AdminSetUserSettingsRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "Username",
        "MFAOptions"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to set the user's settings, such as MFA options."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user for whom you wish to set user settings."
        },
        "MFAOptions": {
          "$ref": "#/definitions/MFAOptionListType",
          "description": "Specifies the options for MFA (e.g., email or phone number)."
        }
      },
      "description": "Represents the request to set user settings as an administrator."
    },
    "AdminSetUserSettingsResponse": {
      "type": "object",
      "properties": {},
      "description": "Represents the response from the server to set user settings as an administrator."
    },
    "AdminUpdateDeviceStatusRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "Username",
        "DeviceKey"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID>"
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name."
        },
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        },
        "DeviceRememberedStatus": {
          "$ref": "#/definitions/DeviceRememberedStatusType",
          "description": "The status indicating whether a device has been remembered or not."
        }
      },
      "description": "The request to update the device status, as an administrator."
    },
    "AdminUpdateDeviceStatusResponse": {
      "type": "object",
      "properties": {},
      "description": "The status response from the request to update the device, as an administrator."
    },
    "AdminUpdateUserAttributesRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "Username",
        "UserAttributes"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to update user attributes."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user for whom you want to update user attributes."
        },
        "UserAttributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "An array of name-value pairs representing user attributes."
        }
      },
      "description": "Represents the request to update the user's attributes as an administrator."
    },
    "AdminUpdateUserAttributesResponse": {
      "type": "object",
      "properties": {},
      "description": "Represents the response from the server for the request to update user attributes as an administrator."
    },
    "AdminUserGlobalSignOutRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "Username"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name."
        }
      },
      "description": "The request to sign out of all devices, as an administrator."
    },
    "AdminUserGlobalSignOutResponse": {
      "type": "object",
      "properties": {},
      "description": "The global sign-out response, as an administrator."
    },
    "AliasAttributeType": {
      "type": "string",
      "enum": [
        "phone_number",
        "email",
        "preferred_username"
      ]
    },
    "AliasAttributesListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AliasAttributeType"
      }
    },
    "AliasExistsException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message sent to the user when an alias exists."
        }
      },
      "description": "This exception is thrown when a user tries to confirm the account with an email or phone number that has already been supplied as an alias from a different account. This exception tells user that an account with this email or phone already exists."
    },
    "ArnType": {
      "type": "string",
      "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
      "minLength": 20,
      "maxLength": 2048
    },
    "AttributeDataType": {
      "type": "string",
      "enum": [
        "String",
        "Number",
        "DateTime",
        "Boolean"
      ]
    },
    "AttributeListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AttributeType"
      }
    },
    "AttributeNameListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AttributeNameType"
      }
    },
    "AttributeNameType": {
      "type": "string",
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
      "minLength": 1,
      "maxLength": 32
    },
    "AttributeType": {
      "type": "object",
      "required": [
        "Name"
      ],
      "properties": {
        "Name": {
          "$ref": "#/definitions/AttributeNameType",
          "description": "The name of the attribute."
        },
        "Value": {
          "$ref": "#/definitions/AttributeValueType",
          "description": "The value of the attribute."
        }
      },
      "description": "Specifies whether the attribute is standard or custom."
    },
    "AttributeValueType": {
      "type": "string",
      "maxLength": 2048,
      "format": "password"
    },
    "AuthFlowType": {
      "type": "string",
      "enum": [
        "USER_SRP_AUTH",
        "REFRESH_TOKEN_AUTH",
        "REFRESH_TOKEN",
        "CUSTOM_AUTH",
        "ADMIN_NO_SRP_AUTH"
      ]
    },
    "AuthParametersType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/StringType"
          },
          "value": {
            "$ref": "#/definitions/StringType"
          }
        }
      }
    },
    "AuthenticationResultType": {
      "type": "object",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token of the authentication result."
        },
        "ExpiresIn": {
          "$ref": "#/definitions/IntegerType",
          "description": "The expiration period of the authentication result."
        },
        "TokenType": {
          "$ref": "#/definitions/StringType",
          "description": "The token type of the authentication result."
        },
        "RefreshToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The refresh token of the authentication result."
        },
        "IdToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The ID token of the authentication result."
        },
        "NewDeviceMetadata": {
          "$ref": "#/definitions/NewDeviceMetadataType",
          "description": "The new device metadata from an authentication result."
        }
      },
      "description": "The result type of the authentication result."
    },
    "BooleanType": {
      "type": "boolean"
    },
    "ChallengeNameType": {
      "type": "string",
      "enum": [
        "SMS_MFA",
        "PASSWORD_VERIFIER",
        "CUSTOM_CHALLENGE",
        "DEVICE_SRP_AUTH",
        "DEVICE_PASSWORD_VERIFIER",
        "ADMIN_NO_SRP_AUTH"
      ]
    },
    "ChallengeParametersType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/StringType"
          },
          "value": {
            "$ref": "#/definitions/StringType"
          }
        }
      }
    },
    "ChallengeResponsesType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/StringType"
          },
          "value": {
            "$ref": "#/definitions/StringType"
          }
        }
      }
    },
    "ChangePasswordRequest": {
      "type": "object",
      "required": [
        "PreviousPassword",
        "ProposedPassword"
      ],
      "properties": {
        "PreviousPassword": {
          "$ref": "#/definitions/PasswordType",
          "description": "The old password in the change password request."
        },
        "ProposedPassword": {
          "$ref": "#/definitions/PasswordType",
          "description": "The new password in the change password request."
        },
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token in the change password request."
        }
      },
      "description": "Represents the request to change a user password."
    },
    "ChangePasswordResponse": {
      "type": "object",
      "properties": {},
      "description": "The response from the server to the change password request."
    },
    "ClientIdType": {
      "type": "string",
      "pattern": "[\\w+]+",
      "minLength": 1,
      "maxLength": 128,
      "format": "password"
    },
    "ClientMetadataType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/StringType"
          },
          "value": {
            "$ref": "#/definitions/StringType"
          }
        }
      }
    },
    "ClientNameType": {
      "type": "string",
      "pattern": "[\\w\\s+=,.@-]+",
      "minLength": 1,
      "maxLength": 128
    },
    "ClientPermissionListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ClientPermissionType"
      }
    },
    "ClientPermissionType": {
      "type": "string",
      "minLength": 1,
      "maxLength": 2048
    },
    "ClientSecretType": {
      "type": "string",
      "pattern": "[\\w+]+",
      "minLength": 1,
      "maxLength": 64,
      "format": "password"
    },
    "CodeDeliveryDetailsListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CodeDeliveryDetailsType"
      }
    },
    "CodeDeliveryDetailsType": {
      "type": "object",
      "properties": {
        "Destination": {
          "$ref": "#/definitions/StringType",
          "description": "The destination for the code delivery details."
        },
        "DeliveryMedium": {
          "$ref": "#/definitions/DeliveryMediumType",
          "description": "The delivery medium (email message or phone number)."
        },
        "AttributeName": {
          "$ref": "#/definitions/AttributeNameType",
          "description": "The name of the attribute in the code delivery details type."
        }
      },
      "description": "The type of code delivery details being returned from the server."
    },
    "CodeDeliveryFailureException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message sent when a verification code fails to deliver successfully."
        }
      },
      "description": "This exception is thrown when a verification code fails to deliver successfully."
    },
    "CodeMismatchException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message provided when the code mismatch exception is thrown."
        }
      },
      "description": "This exception is thrown if the provided code does not match what the server was expecting."
    },
    "CompletionMessageType": {
      "type": "string",
      "pattern": "[\\w]+",
      "minLength": 1,
      "maxLength": 128
    },
    "ConcurrentModificationException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message provided when the concurrent exception is thrown."
        }
      },
      "description": "This exception is thrown if two or more modifications are happening concurrently."
    },
    "ConfirmDeviceRequest": {
      "type": "object",
      "required": [
        "AccessToken",
        "DeviceKey"
      ],
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token."
        },
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        },
        "DeviceSecretVerifierConfig": {
          "$ref": "#/definitions/DeviceSecretVerifierConfigType",
          "description": "The configuration of the device secret verifier."
        },
        "DeviceName": {
          "$ref": "#/definitions/DeviceNameType",
          "description": "The device name."
        }
      },
      "description": "Confirms the device request."
    },
    "ConfirmDeviceResponse": {
      "type": "object",
      "properties": {
        "UserConfirmationNecessary": {
          "$ref": "#/definitions/BooleanType",
          "description": "Indicates whether the user confirmation is necessary to confirm the device response."
        }
      },
      "description": "Confirms the device response."
    },
    "ConfirmForgotPasswordRequest": {
      "type": "object",
      "required": [
        "ClientId",
        "Username",
        "ConfirmationCode",
        "Password"
      ],
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "SecretHash": {
          "$ref": "#/definitions/SecretHashType",
          "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user for whom you want to enter a code to retrieve a forgotten password."
        },
        "ConfirmationCode": {
          "$ref": "#/definitions/ConfirmationCodeType",
          "description": "The confirmation code sent by a user's request to retrieve a forgotten password."
        },
        "Password": {
          "$ref": "#/definitions/PasswordType",
          "description": "The password sent by sent by a user's request to retrieve a forgotten password."
        }
      },
      "description": "The request representing the confirmation for a password reset."
    },
    "ConfirmForgotPasswordResponse": {
      "type": "object",
      "properties": {},
      "description": "The response from the server that results from a user's request to retrieve a forgotten password."
    },
    "ConfirmSignUpRequest": {
      "type": "object",
      "required": [
        "ClientId",
        "Username",
        "ConfirmationCode"
      ],
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "SecretHash": {
          "$ref": "#/definitions/SecretHashType",
          "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user whose registration you wish to confirm."
        },
        "ConfirmationCode": {
          "$ref": "#/definitions/ConfirmationCodeType",
          "description": "The confirmation code sent by a user's request to confirm registration."
        },
        "ForceAliasCreation": {
          "$ref": "#/definitions/ForceAliasCreation",
          "description": "Boolean to be specified to force user confirmation irrespective of existing alias. By default set to False. If this parameter is set to True and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to False, the API will throw an <b>AliasExistsException</b> error."
        }
      },
      "description": "Represents the request to confirm registration of a user."
    },
    "ConfirmSignUpResponse": {
      "type": "object",
      "properties": {},
      "description": "Represents the response from the server for the registration confirmation."
    },
    "ConfirmationCodeType": {
      "type": "string",
      "pattern": "[\\S]+",
      "minLength": 1,
      "maxLength": 2048
    },
    "CreateUserImportJobRequest": {
      "type": "object",
      "required": [
        "JobName",
        "UserPoolId",
        "CloudWatchLogsRoleArn"
      ],
      "properties": {
        "JobName": {
          "$ref": "#/definitions/UserImportJobNameType",
          "description": "The job name for the user import job."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are being imported into."
        },
        "CloudWatchLogsRoleArn": {
          "$ref": "#/definitions/ArnType",
          "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job."
        }
      },
      "description": "Represents the request to create the user import job."
    },
    "CreateUserImportJobResponse": {
      "type": "object",
      "properties": {
        "UserImportJob": {
          "$ref": "#/definitions/UserImportJobType",
          "description": "The job object that represents the user import job."
        }
      },
      "description": "Represents the response from the server to the request to create the user import job."
    },
    "CreateUserPoolClientRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "ClientName"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to create a user pool client."
        },
        "ClientName": {
          "$ref": "#/definitions/ClientNameType",
          "description": "The client name for the user pool client you would like to create."
        },
        "GenerateSecret": {
          "$ref": "#/definitions/GenerateSecret",
          "description": " Boolean to specify whether you want to generate a secret for the user pool client being created."
        },
        "RefreshTokenValidity": {
          "$ref": "#/definitions/RefreshTokenValidityType",
          "description": "Refreshes the token validity."
        },
        "ReadAttributes": {
          "$ref": "#/definitions/ClientPermissionListType",
          "description": "The read attributes."
        },
        "WriteAttributes": {
          "$ref": "#/definitions/ClientPermissionListType",
          "description": "The write attributes."
        },
        "ExplicitAuthFlows": {
          "$ref": "#/definitions/ExplicitAuthFlowsListType",
          "description": "The explicit authentication flows."
        }
      },
      "description": "Represents the request to create a user pool client."
    },
    "CreateUserPoolClientResponse": {
      "type": "object",
      "properties": {
        "UserPoolClient": {
          "$ref": "#/definitions/UserPoolClientType",
          "description": "The user pool client that was just created."
        }
      },
      "description": "Represents the response from the server to create a user pool client."
    },
    "CreateUserPoolRequest": {
      "type": "object",
      "required": [
        "PoolName"
      ],
      "properties": {
        "PoolName": {
          "$ref": "#/definitions/UserPoolNameType",
          "description": "A string used to name the user pool."
        },
        "Policies": {
          "$ref": "#/definitions/UserPoolPolicyType",
          "description": "The policies associated with the new user pool."
        },
        "LambdaConfig": {
          "$ref": "#/definitions/LambdaConfigType",
          "description": "The Lambda trigger configuration information for the new user pool."
        },
        "AutoVerifiedAttributes": {
          "$ref": "#/definitions/VerifiedAttributesListType",
          "description": "The attributes to be auto-verified. Possible values: <b>email</b>, <b>phone_number</b>."
        },
        "AliasAttributes": {
          "$ref": "#/definitions/AliasAttributesListType",
          "description": "Attributes supported as an alias for this user pool. Possible values: <b>phone_number</b>, <b>email</b>, or <b>preferred_username</b>."
        },
        "SmsVerificationMessage": {
          "$ref": "#/definitions/SmsVerificationMessageType",
          "description": "A string representing the SMS verification message."
        },
        "EmailVerificationMessage": {
          "$ref": "#/definitions/EmailVerificationMessageType",
          "description": "A string representing the email verification message."
        },
        "EmailVerificationSubject": {
          "$ref": "#/definitions/EmailVerificationSubjectType",
          "description": "A string representing the email verification subject."
        },
        "SmsAuthenticationMessage": {
          "$ref": "#/definitions/SmsVerificationMessageType",
          "description": "A string representing the SMS authentication message."
        },
        "MfaConfiguration": {
          "$ref": "#/definitions/UserPoolMfaType",
          "description": "Specifies MFA configuration details."
        },
        "DeviceConfiguration": {
          "$ref": "#/definitions/DeviceConfigurationType",
          "description": "The device configuration."
        },
        "EmailConfiguration": {
          "$ref": "#/definitions/EmailConfigurationType",
          "description": "The email configuration."
        },
        "SmsConfiguration": {
          "$ref": "#/definitions/SmsConfigurationType",
          "description": "The SMS configuration."
        }
      },
      "description": "Represents the request to create a user pool."
    },
    "CreateUserPoolResponse": {
      "type": "object",
      "properties": {
        "UserPool": {
          "$ref": "#/definitions/UserPoolType",
          "description": "A container for the user pool details."
        }
      },
      "description": "Represents the response from the server for the request to create a user pool."
    },
    "CustomAttributeNameType": {
      "type": "string",
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
      "minLength": 1,
      "maxLength": 20
    },
    "CustomAttributesListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SchemaAttributeType"
      },
      "minItems": 1,
      "maxItems": 25
    },
    "DateType": {
      "type": "string",
      "format": "date-time"
    },
    "DeleteUserAttributesRequest": {
      "type": "object",
      "required": [
        "UserAttributeNames"
      ],
      "properties": {
        "UserAttributeNames": {
          "$ref": "#/definitions/AttributeNameListType",
          "description": "An array of strings representing the user attribute names you wish to delete."
        },
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token used in the request to delete user attributes."
        }
      },
      "description": "Represents the request to delete user attributes."
    },
    "DeleteUserAttributesResponse": {
      "type": "object",
      "properties": {},
      "description": "Represents the response from the server to delete user attributes."
    },
    "DeleteUserPoolClientRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "ClientId"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to delete the client."
        },
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        }
      },
      "description": "Represents the request to delete a user pool client."
    },
    "DeleteUserPoolRequest": {
      "type": "object",
      "required": [
        "UserPoolId"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool you want to delete."
        }
      },
      "description": "Represents the request to delete a user pool."
    },
    "DeleteUserRequest": {
      "type": "object",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token from a request to delete a user."
        }
      },
      "description": "Represents the request to delete a user."
    },
    "DeliveryMediumType": {
      "type": "string",
      "enum": [
        "SMS",
        "EMAIL"
      ]
    },
    "DescribeUserImportJobRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "JobId"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are being imported into."
        },
        "JobId": {
          "$ref": "#/definitions/UserImportJobIdType",
          "description": "The job ID for the user import job."
        }
      },
      "description": "Represents the request to describe the user import job."
    },
    "DescribeUserImportJobResponse": {
      "type": "object",
      "properties": {
        "UserImportJob": {
          "$ref": "#/definitions/UserImportJobType",
          "description": "The job object that represents the user import job."
        }
      },
      "description": "Represents the response from the server to the request to describe the user import job."
    },
    "DescribeUserPoolClientRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "ClientId"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool you want to describe."
        },
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        }
      },
      "description": "Represents the request to describe a user pool client."
    },
    "DescribeUserPoolClientResponse": {
      "type": "object",
      "properties": {
        "UserPoolClient": {
          "$ref": "#/definitions/UserPoolClientType",
          "description": "The user pool client from a server response to describe the user pool client."
        }
      },
      "description": "Represents the response from the server from a request to describe the user pool client."
    },
    "DescribeUserPoolRequest": {
      "type": "object",
      "required": [
        "UserPoolId"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool you want to describe."
        }
      },
      "description": "Represents the request to describe the user pool."
    },
    "DescribeUserPoolResponse": {
      "type": "object",
      "properties": {
        "UserPool": {
          "$ref": "#/definitions/UserPoolType",
          "description": "The container of metadata returned by the server to describe the pool."
        }
      },
      "description": "Represents the response to describe the user pool."
    },
    "DeviceConfigurationType": {
      "type": "object",
      "properties": {
        "ChallengeRequiredOnNewDevice": {
          "$ref": "#/definitions/BooleanType",
          "description": "Indicates whether a challenge is required on a new device. Only applicable to a new device."
        },
        "DeviceOnlyRememberedOnUserPrompt": {
          "$ref": "#/definitions/BooleanType",
          "description": "If true, a device is only remembered on user prompt."
        }
      },
      "description": "The type of configuration for the user pool's device tracking."
    },
    "DeviceKeyType": {
      "type": "string",
      "pattern": "[\\w-]+_[0-9a-f-]+",
      "minLength": 1,
      "maxLength": 55
    },
    "DeviceListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DeviceType"
      }
    },
    "DeviceNameType": {
      "type": "string",
      "minLength": 1,
      "maxLength": 1024
    },
    "DeviceRememberedStatusType": {
      "type": "string",
      "enum": [
        "remembered",
        "not_remembered"
      ]
    },
    "DeviceSecretVerifierConfigType": {
      "type": "object",
      "properties": {
        "PasswordVerifier": {
          "$ref": "#/definitions/StringType",
          "description": "The password verifier."
        },
        "Salt": {
          "$ref": "#/definitions/StringType",
          "description": "The salt."
        }
      },
      "description": "The device verifier against which it will be authenticated."
    },
    "DeviceType": {
      "type": "object",
      "properties": {
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        },
        "DeviceAttributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "The device attributes."
        },
        "DeviceCreateDate": {
          "$ref": "#/definitions/DateType",
          "description": "The creation date of the device."
        },
        "DeviceLastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The last modified date of the device."
        },
        "DeviceLastAuthenticatedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date in which the device was last authenticated."
        }
      },
      "description": "The device type."
    },
    "EmailAddressType": {
      "type": "string",
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+"
    },
    "EmailConfigurationType": {
      "type": "object",
      "properties": {
        "SourceArn": {
          "$ref": "#/definitions/ArnType",
          "description": "The Amazon Resource Name (ARN) of the email source."
        },
        "ReplyToEmailAddress": {
          "$ref": "#/definitions/EmailAddressType",
          "description": "The REPLY-TO email address."
        }
      },
      "description": "The email configuration type."
    },
    "EmailVerificationMessageType": {
      "type": "string",
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
      "minLength": 6,
      "maxLength": 2048
    },
    "EmailVerificationSubjectType": {
      "type": "string",
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
      "minLength": 1,
      "maxLength": 140
    },
    "ExpiredCodeException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the expired code exception is thrown."
        }
      },
      "description": "This exception is thrown if a code has expired."
    },
    "ExplicitAuthFlowsListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExplicitAuthFlowsType"
      }
    },
    "ExplicitAuthFlowsType": {
      "type": "string",
      "enum": [
        "ADMIN_NO_SRP_AUTH",
        "CUSTOM_AUTH_FLOW_ONLY"
      ]
    },
    "ForceAliasCreation": {
      "type": "boolean"
    },
    "ForgetDeviceRequest": {
      "type": "object",
      "required": [
        "DeviceKey"
      ],
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token for the forgotten device request."
        },
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        }
      },
      "description": "Represents the request to forget the device."
    },
    "ForgotPasswordRequest": {
      "type": "object",
      "required": [
        "ClientId",
        "Username"
      ],
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "SecretHash": {
          "$ref": "#/definitions/SecretHashType",
          "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user for whom you want to enter a code to retrieve a forgotten password."
        }
      },
      "description": "Represents the request to reset a user's password."
    },
    "ForgotPasswordResponse": {
      "type": "object",
      "properties": {
        "CodeDeliveryDetails": {
          "$ref": "#/definitions/CodeDeliveryDetailsType"
        }
      },
      "description": "Respresents the response from the server regarding the request to reset a password."
    },
    "GenerateSecret": {
      "type": "boolean"
    },
    "GetCSVHeaderRequest": {
      "type": "object",
      "required": [
        "UserPoolId"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are to be imported into."
        }
      },
      "description": "Represents the request to get the header information for the .csv file for the user import job."
    },
    "GetCSVHeaderResponse": {
      "type": "object",
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are to be imported into."
        },
        "CSVHeader": {
          "$ref": "#/definitions/ListOfStringTypes",
          "description": "The header information for the .csv file for the user import job."
        }
      },
      "description": "Represents the response from the server to the request to get the header information for the .csv file for the user import job."
    },
    "GetDeviceRequest": {
      "type": "object",
      "required": [
        "DeviceKey"
      ],
      "properties": {
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        },
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token."
        }
      },
      "description": "Represents the request to get the device."
    },
    "GetDeviceResponse": {
      "type": "object",
      "required": [
        "Device"
      ],
      "properties": {
        "Device": {
          "$ref": "#/definitions/DeviceType",
          "description": "The device."
        }
      },
      "description": "Gets the device response."
    },
    "GetUserAttributeVerificationCodeRequest": {
      "type": "object",
      "required": [
        "AttributeName"
      ],
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token returned by the server response to get the user attribute verification code."
        },
        "AttributeName": {
          "$ref": "#/definitions/AttributeNameType",
          "description": "The attribute name returned by the server response to get the user attribute verification code."
        }
      },
      "description": "Represents the request to get user attribute verification."
    },
    "GetUserAttributeVerificationCodeResponse": {
      "type": "object",
      "properties": {
        "CodeDeliveryDetails": {
          "$ref": "#/definitions/CodeDeliveryDetailsType",
          "description": "The code delivery details returned by the server response to get the user attribute verification code."
        }
      },
      "description": "The verification code response returned by the server response to get the user attribute verification code."
    },
    "GetUserRequest": {
      "type": "object",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token returned by the server response to get information about the user."
        }
      },
      "description": "Represents the request to get information about the user."
    },
    "GetUserResponse": {
      "type": "object",
      "required": [
        "Username",
        "UserAttributes"
      ],
      "properties": {
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to retrieve from the get user request."
        },
        "UserAttributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "An array of name-value pairs representing user attributes."
        },
        "MFAOptions": {
          "$ref": "#/definitions/MFAOptionListType",
          "description": "Specifies the options for MFA (e.g., email or phone number)."
        }
      },
      "description": "Represents the response from the server from the request to get information about the user."
    },
    "GlobalSignOutRequest": {
      "type": "object",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token."
        }
      },
      "description": "Represents the request to sign out all devices."
    },
    "GlobalSignOutResponse": {
      "type": "object",
      "properties": {},
      "description": "The response to the request to sign out all devices."
    },
    "InitiateAuthRequest": {
      "type": "object",
      "required": [
        "AuthFlow",
        "ClientId"
      ],
      "properties": {
        "AuthFlow": {
          "$ref": "#/definitions/AuthFlowType",
          "description": "The authentication flow."
        },
        "AuthParameters": {
          "$ref": "#/definitions/AuthParametersType",
          "description": "The authentication parameters."
        },
        "ClientMetadata": {
          "$ref": "#/definitions/ClientMetadataType",
          "description": "The client app's metadata."
        },
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The client ID."
        }
      },
      "description": "Initiates the authentication request."
    },
    "InitiateAuthResponse": {
      "type": "object",
      "properties": {
        "ChallengeName": {
          "$ref": "#/definitions/ChallengeNameType",
          "description": "The name of the challenge."
        },
        "Session": {
          "$ref": "#/definitions/SessionType",
          "description": "The session."
        },
        "ChallengeParameters": {
          "$ref": "#/definitions/ChallengeParametersType",
          "description": "The challenge parameters."
        },
        "AuthenticationResult": {
          "$ref": "#/definitions/AuthenticationResultType"
        }
      },
      "description": "Initiates the authentication response."
    },
    "IntegerType": {
      "type": "integer"
    },
    "InternalErrorException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when Amazon Cognito throws an internal error exception."
        }
      },
      "description": "This exception is thrown when Amazon Cognito encounters an internal error."
    },
    "InvalidEmailRoleAccessPolicyException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when you have an unverified email address or the identity policy is not set on an email address that Amazon Cognito can access."
        }
      },
      "description": "This exception is thrown when Amazon Cognito is not allowed to use your email identity. HTTP status code: 400."
    },
    "InvalidLambdaResponseException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service throws an invalid AWS Lambda response exception."
        }
      },
      "description": "This exception is thrown when the Amazon Cognito service encounters an invalid AWS Lambda response."
    },
    "InvalidParameterException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service throws an invalid parameter exception."
        }
      },
      "description": "This exception is thrown when the Amazon Cognito service encounters an invalid parameter."
    },
    "InvalidPasswordException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service throws an invalid user password exception."
        }
      },
      "description": "This exception is thrown when the Amazon Cognito service encounters an invalid password."
    },
    "InvalidSmsRoleAccessPolicyException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message retuned when the invalid SMS role access policy exception is thrown."
        }
      },
      "description": "This exception is returned when the role provided for SMS configuration does not have permission to publish using Amazon SNS."
    },
    "InvalidSmsRoleTrustRelationshipException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the role trust relationship for the SMS message is invalid."
        }
      },
      "description": "This exception is thrown when the trust relationship is invalid for the role provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool."
    },
    "InvalidUserPoolConfigurationException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the user pool configuration is invalid."
        }
      },
      "description": "This exception is thrown when the user pool configuration is invalid."
    },
    "LambdaConfigType": {
      "type": "object",
      "properties": {
        "PreSignUp": {
          "$ref": "#/definitions/ArnType",
          "description": "A pre-registration AWS Lambda trigger."
        },
        "CustomMessage": {
          "$ref": "#/definitions/ArnType",
          "description": "A custom Message AWS Lambda trigger."
        },
        "PostConfirmation": {
          "$ref": "#/definitions/ArnType",
          "description": "A post-confirmation AWS Lambda trigger."
        },
        "PreAuthentication": {
          "$ref": "#/definitions/ArnType",
          "description": "A pre-authentication AWS Lambda trigger."
        },
        "PostAuthentication": {
          "$ref": "#/definitions/ArnType",
          "description": "A post-authentication AWS Lambda trigger."
        },
        "DefineAuthChallenge": {
          "$ref": "#/definitions/ArnType",
          "description": "Defines the authentication challenge."
        },
        "CreateAuthChallenge": {
          "$ref": "#/definitions/ArnType",
          "description": "Creates an authentication challenge."
        },
        "VerifyAuthChallengeResponse": {
          "$ref": "#/definitions/ArnType",
          "description": "Verifies the authentication challenge response."
        }
      },
      "description": "Specifies the type of configuration for AWS Lambda triggers."
    },
    "LimitExceededException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when Amazon Cognito throws a limit exceeded exception."
        }
      },
      "description": "This exception is thrown when a user exceeds the limit for a requested AWS resource."
    },
    "ListDevicesRequest": {
      "type": "object",
      "required": [
        "AccessToken"
      ],
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access tokens for the request to list devices."
        },
        "Limit": {
          "$ref": "#/definitions/QueryLimitType",
          "description": "The limit of the device request."
        },
        "PaginationToken": {
          "$ref": "#/definitions/SearchPaginationTokenType",
          "description": "The pagination token for the list request."
        }
      },
      "description": "Represents the request to list the devices."
    },
    "ListDevicesResponse": {
      "type": "object",
      "properties": {
        "Devices": {
          "$ref": "#/definitions/DeviceListType",
          "description": "The devices returned in the list devices response."
        },
        "PaginationToken": {
          "$ref": "#/definitions/SearchPaginationTokenType",
          "description": "The pagination token for the list device response."
        }
      },
      "description": "Represents the response to list devices."
    },
    "ListOfStringTypes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/StringType"
      }
    },
    "ListUserImportJobsRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "MaxResults"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are being imported into."
        },
        "MaxResults": {
          "$ref": "#/definitions/PoolQueryLimitType",
          "description": "The maximum number of import jobs you want the request to return."
        },
        "PaginationToken": {
          "$ref": "#/definitions/PaginationKeyType",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of import jobs in the list."
        }
      },
      "description": "Represents the request to list the user import jobs."
    },
    "ListUserImportJobsResponse": {
      "type": "object",
      "properties": {
        "UserImportJobs": {
          "$ref": "#/definitions/UserImportJobsListType",
          "description": "The user import jobs."
        },
        "PaginationToken": {
          "$ref": "#/definitions/PaginationKeyType",
          "description": "An identifier that can be used to return the next set of user import jobs in the list."
        }
      },
      "description": "Represents the response from the server to the request to list the user import jobs."
    },
    "ListUserPoolClientsRequest": {
      "type": "object",
      "required": [
        "UserPoolId"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to list user pool clients."
        },
        "MaxResults": {
          "$ref": "#/definitions/QueryLimit",
          "description": "The maximum number of results you want the request to return when listing the user pool clients."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        }
      },
      "description": "Represents the request to list the user pool clients."
    },
    "ListUserPoolClientsResponse": {
      "type": "object",
      "properties": {
        "UserPoolClients": {
          "$ref": "#/definitions/UserPoolClientListType",
          "description": "The user pool clients in the response that lists user pool clients."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        }
      },
      "description": "Represents the response from the server that lists user pool clients."
    },
    "ListUserPoolsRequest": {
      "type": "object",
      "required": [
        "MaxResults"
      ],
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/PaginationKeyType",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        },
        "MaxResults": {
          "$ref": "#/definitions/PoolQueryLimitType",
          "description": "The maximum number of results you want the request to return when listing the user pools."
        }
      },
      "description": "Represents the request to list user pools."
    },
    "ListUserPoolsResponse": {
      "type": "object",
      "properties": {
        "UserPools": {
          "$ref": "#/definitions/UserPoolListType",
          "description": "The user pools from the response to list users."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKeyType",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        }
      },
      "description": "Represents the response to list user pools."
    },
    "ListUsersRequest": {
      "type": "object",
      "required": [
        "UserPoolId"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for which you want to list users."
        },
        "AttributesToGet": {
          "$ref": "#/definitions/SearchedAttributeNamesListType",
          "description": "The attributes to get from the request to list users."
        },
        "Limit": {
          "$ref": "#/definitions/QueryLimitType",
          "description": "The limit of the request to list users."
        },
        "PaginationToken": {
          "$ref": "#/definitions/SearchPaginationTokenType",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        },
        "Filter": {
          "$ref": "#/definitions/UserFilterType",
          "description": "The filter for the list users request."
        }
      },
      "description": "Represents the request to list users."
    },
    "ListUsersResponse": {
      "type": "object",
      "properties": {
        "Users": {
          "$ref": "#/definitions/UsersListType",
          "description": "The users returned in the request to list users."
        },
        "PaginationToken": {
          "$ref": "#/definitions/SearchPaginationTokenType",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        }
      },
      "description": "The response from the request to list users."
    },
    "LongType": {
      "type": "integer"
    },
    "MFAMethodNotFoundException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when Amazon Cognito throws an MFA method not found exception."
        }
      },
      "description": "This exception is thrown when Amazon Cognito cannot find a multi-factor authentication (MFA) method."
    },
    "MFAOptionListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MFAOptionType"
      }
    },
    "MFAOptionType": {
      "type": "object",
      "properties": {
        "DeliveryMedium": {
          "$ref": "#/definitions/DeliveryMediumType",
          "description": "The delivery medium (email message or SMS message) to send the MFA code."
        },
        "AttributeName": {
          "$ref": "#/definitions/AttributeNameType",
          "description": "The attribute name of the MFA option type."
        }
      },
      "description": "Specifies the different settings for multi-factor authentication (MFA)."
    },
    "MessageType": {
      "type": "string"
    },
    "NewDeviceMetadataType": {
      "type": "object",
      "properties": {
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        },
        "DeviceGroupKey": {
          "$ref": "#/definitions/StringType",
          "description": "The device group key."
        }
      },
      "description": "The new device metadata type."
    },
    "NotAuthorizedException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service returns a not authorized exception."
        }
      },
      "description": "This exception gets thrown when a user is not authorized."
    },
    "NumberAttributeConstraintsType": {
      "type": "object",
      "properties": {
        "MinValue": {
          "$ref": "#/definitions/StringType",
          "description": "The minimum value of an attribute that is of the number data type."
        },
        "MaxValue": {
          "$ref": "#/definitions/StringType",
          "description": "The maximum value of an attribute that is of the number data type."
        }
      },
      "description": "The minimum and maximum value of an attribute that is of the number data type."
    },
    "PaginationKey": {
      "type": "string",
      "pattern": "[\\S]+",
      "minLength": 1
    },
    "PaginationKeyType": {
      "type": "string",
      "pattern": "[\\S]+",
      "minLength": 1
    },
    "PasswordPolicyMinLengthType": {
      "type": "integer",
      "minimum": 6,
      "maximum": 99
    },
    "PasswordPolicyType": {
      "type": "object",
      "properties": {
        "MinimumLength": {
          "$ref": "#/definitions/PasswordPolicyMinLengthType",
          "description": "The minimum length of the password policy that you have set. Cannot be less than 6."
        },
        "RequireUppercase": {
          "$ref": "#/definitions/BooleanType",
          "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password."
        },
        "RequireLowercase": {
          "$ref": "#/definitions/BooleanType",
          "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password."
        },
        "RequireNumbers": {
          "$ref": "#/definitions/BooleanType",
          "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password."
        },
        "RequireSymbols": {
          "$ref": "#/definitions/BooleanType",
          "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password."
        }
      },
      "description": "The password policy type."
    },
    "PasswordResetRequiredException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when a password reset is required."
        }
      },
      "description": "This exception is thrown when a password reset is required."
    },
    "PasswordType": {
      "type": "string",
      "pattern": "[\\S]+",
      "minLength": 6,
      "maxLength": 256,
      "format": "password"
    },
    "PoolQueryLimitType": {
      "type": "integer",
      "minimum": 1,
      "maximum": 60
    },
    "PreSignedUrlType": {
      "type": "string",
      "minLength": 0,
      "maxLength": 2048
    },
    "PreconditionNotMetException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when a precondition is not met."
        }
      },
      "description": "This exception is thrown when a precondition is not met."
    },
    "QueryLimit": {
      "type": "integer",
      "minimum": 1,
      "maximum": 60
    },
    "QueryLimitType": {
      "type": "integer",
      "minimum": 0,
      "maximum": 60
    },
    "RefreshTokenValidityType": {
      "type": "integer",
      "minimum": 0,
      "maximum": 3650
    },
    "ResendConfirmationCodeRequest": {
      "type": "object",
      "required": [
        "ClientId",
        "Username"
      ],
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "SecretHash": {
          "$ref": "#/definitions/SecretHashType",
          "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user to whom you wish to resend a confirmation code."
        }
      },
      "description": "Represents the request to resend the confirmation code."
    },
    "ResendConfirmationCodeResponse": {
      "type": "object",
      "properties": {
        "CodeDeliveryDetails": {
          "$ref": "#/definitions/CodeDeliveryDetailsType"
        }
      },
      "description": "The response from the server when the Amazon Cognito service makes the request to resend a confirmation code."
    },
    "ResourceNotFoundException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service returns a resource not found exception."
        }
      },
      "description": "This exception is thrown when the Amazon Cognito service cannot find the requested resource."
    },
    "RespondToAuthChallengeRequest": {
      "type": "object",
      "required": [
        "ClientId",
        "ChallengeName"
      ],
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The client ID."
        },
        "ChallengeName": {
          "$ref": "#/definitions/ChallengeNameType",
          "description": "The name of the challenge."
        },
        "Session": {
          "$ref": "#/definitions/SessionType",
          "description": "The session."
        },
        "ChallengeResponses": {
          "$ref": "#/definitions/ChallengeResponsesType",
          "description": "The responses to the authentication challenge."
        }
      },
      "description": "The request to respond to an authentication challenge."
    },
    "RespondToAuthChallengeResponse": {
      "type": "object",
      "properties": {
        "ChallengeName": {
          "$ref": "#/definitions/ChallengeNameType",
          "description": "The challenge name."
        },
        "Session": {
          "$ref": "#/definitions/SessionType",
          "description": "The session."
        },
        "ChallengeParameters": {
          "$ref": "#/definitions/ChallengeParametersType",
          "description": "The challenge parameters."
        },
        "AuthenticationResult": {
          "$ref": "#/definitions/AuthenticationResultType"
        }
      },
      "description": "The response to respond to the authentication challenge."
    },
    "SchemaAttributeType": {
      "type": "object",
      "properties": {
        "Name": {
          "$ref": "#/definitions/CustomAttributeNameType",
          "description": "A schema attribute of the name type."
        },
        "AttributeDataType": {
          "$ref": "#/definitions/AttributeDataType",
          "description": "The attribute data type."
        },
        "DeveloperOnlyAttribute": {
          "$ref": "#/definitions/BooleanType",
          "description": "Specifies whether the attribute type is developer only."
        },
        "Mutable": {
          "$ref": "#/definitions/BooleanType",
          "description": "Specifies whether the attribute can be changed once it has been created."
        },
        "Required": {
          "$ref": "#/definitions/BooleanType",
          "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail."
        },
        "NumberAttributeConstraints": {
          "$ref": "#/definitions/NumberAttributeConstraintsType",
          "description": "Specifies the constraints for an attribute of the number type."
        },
        "StringAttributeConstraints": {
          "$ref": "#/definitions/StringAttributeConstraintsType",
          "description": "Specifies the constraints for an attribute of the string type."
        }
      },
      "description": "Contains information about the schema attribute."
    },
    "SchemaAttributesListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SchemaAttributeType"
      },
      "minItems": 1,
      "maxItems": 50
    },
    "SearchPaginationTokenType": {
      "type": "string",
      "pattern": "[\\S]+",
      "minLength": 1
    },
    "SearchedAttributeNamesListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AttributeNameType"
      }
    },
    "SecretHashType": {
      "type": "string",
      "pattern": "[\\w+=/]+",
      "minLength": 1,
      "maxLength": 128,
      "format": "password"
    },
    "SessionType": {
      "type": "string",
      "minLength": 20,
      "maxLength": 2048
    },
    "SetUserSettingsRequest": {
      "type": "object",
      "required": [
        "AccessToken",
        "MFAOptions"
      ],
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token for the set user settings request."
        },
        "MFAOptions": {
          "$ref": "#/definitions/MFAOptionListType",
          "description": "Specifies the options for MFA (e.g., email or phone number)."
        }
      },
      "description": "Represents the request to set user settings."
    },
    "SetUserSettingsResponse": {
      "type": "object",
      "properties": {},
      "description": "The response from the server for a set user settings request."
    },
    "SignUpRequest": {
      "type": "object",
      "required": [
        "ClientId",
        "Username",
        "Password"
      ],
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "SecretHash": {
          "$ref": "#/definitions/SecretHashType",
          "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to register."
        },
        "Password": {
          "$ref": "#/definitions/PasswordType",
          "description": "The password of the user you wish to register."
        },
        "UserAttributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "An array of name-value pairs representing user attributes."
        },
        "ValidationData": {
          "$ref": "#/definitions/AttributeListType",
          "description": "The validation data in the request to register a user."
        }
      },
      "description": "Represents the request to register a user."
    },
    "SignUpResponse": {
      "type": "object",
      "properties": {
        "UserConfirmed": {
          "$ref": "#/definitions/BooleanType",
          "description": "A response from the server indicating that a user registration has been confirmed."
        },
        "CodeDeliveryDetails": {
          "$ref": "#/definitions/CodeDeliveryDetailsType"
        }
      },
      "description": "The response from the server for a registration request."
    },
    "SmsConfigurationType": {
      "type": "object",
      "properties": {
        "SnsCallerArn": {
          "$ref": "#/definitions/ArnType",
          "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller."
        },
        "ExternalId": {
          "$ref": "#/definitions/StringType",
          "description": "The external ID."
        }
      },
      "description": "The SMS configuratoin type."
    },
    "SmsVerificationMessageType": {
      "type": "string",
      "pattern": ".*\\{####\\}.*",
      "minLength": 6,
      "maxLength": 140
    },
    "StartUserImportJobRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "JobId"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are being imported into."
        },
        "JobId": {
          "$ref": "#/definitions/UserImportJobIdType",
          "description": "The job ID for the user import job."
        }
      },
      "description": "Represents the request to start the user import job."
    },
    "StartUserImportJobResponse": {
      "type": "object",
      "properties": {
        "UserImportJob": {
          "$ref": "#/definitions/UserImportJobType",
          "description": "The job object that represents the user import job."
        }
      },
      "description": "Represents the response from the server to the request to start the user import job."
    },
    "StatusType": {
      "type": "string",
      "enum": [
        "Enabled",
        "Disabled"
      ]
    },
    "StopUserImportJobRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "JobId"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are being imported into."
        },
        "JobId": {
          "$ref": "#/definitions/UserImportJobIdType",
          "description": "The job ID for the user import job."
        }
      },
      "description": "Represents the request to stop the user import job."
    },
    "StopUserImportJobResponse": {
      "type": "object",
      "properties": {
        "UserImportJob": {
          "$ref": "#/definitions/UserImportJobType",
          "description": "The job object that represents the user import job."
        }
      },
      "description": "Represents the response from the server to the request to stop the user import job."
    },
    "StringAttributeConstraintsType": {
      "type": "object",
      "properties": {
        "MinLength": {
          "$ref": "#/definitions/StringType",
          "description": "The minimum length of an attribute value of the string type."
        },
        "MaxLength": {
          "$ref": "#/definitions/StringType",
          "description": "The maximum length of an attribute value of the string type."
        }
      },
      "description": "The type of constraints associated with an attribute of the string type."
    },
    "StringType": {
      "type": "string"
    },
    "TokenModelType": {
      "type": "string",
      "pattern": "[A-Za-z0-9-_=.]+",
      "format": "password"
    },
    "TooManyFailedAttemptsException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service returns a too many failed attempts exception."
        }
      },
      "description": "This exception gets thrown when the user has made too many failed attempts for a given action (e.g., sign in)."
    },
    "TooManyRequestsException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service returns a too many requests exception."
        }
      },
      "description": "This exception gets thrown when the user has made too many requests for a given operation."
    },
    "UnexpectedLambdaException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service returns an unexpected AWS Lambda exception."
        }
      },
      "description": "This exception gets thrown when the Amazon Cognito service encounters an unexpected exception with the AWS Lambda service."
    },
    "UpdateDeviceStatusRequest": {
      "type": "object",
      "required": [
        "AccessToken",
        "DeviceKey"
      ],
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token."
        },
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        },
        "DeviceRememberedStatus": {
          "$ref": "#/definitions/DeviceRememberedStatusType",
          "description": "The status of whether a device is remembered."
        }
      },
      "description": "Represents the request to update the device status."
    },
    "UpdateDeviceStatusResponse": {
      "type": "object",
      "properties": {},
      "description": "The response to the request to update the device status."
    },
    "UpdateUserAttributesRequest": {
      "type": "object",
      "required": [
        "UserAttributes"
      ],
      "properties": {
        "UserAttributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "An array of name-value pairs representing user attributes."
        },
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token for the request to update user attributes."
        }
      },
      "description": "Represents the request to update user attributes."
    },
    "UpdateUserAttributesResponse": {
      "type": "object",
      "properties": {
        "CodeDeliveryDetailsList": {
          "$ref": "#/definitions/CodeDeliveryDetailsListType",
          "description": "The code delivery details list from the server for the request to update user attributes."
        }
      },
      "description": "Represents the response from the server for the request to update user attributes."
    },
    "UpdateUserPoolClientRequest": {
      "type": "object",
      "required": [
        "UserPoolId",
        "ClientId"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to update the user pool client."
        },
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "ClientName": {
          "$ref": "#/definitions/ClientNameType",
          "description": "The client name from the update user pool client request."
        },
        "RefreshTokenValidity": {
          "$ref": "#/definitions/RefreshTokenValidityType",
          "description": "The validity of the refresh token."
        },
        "ReadAttributes": {
          "$ref": "#/definitions/ClientPermissionListType",
          "description": "The read-only attributes of the user pool."
        },
        "WriteAttributes": {
          "$ref": "#/definitions/ClientPermissionListType",
          "description": "The writeable attributes of the user pool."
        },
        "ExplicitAuthFlows": {
          "$ref": "#/definitions/ExplicitAuthFlowsListType",
          "description": "Explicit authentication flows."
        }
      },
      "description": "Represents the request to update the user pool client."
    },
    "UpdateUserPoolClientResponse": {
      "type": "object",
      "properties": {
        "UserPoolClient": {
          "$ref": "#/definitions/UserPoolClientType",
          "description": "The user pool client value from the response from the server when an update user pool client request is made."
        }
      },
      "description": "Represents the response from the server to the request to update the user pool client."
    },
    "UpdateUserPoolRequest": {
      "type": "object",
      "required": [
        "UserPoolId"
      ],
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool you want to update."
        },
        "Policies": {
          "$ref": "#/definitions/UserPoolPolicyType",
          "description": "A container with the policies you wish to update in a user pool."
        },
        "LambdaConfig": {
          "$ref": "#/definitions/LambdaConfigType",
          "description": "The AWS Lambda configuration information from the request to update the user pool."
        },
        "AutoVerifiedAttributes": {
          "$ref": "#/definitions/VerifiedAttributesListType",
          "description": "The attributes that are automatically verified when the Amazon Cognito service makes a request to update user pools."
        },
        "SmsVerificationMessage": {
          "$ref": "#/definitions/SmsVerificationMessageType",
          "description": "A container with information about the SMS verification message."
        },
        "EmailVerificationMessage": {
          "$ref": "#/definitions/EmailVerificationMessageType",
          "description": "The contents of the email verification message."
        },
        "EmailVerificationSubject": {
          "$ref": "#/definitions/EmailVerificationSubjectType",
          "description": "The subject of the email verfication message"
        },
        "SmsAuthenticationMessage": {
          "$ref": "#/definitions/SmsVerificationMessageType",
          "description": "The contents of the SMS authentication message."
        },
        "MfaConfiguration": {
          "$ref": "#/definitions/UserPoolMfaType",
          "description": "<p>Can be one of the following values:</p> <ul> <li><code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</li> <li><code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</li> <li><code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</li> </ul>"
        },
        "DeviceConfiguration": {
          "$ref": "#/definitions/DeviceConfigurationType",
          "description": "Device configuration."
        },
        "EmailConfiguration": {
          "$ref": "#/definitions/EmailConfigurationType",
          "description": "Email configuration."
        },
        "SmsConfiguration": {
          "$ref": "#/definitions/SmsConfigurationType",
          "description": "SMS configuration."
        }
      },
      "description": "Represents the request to update the user pool."
    },
    "UpdateUserPoolResponse": {
      "type": "object",
      "properties": {},
      "description": "Represents the response from the server when you make a request to update the user pool."
    },
    "UserFilterType": {
      "type": "string",
      "maxLength": 256
    },
    "UserImportInProgressException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the user pool has an import job running."
        }
      },
      "description": "This exception is thrown when you are trying to modify a user pool while a user import job is in progress for that pool."
    },
    "UserImportJobIdType": {
      "type": "string",
      "pattern": "import-[0-9a-zA-Z-]+",
      "minLength": 1,
      "maxLength": 55
    },
    "UserImportJobNameType": {
      "type": "string",
      "pattern": "[\\w\\s+=,.@-]+",
      "minLength": 1,
      "maxLength": 128
    },
    "UserImportJobStatusType": {
      "type": "string",
      "enum": [
        "Created",
        "Pending",
        "InProgress",
        "Stopping",
        "Expired",
        "Stopped",
        "Failed",
        "Succeeded"
      ]
    },
    "UserImportJobType": {
      "type": "object",
      "properties": {
        "JobName": {
          "$ref": "#/definitions/UserImportJobNameType",
          "description": "The job name for the user import job."
        },
        "JobId": {
          "$ref": "#/definitions/UserImportJobIdType",
          "description": "The job ID for the user import job."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are being imported into."
        },
        "PreSignedUrl": {
          "$ref": "#/definitions/PreSignedUrlType",
          "description": "The pre-signed URL to be used to upload the .csv file."
        },
        "CreationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date when the user import job was created."
        },
        "StartDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date when the user import job was started."
        },
        "CompletionDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date when the user imoprt job was completed."
        },
        "Status": {
          "$ref": "#/definitions/UserImportJobStatusType",
          "description": "<p>The status of the user import job. One of the following:</p> <ul> <li>Created - The job was created but not started.</li> <li>Pending - A transition state. You have started the job, but it has not begun importing users yet.</li> <li>InProgress - The job has started, and users are being imported.</li> <li>Stopping - You have stopped the job, but the job has not stopped importing users yet.</li> <li>Stopped - You have stopped the job, and the job has stopped importing users.</li> <li>Succeeded - The job has completed successfully.</li> <li>Failed - The job has stopped due to an error.</li> <li>Expired - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</li> </ul>"
        },
        "CloudWatchLogsRoleArn": {
          "$ref": "#/definitions/ArnType",
          "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide."
        },
        "ImportedUsers": {
          "$ref": "#/definitions/LongType",
          "description": "The number of users that were successfully imported."
        },
        "SkippedUsers": {
          "$ref": "#/definitions/LongType",
          "description": "The number of users that were skipped."
        },
        "FailedUsers": {
          "$ref": "#/definitions/LongType",
          "description": "The number of users that could not be imported."
        },
        "CompletionMessage": {
          "$ref": "#/definitions/CompletionMessageType",
          "description": "The message returned when the user import job is completed."
        }
      },
      "description": "The user import job type."
    },
    "UserImportJobsListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserImportJobType"
      },
      "minItems": 1,
      "maxItems": 50
    },
    "UserLambdaValidationException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service returns a user validation exception with the AWS Lambda service."
        }
      },
      "description": "This exception gets thrown when the Amazon Cognito service encounters a user validation exception with the AWS Lambda service."
    },
    "UserNotConfirmedException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when a user is not confirmed successfully."
        }
      },
      "description": "This exception is thrown when a user is not confirmed successfully."
    },
    "UserNotFoundException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when a user is not found."
        }
      },
      "description": "This exception is thrown when a user is not found."
    },
    "UserPoolClientDescription": {
      "type": "object",
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to describe the user pool client."
        },
        "ClientName": {
          "$ref": "#/definitions/ClientNameType",
          "description": "The client name from the user pool client description."
        }
      },
      "description": "The description of the user poool client."
    },
    "UserPoolClientListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserPoolClientDescription"
      }
    },
    "UserPoolClientType": {
      "type": "object",
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool client."
        },
        "ClientName": {
          "$ref": "#/definitions/ClientNameType",
          "description": "The client name from the user pool request of the client type."
        },
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "ClientSecret": {
          "$ref": "#/definitions/ClientSecretType",
          "description": "The client secret from the user pool request of the client type."
        },
        "LastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The last modified date from the user pool request of the client type."
        },
        "CreationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The creation date from the user pool request of the client type."
        },
        "RefreshTokenValidity": {
          "$ref": "#/definitions/RefreshTokenValidityType",
          "description": "The validity of the refresh token."
        },
        "ReadAttributes": {
          "$ref": "#/definitions/ClientPermissionListType",
          "description": "The Read-only attributes."
        },
        "WriteAttributes": {
          "$ref": "#/definitions/ClientPermissionListType",
          "description": "The writeable attributes."
        },
        "ExplicitAuthFlows": {
          "$ref": "#/definitions/ExplicitAuthFlowsListType",
          "description": "The explicit authentication flows."
        }
      },
      "description": "A user pool of the client type."
    },
    "UserPoolDescriptionType": {
      "type": "object",
      "properties": {
        "Id": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The ID in a user pool description."
        },
        "Name": {
          "$ref": "#/definitions/UserPoolNameType",
          "description": "The name in a user pool description."
        },
        "LambdaConfig": {
          "$ref": "#/definitions/LambdaConfigType",
          "description": "The AWS Lambda configuration information in a user pool description."
        },
        "Status": {
          "$ref": "#/definitions/StatusType",
          "description": "The user pool status in a user pool description."
        },
        "LastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The last modified date in a user pool description."
        },
        "CreationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The creation date in a user pool description."
        }
      },
      "description": "A user pool description."
    },
    "UserPoolIdType": {
      "type": "string",
      "pattern": "[\\w-]+_[0-9a-zA-Z]+",
      "minLength": 1,
      "maxLength": 55
    },
    "UserPoolListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserPoolDescriptionType"
      }
    },
    "UserPoolMfaType": {
      "type": "string",
      "enum": [
        "OFF",
        "ON",
        "OPTIONAL"
      ]
    },
    "UserPoolNameType": {
      "type": "string",
      "pattern": "[\\w\\s+=,.@-]+",
      "minLength": 1,
      "maxLength": 128
    },
    "UserPoolPolicyType": {
      "type": "object",
      "properties": {
        "PasswordPolicy": {
          "$ref": "#/definitions/PasswordPolicyType",
          "description": "A container with information about the user pool password policy."
        }
      },
      "description": "The type of policy in a user pool."
    },
    "UserPoolType": {
      "type": "object",
      "properties": {
        "Id": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The ID of the user pool."
        },
        "Name": {
          "$ref": "#/definitions/UserPoolNameType",
          "description": "The name of the user pool."
        },
        "Policies": {
          "$ref": "#/definitions/UserPoolPolicyType",
          "description": "A container describing the policies associated with a user pool."
        },
        "LambdaConfig": {
          "$ref": "#/definitions/LambdaConfigType",
          "description": "A container describing the AWS Lambda triggers associated with a user pool."
        },
        "Status": {
          "$ref": "#/definitions/StatusType",
          "description": "The status of a user pool."
        },
        "LastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The last modified date of a user pool."
        },
        "CreationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The creation date of a user pool."
        },
        "SchemaAttributes": {
          "$ref": "#/definitions/SchemaAttributesListType",
          "description": "A container with the schema attributes of a user pool."
        },
        "AutoVerifiedAttributes": {
          "$ref": "#/definitions/VerifiedAttributesListType",
          "description": "Specifies the attributes that are auto-verified in a user pool."
        },
        "AliasAttributes": {
          "$ref": "#/definitions/AliasAttributesListType",
          "description": "Specifies the attributes that are aliased in a user pool."
        },
        "SmsVerificationMessage": {
          "$ref": "#/definitions/SmsVerificationMessageType",
          "description": "The contents of the SMS verification message."
        },
        "EmailVerificationMessage": {
          "$ref": "#/definitions/EmailVerificationMessageType",
          "description": "The contents of the email verification message."
        },
        "EmailVerificationSubject": {
          "$ref": "#/definitions/EmailVerificationSubjectType",
          "description": "The subject of the email verification message."
        },
        "SmsAuthenticationMessage": {
          "$ref": "#/definitions/SmsVerificationMessageType",
          "description": "The contents of the SMS authentication message."
        },
        "MfaConfiguration": {
          "$ref": "#/definitions/UserPoolMfaType",
          "description": "<p>Can be one of the following values:</p> <ul> <li><code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</li> <li><code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</li> <li><code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</li> </ul>"
        },
        "DeviceConfiguration": {
          "$ref": "#/definitions/DeviceConfigurationType",
          "description": "The device configuration."
        },
        "EstimatedNumberOfUsers": {
          "$ref": "#/definitions/IntegerType",
          "description": "A number estimating the size of the user pool."
        },
        "EmailConfiguration": {
          "$ref": "#/definitions/EmailConfigurationType",
          "description": "The email configuration."
        },
        "SmsConfiguration": {
          "$ref": "#/definitions/SmsConfigurationType",
          "description": "The SMS configuration."
        },
        "SmsConfigurationFailure": {
          "$ref": "#/definitions/StringType",
          "description": "The reason why the SMS configuration cannot send the message(s) to your users."
        },
        "EmailConfigurationFailure": {
          "$ref": "#/definitions/StringType",
          "description": "The reason why the email configuration cannot send the messages to your users."
        }
      },
      "description": "A container with information about the user pool type."
    },
    "UserStatusType": {
      "type": "string",
      "enum": [
        "UNCONFIRMED",
        "CONFIRMED",
        "ARCHIVED",
        "COMPROMISED",
        "UNKNOWN",
        "RESET_REQUIRED"
      ]
    },
    "UserType": {
      "type": "object",
      "properties": {
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to describe."
        },
        "Attributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "A container with information about the user type attributes."
        },
        "UserCreateDate": {
          "$ref": "#/definitions/DateType",
          "description": "The creation date of the user."
        },
        "UserLastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The last modified date of the user."
        },
        "Enabled": {
          "$ref": "#/definitions/BooleanType",
          "description": "Specifies whether the user is enabled."
        },
        "UserStatus": {
          "$ref": "#/definitions/UserStatusType",
          "description": "<p>The user status. Can be one of the following:</p> <ul> <li>UNCONFIRMED - User has been created but not confirmed.</li> <li>CONFIRMED - User has been confirmed.</li> <li>ARCHIVED - User is no longer active.</li> <li>COMPROMISED - User is disabled due to a potential security threat.</li> <li>UNKNOWN - User status is not known.</li> </ul>"
        }
      },
      "description": "The user type."
    },
    "UsernameExistsException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when Amazon Cognito throws a user name exists exception."
        }
      },
      "description": "This exception is thrown when Amazon Cognito encounters a user name that already exists in the user pool."
    },
    "UsernameType": {
      "type": "string",
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
      "minLength": 1,
      "maxLength": 128,
      "format": "password"
    },
    "UsersListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserType"
      }
    },
    "VerifiedAttributeType": {
      "type": "string",
      "enum": [
        "phone_number",
        "email"
      ]
    },
    "VerifiedAttributesListType": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/VerifiedAttributeType"
      }
    },
    "VerifyUserAttributeRequest": {
      "type": "object",
      "required": [
        "AttributeName",
        "Code"
      ],
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "Represents the access token of the request to verify user attributes."
        },
        "AttributeName": {
          "$ref": "#/definitions/AttributeNameType",
          "description": "The attribute name in the request to verify user attributes."
        },
        "Code": {
          "$ref": "#/definitions/ConfirmationCodeType",
          "description": "The verification code in the request to verify user attributes."
        }
      },
      "description": "Represents the request to verify user attributes."
    },
    "VerifyUserAttributeResponse": {
      "type": "object",
      "properties": {},
      "description": "A container representing the response from the server from the request to verify user attributes."
    }
  }
}