{
  "swagger": "2.0",
  "info": {
    "version": "2015-04-13",
    "x-release": "v4",
    "title": "AWS CodeCommit",
    "description": "<fullname>AWS CodeCommit</fullname> <p>This is the <i>AWS CodeCommit API Reference</i>. This reference provides descriptions of the operations and data types for AWS CodeCommit API.</p> <p>You can use the AWS CodeCommit API to work with the following objects:</p> <ul> <li>Repositories, by calling the following: <ul> <li><a>BatchGetRepositories</a>, which returns information about one or more repositories associated with your AWS account</li> <li><a>CreateRepository</a>, which creates an AWS CodeCommit repository</li> <li><a>DeleteRepository</a>, which deletes an AWS CodeCommit repository</li> <li><a>GetRepository</a>, which returns information about a specified repository</li> <li><a>ListRepositories</a>, which lists all AWS CodeCommit repositories associated with your AWS account</li> <li><a>UpdateRepositoryDescription</a>, which sets or updates the description of the repository</li> <li><a>UpdateRepositoryName</a>, which changes the name of the repository. If you change the name of a repository, no other users of that repository will be able to access it until you send them the new HTTPS or SSH URL to use.</li> </ul></li> <li>Branches, by calling the following: <ul> <li><a>CreateBranch</a>, which creates a new branch in a specified repository</li> <li><a>GetBranch</a>, which returns information about a specified branch</li> <li><a>ListBranches</a>, which lists all branches for a specified repository</li> <li><a>UpdateDefaultBranch</a>, which changes the default branch for a repository</li> </ul></li> <li>Information about committed code in a repository, by calling the following: <ul> <li><a>GetCommit</a>, which returns information about a commit, including commit messages and committer information.</li> </ul></li> <li>Triggers, by calling the following: <ul> <li><a>GetRepositoryTriggers</a>, which returns information about triggers configured for a repository</li> <li><a>PutRepositoryTriggers</a>, which replaces all triggers for a repository and can be used to create or delete triggers</li> <li><a>TestRepositoryTriggers</a>, which tests the functionality of a repository trigger by sending data to the trigger target</li> </ul> </li> </ul> <p>For information about how to use AWS CodeCommit, see the <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">AWS CodeCommit User Guide</a>.</p>",
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "contact": {
      "name": "Mike Ralphson",
      "email": "mike.ralphson@gmail.com",
      "url": "https://github.com/mermade/aws2openapi"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    }
  },
  "x-logo": {
    "url": "https://media.amazonwebservices.com/blog/2007/big_pbaws_logo_300px.jpg",
    "backgroundColor": "#FFFFFF"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/codecommit/"
  },
  "host": "codecommit.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/": {
      "post": {
        "operationId": "UpdateRepositoryName",
        "description": "Renames a repository. The repository name must be unique across the calling AWS account. In addition, repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. The suffix \".git\" is prohibited. For a full description of the limits on repository names, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\">Limits</a> in the AWS CodeCommit User Guide.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          },
          "400": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "401": {
            "description": "RepositoryNameExistsException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameExistsException"
            }
          },
          "402": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "403": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRepositoryNameInput"
            }
          }
        ]
      }
    }
  },
  "definitions": {
    "AccountId": {
      "type": "string"
    },
    "AdditionalData": {
      "type": "string"
    },
    "Arn": {
      "type": "string"
    },
    "BatchGetRepositoriesInput": {
      "type": "object",
      "required": [
        "repositoryNames"
      ],
      "properties": {
        "repositoryNames": {
          "$ref": "#/definitions/RepositoryNameList",
          "description": "The names of the repositories to get information about."
        }
      },
      "description": "Represents the input of a batch get repositories operation."
    },
    "BatchGetRepositoriesOutput": {
      "type": "object",
      "properties": {
        "repositories": {
          "$ref": "#/definitions/RepositoryMetadataList",
          "description": "A list of repositories returned by the batch get repositories operation."
        },
        "repositoriesNotFound": {
          "$ref": "#/definitions/RepositoryNotFoundList",
          "description": "Returns a list of repository names for which information could not be found."
        }
      },
      "description": "Represents the output of a batch get repositories operation."
    },
    "BranchDoesNotExistException": {
      "type": "object",
      "properties": {},
      "description": "The specified branch does not exist."
    },
    "BranchInfo": {
      "type": "object",
      "properties": {
        "branchName": {
          "$ref": "#/definitions/BranchName",
          "description": "The name of the branch."
        },
        "commitId": {
          "$ref": "#/definitions/CommitId",
          "description": "The ID of the last commit made to the branch."
        }
      },
      "description": "Returns information about a branch."
    },
    "BranchName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 100
    },
    "BranchNameExistsException": {
      "type": "object",
      "properties": {},
      "description": "The specified branch name already exists."
    },
    "BranchNameList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/BranchName"
      }
    },
    "BranchNameRequiredException": {
      "type": "object",
      "properties": {},
      "description": "A branch name is required but was not specified."
    },
    "CloneUrlHttp": {
      "type": "string"
    },
    "CloneUrlSsh": {
      "type": "string"
    },
    "Commit": {
      "type": "object",
      "properties": {
        "treeId": {
          "$ref": "#/definitions/ObjectId",
          "description": "Tree information for the specified commit."
        },
        "parents": {
          "$ref": "#/definitions/ParentList",
          "description": "The parent list for the specified commit."
        },
        "message": {
          "$ref": "#/definitions/Message",
          "description": "The message associated with the specified commit."
        },
        "author": {
          "$ref": "#/definitions/UserInfo",
          "description": "Information about the author of the specified commit."
        },
        "committer": {
          "$ref": "#/definitions/UserInfo",
          "description": "Information about the person who committed the specified commit, also known as the committer. For more information about the difference between an author and a committer in Git, see <a href=\"http://git-scm.com/book/ch2-3.html\">Viewing the Commit History</a> in Pro Git by Scott Chacon and Ben Straub."
        },
        "additionalData": {
          "$ref": "#/definitions/AdditionalData",
          "description": "Any additional data associated with the specified commit."
        }
      },
      "description": "Returns information about a specific commit."
    },
    "CommitDoesNotExistException": {
      "type": "object",
      "properties": {},
      "description": "The specified commit does not exist or no commit was specified, and the specified repository has no default branch."
    },
    "CommitId": {
      "type": "string"
    },
    "CommitIdDoesNotExistException": {
      "type": "object",
      "properties": {},
      "description": "The specified commit ID does not exist."
    },
    "CommitIdRequiredException": {
      "type": "object",
      "properties": {},
      "description": "A commit ID was not specified."
    },
    "CreateBranchInput": {
      "type": "object",
      "required": [
        "repositoryName",
        "branchName",
        "commitId"
      ],
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository in which you want to create the new branch."
        },
        "branchName": {
          "$ref": "#/definitions/BranchName",
          "description": "The name of the new branch to create."
        },
        "commitId": {
          "$ref": "#/definitions/CommitId",
          "description": "The ID of the commit to point the new branch to."
        }
      },
      "description": "Represents the input of a create branch operation."
    },
    "CreateRepositoryInput": {
      "type": "object",
      "required": [
        "repositoryName"
      ],
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "<p>The name of the new repository to be created.</p> <note><p>The repository name must be unique across the calling AWS account. In addition, repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. For a full description of the limits on repository names, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\">Limits</a> in the AWS CodeCommit User Guide. The suffix \".git\" is prohibited.</p></note>"
        },
        "repositoryDescription": {
          "$ref": "#/definitions/RepositoryDescription",
          "description": "<p>A comment or description about the new repository.</p> <note><p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p></note>"
        }
      },
      "description": "Represents the input of a create repository operation."
    },
    "CreateRepositoryOutput": {
      "type": "object",
      "properties": {
        "repositoryMetadata": {
          "$ref": "#/definitions/RepositoryMetadata",
          "description": "Information about the newly created repository."
        }
      },
      "description": "Represents the output of a create repository operation."
    },
    "CreationDate": {
      "type": "string",
      "format": "date-time"
    },
    "Date": {
      "type": "string"
    },
    "DeleteRepositoryInput": {
      "type": "object",
      "required": [
        "repositoryName"
      ],
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository to delete."
        }
      },
      "description": "Represents the input of a delete repository operation."
    },
    "DeleteRepositoryOutput": {
      "type": "object",
      "properties": {
        "repositoryId": {
          "$ref": "#/definitions/RepositoryId",
          "description": "The ID of the repository that was deleted."
        }
      },
      "description": "Represents the output of a delete repository operation."
    },
    "Email": {
      "type": "string"
    },
    "EncryptionIntegrityChecksFailedException": {
      "type": "object",
      "properties": {},
      "description": "An encryption integrity check failed."
    },
    "EncryptionKeyAccessDeniedException": {
      "type": "object",
      "properties": {},
      "description": "An encryption key could not be accessed."
    },
    "EncryptionKeyDisabledException": {
      "type": "object",
      "properties": {},
      "description": "The encryption key is disabled."
    },
    "EncryptionKeyNotFoundException": {
      "type": "object",
      "properties": {},
      "description": "No encryption key was found."
    },
    "EncryptionKeyUnavailableException": {
      "type": "object",
      "properties": {},
      "description": "The encryption key is not available."
    },
    "GetBranchInput": {
      "type": "object",
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository that contains the branch for which you want to retrieve information."
        },
        "branchName": {
          "$ref": "#/definitions/BranchName",
          "description": "The name of the branch for which you want to retrieve information."
        }
      },
      "description": "Represents the input of a get branch operation."
    },
    "GetBranchOutput": {
      "type": "object",
      "properties": {
        "branch": {
          "$ref": "#/definitions/BranchInfo",
          "description": "The name of the branch."
        }
      },
      "description": "Represents the output of a get branch operation."
    },
    "GetCommitInput": {
      "type": "object",
      "required": [
        "repositoryName",
        "commitId"
      ],
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository to which the commit was made."
        },
        "commitId": {
          "$ref": "#/definitions/ObjectId",
          "description": "The commit ID."
        }
      },
      "description": "Represents the input of a get commit operation."
    },
    "GetCommitOutput": {
      "type": "object",
      "required": [
        "commit"
      ],
      "properties": {
        "commit": {
          "$ref": "#/definitions/Commit",
          "description": "Information about the specified commit."
        }
      },
      "description": "Represents the output of a get commit operation."
    },
    "GetRepositoryInput": {
      "type": "object",
      "required": [
        "repositoryName"
      ],
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository to get information about."
        }
      },
      "description": "Represents the input of a get repository operation."
    },
    "GetRepositoryOutput": {
      "type": "object",
      "properties": {
        "repositoryMetadata": {
          "$ref": "#/definitions/RepositoryMetadata",
          "description": "Information about the repository."
        }
      },
      "description": "Represents the output of a get repository operation."
    },
    "GetRepositoryTriggersInput": {
      "type": "object",
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository for which the trigger is configured."
        }
      },
      "description": "Represents the input of a get repository triggers operation."
    },
    "GetRepositoryTriggersOutput": {
      "type": "object",
      "properties": {
        "configurationId": {
          "$ref": "#/definitions/RepositoryTriggersConfigurationId",
          "description": "The system-generated unique ID for the trigger."
        },
        "triggers": {
          "$ref": "#/definitions/RepositoryTriggersList",
          "description": "The JSON block of configuration information for each trigger."
        }
      },
      "description": "Represents the output of a get repository triggers operation."
    },
    "InvalidBranchNameException": {
      "type": "object",
      "properties": {},
      "description": "The specified branch name is not valid."
    },
    "InvalidCommitIdException": {
      "type": "object",
      "properties": {},
      "description": "The specified commit ID is not valid."
    },
    "InvalidContinuationTokenException": {
      "type": "object",
      "properties": {},
      "description": "The specified continuation token is not valid."
    },
    "InvalidOrderException": {
      "type": "object",
      "properties": {},
      "description": "The specified sort order is not valid."
    },
    "InvalidRepositoryDescriptionException": {
      "type": "object",
      "properties": {},
      "description": "The specified repository description is not valid."
    },
    "InvalidRepositoryNameException": {
      "type": "object",
      "properties": {},
      "description": "<p>At least one specified repository name is not valid.</p> <note><p>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</p></note>"
    },
    "InvalidRepositoryTriggerBranchNameException": {
      "type": "object",
      "properties": {},
      "description": "One or more branch names specified for the trigger is not valid."
    },
    "InvalidRepositoryTriggerCustomDataException": {
      "type": "object",
      "properties": {},
      "description": "The custom data provided for the trigger is not valid."
    },
    "InvalidRepositoryTriggerDestinationArnException": {
      "type": "object",
      "properties": {},
      "description": "The Amazon Resource Name (ARN) for the trigger is not valid for the specified destination. The most common reason for this error is that the ARN does not meet the requirements for the service type."
    },
    "InvalidRepositoryTriggerEventsException": {
      "type": "object",
      "properties": {},
      "description": "One or more events specified for the trigger is not valid. Check to make sure that all events specified match the requirements for allowed events."
    },
    "InvalidRepositoryTriggerNameException": {
      "type": "object",
      "properties": {},
      "description": "The name of the trigger is not valid."
    },
    "InvalidRepositoryTriggerRegionException": {
      "type": "object",
      "properties": {},
      "description": "The region for the trigger target does not match the region for the repository. Triggers must be created in the same region as the target for the trigger."
    },
    "InvalidSortByException": {
      "type": "object",
      "properties": {},
      "description": "The specified sort by value is not valid."
    },
    "LastModifiedDate": {
      "type": "string",
      "format": "date-time"
    },
    "ListBranchesInput": {
      "type": "object",
      "required": [
        "repositoryName"
      ],
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository that contains the branches."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "An enumeration token that allows the operation to batch the results. "
        }
      },
      "description": "Represents the input of a list branches operation."
    },
    "ListBranchesOutput": {
      "type": "object",
      "properties": {
        "branches": {
          "$ref": "#/definitions/BranchNameList",
          "description": "The list of branch names."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "An enumeration token that returns the batch of the results. "
        }
      },
      "description": "Represents the output of a list branches operation."
    },
    "ListRepositoriesInput": {
      "type": "object",
      "properties": {
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved."
        },
        "sortBy": {
          "$ref": "#/definitions/SortByEnum",
          "description": "The criteria used to sort the results of a list repositories operation."
        },
        "order": {
          "$ref": "#/definitions/OrderEnum",
          "description": "The order in which to sort the results of a list repositories operation."
        }
      },
      "description": "Represents the input of a list repositories operation."
    },
    "ListRepositoriesOutput": {
      "type": "object",
      "properties": {
        "repositories": {
          "$ref": "#/definitions/RepositoryNameIdPairList",
          "description": "Lists the repositories called by the list repositories operation."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved."
        }
      },
      "description": "Represents the output of a list repositories operation."
    },
    "MaximumBranchesExceededException": {
      "type": "object",
      "properties": {},
      "description": "The number of branches for the trigger was exceeded. "
    },
    "MaximumRepositoryNamesExceededException": {
      "type": "object",
      "properties": {},
      "description": "The maximum number of allowed repository names was exceeded. Currently, this number is 25."
    },
    "MaximumRepositoryTriggersExceededException": {
      "type": "object",
      "properties": {},
      "description": "The number of triggers allowed for the repository was exceeded."
    },
    "Message": {
      "type": "string"
    },
    "Name": {
      "type": "string"
    },
    "NextToken": {
      "type": "string"
    },
    "ObjectId": {
      "type": "string"
    },
    "OrderEnum": {
      "type": "string",
      "enum": [
        "ascending",
        "descending"
      ]
    },
    "ParentList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ObjectId"
      }
    },
    "PutRepositoryTriggersInput": {
      "type": "object",
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository where you want to create or update the trigger. "
        },
        "triggers": {
          "$ref": "#/definitions/RepositoryTriggersList",
          "description": "The JSON block of configuration information for each trigger. "
        }
      },
      "description": "Represents the input ofa put repository triggers operation. "
    },
    "PutRepositoryTriggersOutput": {
      "type": "object",
      "properties": {
        "configurationId": {
          "$ref": "#/definitions/RepositoryTriggersConfigurationId",
          "description": "The system-generated unique ID for the create or update operation. "
        }
      },
      "description": "Represents the output of a put repository triggers operation. "
    },
    "RepositoryDescription": {
      "type": "string",
      "maxLength": 1000
    },
    "RepositoryDoesNotExistException": {
      "type": "object",
      "properties": {},
      "description": "The specified repository does not exist."
    },
    "RepositoryId": {
      "type": "string"
    },
    "RepositoryLimitExceededException": {
      "type": "object",
      "properties": {},
      "description": "A repository resource limit was exceeded."
    },
    "RepositoryMetadata": {
      "type": "object",
      "properties": {
        "accountId": {
          "$ref": "#/definitions/AccountId",
          "description": "The ID of the AWS account associated with the repository."
        },
        "repositoryId": {
          "$ref": "#/definitions/RepositoryId",
          "description": "The ID of the repository."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The repository's name."
        },
        "repositoryDescription": {
          "$ref": "#/definitions/RepositoryDescription",
          "description": "A comment or description about the repository."
        },
        "defaultBranch": {
          "$ref": "#/definitions/BranchName",
          "description": "The repository's default branch name."
        },
        "lastModifiedDate": {
          "$ref": "#/definitions/LastModifiedDate",
          "description": "The date and time the repository was last modified, in timestamp format."
        },
        "creationDate": {
          "$ref": "#/definitions/CreationDate",
          "description": "The date and time the repository was created, in timestamp format."
        },
        "cloneUrlHttp": {
          "$ref": "#/definitions/CloneUrlHttp",
          "description": "The URL to use for cloning the repository over HTTPS."
        },
        "cloneUrlSsh": {
          "$ref": "#/definitions/CloneUrlSsh",
          "description": "The URL to use for cloning the repository over SSH."
        },
        "Arn": {
          "$ref": "#/definitions/Arn",
          "description": "The Amazon Resource Name (ARN) of the repository."
        }
      },
      "description": "Information about a repository."
    },
    "RepositoryMetadataList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RepositoryMetadata"
      }
    },
    "RepositoryName": {
      "type": "string",
      "pattern": "[\\\\w\\\\.-]+",
      "minLength": 1,
      "maxLength": 100
    },
    "RepositoryNameExistsException": {
      "type": "object",
      "properties": {},
      "description": "The specified repository name already exists."
    },
    "RepositoryNameIdPair": {
      "type": "object",
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name associated with the repository."
        },
        "repositoryId": {
          "$ref": "#/definitions/RepositoryId",
          "description": "The ID associated with the repository."
        }
      },
      "description": "Information about a repository name and ID."
    },
    "RepositoryNameIdPairList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RepositoryNameIdPair"
      }
    },
    "RepositoryNameList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RepositoryName"
      }
    },
    "RepositoryNameRequiredException": {
      "type": "object",
      "properties": {},
      "description": "A repository name is required but was not specified."
    },
    "RepositoryNamesRequiredException": {
      "type": "object",
      "properties": {},
      "description": "A repository names object is required but was not specified."
    },
    "RepositoryNotFoundList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RepositoryName"
      }
    },
    "RepositoryTrigger": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/RepositoryTriggerName",
          "description": "The name of the trigger."
        },
        "destinationArn": {
          "$ref": "#/definitions/Arn",
          "description": "The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS)."
        },
        "customData": {
          "$ref": "#/definitions/RepositoryTriggerCustomData",
          "description": "Any custom data associated with the trigger that will be included in the information sent to the target of the trigger."
        },
        "branches": {
          "$ref": "#/definitions/BranchNameList",
          "description": "The branches that will be included in the trigger configuration. If no branches are specified, the trigger will apply to all branches."
        },
        "events": {
          "$ref": "#/definitions/RepositoryTriggerEventList",
          "description": "The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS). If no events are specified, the trigger will run for all repository events."
        }
      },
      "description": "Information about a trigger for a repository."
    },
    "RepositoryTriggerBranchNameListRequiredException": {
      "type": "object",
      "properties": {},
      "description": "At least one branch name is required but was not specified in the trigger configuration."
    },
    "RepositoryTriggerCustomData": {
      "type": "string"
    },
    "RepositoryTriggerDestinationArnRequiredException": {
      "type": "object",
      "properties": {},
      "description": "A destination ARN for the target service for the trigger is required but was not specified. "
    },
    "RepositoryTriggerEventEnum": {
      "type": "string",
      "enum": [
        "all",
        "updateReference",
        "createReference",
        "deleteReference"
      ]
    },
    "RepositoryTriggerEventList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RepositoryTriggerEventEnum"
      }
    },
    "RepositoryTriggerEventsListRequiredException": {
      "type": "object",
      "properties": {},
      "description": "At least one event for the trigger is required but was not specified."
    },
    "RepositoryTriggerExecutionFailure": {
      "type": "object",
      "properties": {
        "trigger": {
          "$ref": "#/definitions/RepositoryTriggerName",
          "description": "The name of the trigger that did not run."
        },
        "failureMessage": {
          "$ref": "#/definitions/RepositoryTriggerExecutionFailureMessage",
          "description": "Additional message information about the trigger that did not run."
        }
      },
      "description": "A trigger failed to run."
    },
    "RepositoryTriggerExecutionFailureList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RepositoryTriggerExecutionFailure"
      }
    },
    "RepositoryTriggerExecutionFailureMessage": {
      "type": "string"
    },
    "RepositoryTriggerName": {
      "type": "string"
    },
    "RepositoryTriggerNameList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RepositoryTriggerName"
      }
    },
    "RepositoryTriggerNameRequiredException": {
      "type": "object",
      "properties": {},
      "description": "A name for the trigger is required but was not specified."
    },
    "RepositoryTriggersConfigurationId": {
      "type": "string"
    },
    "RepositoryTriggersList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RepositoryTrigger"
      }
    },
    "RepositoryTriggersListRequiredException": {
      "type": "object",
      "properties": {},
      "description": "The list of triggers for the repository is required but was not specified."
    },
    "SortByEnum": {
      "type": "string",
      "enum": [
        "repositoryName",
        "lastModifiedDate"
      ]
    },
    "TestRepositoryTriggersInput": {
      "type": "object",
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository in which to test the triggers."
        },
        "triggers": {
          "$ref": "#/definitions/RepositoryTriggersList",
          "description": "The list of triggers to test."
        }
      },
      "description": "Represents the input of a test repository triggers operation."
    },
    "TestRepositoryTriggersOutput": {
      "type": "object",
      "properties": {
        "successfulExecutions": {
          "$ref": "#/definitions/RepositoryTriggerNameList",
          "description": "The list of triggers that were successfully tested. This list provides the names of the triggers that were successfully tested, separated by commas."
        },
        "failedExecutions": {
          "$ref": "#/definitions/RepositoryTriggerExecutionFailureList",
          "description": "The list of triggers that were not able to be tested. This list provides the names of the triggers that could not be tested, separated by commas."
        }
      },
      "description": "Represents the output of a test repository triggers operation."
    },
    "UpdateDefaultBranchInput": {
      "type": "object",
      "required": [
        "repositoryName",
        "defaultBranchName"
      ],
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository to set or change the default branch for."
        },
        "defaultBranchName": {
          "$ref": "#/definitions/BranchName",
          "description": "The name of the branch to set as the default."
        }
      },
      "description": "Represents the input of an update default branch operation."
    },
    "UpdateRepositoryDescriptionInput": {
      "type": "object",
      "required": [
        "repositoryName"
      ],
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository to set or change the comment or description for."
        },
        "repositoryDescription": {
          "$ref": "#/definitions/RepositoryDescription",
          "description": "The new comment or description for the specified repository. Repository descriptions are limited to 1,000 characters."
        }
      },
      "description": "Represents the input of an update repository description operation."
    },
    "UpdateRepositoryNameInput": {
      "type": "object",
      "required": [
        "oldName",
        "newName"
      ],
      "properties": {
        "oldName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The existing name of the repository."
        },
        "newName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The new name for the repository."
        }
      },
      "description": "Represents the input of an update repository description operation."
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/Name",
          "description": "The name of the user who made the specified commit."
        },
        "email": {
          "$ref": "#/definitions/Email",
          "description": "The email address associated with the user who made the commit, if any."
        },
        "date": {
          "$ref": "#/definitions/Date",
          "description": "The date when the specified commit was pushed to the repository."
        }
      },
      "description": "Information about the user who made a specified commit."
    }
  }
}