{
  "swagger": "2.0",
  "info": {
    "version": "2015-09-21",
    "x-release": "v4",
    "title": "Amazon EC2 Container Registry",
    "description": "Amazon EC2 Container Registry (Amazon ECR) is a managed AWS Docker registry service. Customers can use the familiar Docker CLI to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry. Amazon ECR supports private Docker repositories with resource-based permissions using AWS IAM so that specific users or Amazon EC2 instances can access repositories and images. Developers can use the Docker CLI to author and manage images.",
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "contact": {
      "name": "Mike Ralphson",
      "email": "mike.ralphson@gmail.com",
      "url": "https://github.com/mermade/aws2openapi"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    }
  },
  "x-logo": {
    "url": "https://media.amazonwebservices.com/blog/2007/big_pbaws_logo_300px.jpg",
    "backgroundColor": "#FFFFFF"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/ecr/"
  },
  "host": "ecr.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/": {
      "post": {
        "operationId": "UploadLayerPart",
        "description": "<p>Uploads an image layer part to Amazon ECR.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers. Use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UploadLayerPartResponse"
            }
          },
          "400": {
            "description": "ServerException",
            "schema": {
              "$ref": "#/definitions/ServerException"
            }
          },
          "401": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "402": {
            "description": "InvalidLayerPartException",
            "schema": {
              "$ref": "#/definitions/InvalidLayerPartException"
            }
          },
          "403": {
            "description": "RepositoryNotFoundException",
            "schema": {
              "$ref": "#/definitions/RepositoryNotFoundException"
            }
          },
          "404": {
            "description": "UploadNotFoundException",
            "schema": {
              "$ref": "#/definitions/UploadNotFoundException"
            }
          },
          "405": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadLayerPartRequest"
            }
          }
        ]
      }
    }
  },
  "definitions": {
    "Arn": {
      "type": "string"
    },
    "AuthorizationData": {
      "type": "object",
      "properties": {
        "authorizationToken": {
          "$ref": "#/definitions/Base64",
          "description": "A base64-encoded string that contains authorization data for the specified Amazon ECR registry. When the string is decoded, it is presented in the format <code>user:password</code> for private registry authentication using <code>docker login</code>."
        },
        "expiresAt": {
          "$ref": "#/definitions/ExpirationTimestamp",
          "description": "The Unix time in seconds and milliseconds when the authorization token expires. Authorization tokens are valid for 12 hours."
        },
        "proxyEndpoint": {
          "$ref": "#/definitions/ProxyEndpoint",
          "description": "The registry URL to use for this authorization token in a <code>docker login</code> command. The Amazon ECR registry URL format is <code>https://aws_account_id.dkr.ecr.region.amazonaws.com</code>. For example, <code>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</code>.. "
        }
      },
      "description": "An object representing authorization data for an Amazon ECR registry."
    },
    "AuthorizationDataList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AuthorizationData"
      }
    },
    "Base64": {
      "type": "string",
      "pattern": "^\\S+$"
    },
    "BatchCheckLayerAvailabilityRequest": {
      "type": "object",
      "required": [
        "repositoryName",
        "layerDigests"
      ],
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that contains the image layers to check. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository that is associated with the image layers to check."
        },
        "layerDigests": {
          "$ref": "#/definitions/BatchedOperationLayerDigestList",
          "description": "The digests of the image layers to check."
        }
      }
    },
    "BatchCheckLayerAvailabilityResponse": {
      "type": "object",
      "properties": {
        "layers": {
          "$ref": "#/definitions/LayerList",
          "description": "A list of image layer objects corresponding to the image layer references in the request."
        },
        "failures": {
          "$ref": "#/definitions/LayerFailureList",
          "description": "Any failures associated with the call."
        }
      }
    },
    "BatchDeleteImageRequest": {
      "type": "object",
      "required": [
        "repositoryName",
        "imageIds"
      ],
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that contains the image to delete. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The repository that contains the image to delete."
        },
        "imageIds": {
          "$ref": "#/definitions/ImageIdentifierList",
          "description": "A list of image ID references that correspond to images to delete. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>."
        }
      },
      "description": "Deletes specified images within a specified repository. Images are specified with either the <code>imageTag</code> or <code>imageDigest</code>."
    },
    "BatchDeleteImageResponse": {
      "type": "object",
      "properties": {
        "imageIds": {
          "$ref": "#/definitions/ImageIdentifierList",
          "description": "The image IDs of the deleted images."
        },
        "failures": {
          "$ref": "#/definitions/ImageFailureList",
          "description": "Any failures associated with the call."
        }
      }
    },
    "BatchGetImageRequest": {
      "type": "object",
      "required": [
        "repositoryName",
        "imageIds"
      ],
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that contains the images to describe. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The repository that contains the images to describe."
        },
        "imageIds": {
          "$ref": "#/definitions/ImageIdentifierList",
          "description": "A list of image ID references that correspond to images to describe. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>."
        }
      }
    },
    "BatchGetImageResponse": {
      "type": "object",
      "properties": {
        "images": {
          "$ref": "#/definitions/ImageList",
          "description": "A list of image objects corresponding to the image references in the request."
        },
        "failures": {
          "$ref": "#/definitions/ImageFailureList",
          "description": "Any failures associated with the call."
        }
      }
    },
    "BatchedOperationLayerDigest": {
      "type": "string",
      "minLength": 0,
      "maxLength": 1000
    },
    "BatchedOperationLayerDigestList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/BatchedOperationLayerDigest"
      },
      "minItems": 1,
      "maxItems": 100
    },
    "CompleteLayerUploadRequest": {
      "type": "object",
      "required": [
        "repositoryName",
        "uploadId",
        "layerDigests"
      ],
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry to which to upload layers. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository to associate with the image layer."
        },
        "uploadId": {
          "$ref": "#/definitions/UploadId",
          "description": "The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with the image layer."
        },
        "layerDigests": {
          "$ref": "#/definitions/LayerDigestList",
          "description": "The <code>sha256</code> digest of the image layer."
        }
      }
    },
    "CompleteLayerUploadResponse": {
      "type": "object",
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The registry ID associated with the request."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The repository name associated with the request."
        },
        "uploadId": {
          "$ref": "#/definitions/UploadId",
          "description": "The upload ID associated with the layer."
        },
        "layerDigest": {
          "$ref": "#/definitions/LayerDigest",
          "description": "The <code>sha256</code> digest of the image layer."
        }
      }
    },
    "CreateRepositoryRequest": {
      "type": "object",
      "required": [
        "repositoryName"
      ],
      "properties": {
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name to use for the repository. The repository name may be specified on its own (such as <code>nginx-web-app</code>) or it can be prepended with a namespace to group the repository into a category (such as <code>project-a/nginx-web-app</code>)."
        }
      }
    },
    "CreateRepositoryResponse": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/Repository"
        }
      }
    },
    "DeleteRepositoryPolicyRequest": {
      "type": "object",
      "required": [
        "repositoryName"
      ],
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that contains the repository policy to delete. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository that is associated with the repository policy to delete."
        }
      }
    },
    "DeleteRepositoryPolicyResponse": {
      "type": "object",
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The registry ID associated with the request."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The repository name associated with the request."
        },
        "policyText": {
          "$ref": "#/definitions/RepositoryPolicyText",
          "description": "The JSON repository policy that was deleted from the repository."
        }
      }
    },
    "DeleteRepositoryRequest": {
      "type": "object",
      "required": [
        "repositoryName"
      ],
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that contains the repository to delete. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository to delete."
        },
        "force": {
          "$ref": "#/definitions/ForceFlag",
          "description": "Force the deletion of the repository if it contains images."
        }
      }
    },
    "DeleteRepositoryResponse": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/Repository"
        }
      }
    },
    "DescribeRepositoriesRequest": {
      "type": "object",
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that contains the repositories to be described. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryNames": {
          "$ref": "#/definitions/RepositoryNameList",
          "description": "A list of repositories to describe. If this parameter is omitted, then all repositories in a registry are described."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "<p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeRepositories</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>"
        },
        "maxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of repository results returned by <code>DescribeRepositories</code> in paginated output. When this parameter is used, <code>DescribeRepositories</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeRepositories</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeRepositories</code> returns up to 100 results and a <code>nextToken</code> value, if applicable."
        }
      }
    },
    "DescribeRepositoriesResponse": {
      "type": "object",
      "properties": {
        "repositories": {
          "$ref": "#/definitions/RepositoryList",
          "description": "A list of repository objects corresponding to valid repositories."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The <code>nextToken</code> value to include in a future <code>DescribeRepositories</code> request. When the results of a <code>DescribeRepositories</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
        }
      }
    },
    "EmptyUploadException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The specified layer upload does not contain any layer parts."
    },
    "ExceptionMessage": {
      "type": "string"
    },
    "ExpirationTimestamp": {
      "type": "string",
      "format": "date-time"
    },
    "ForceFlag": {
      "type": "boolean"
    },
    "GetAuthorizationTokenRegistryIdList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RegistryId"
      },
      "minItems": 1,
      "maxItems": 10
    },
    "GetAuthorizationTokenRequest": {
      "type": "object",
      "properties": {
        "registryIds": {
          "$ref": "#/definitions/GetAuthorizationTokenRegistryIdList",
          "description": "A list of AWS account IDs that are associated with the registries for which to get authorization tokens. If you do not specify a registry, the default registry is assumed."
        }
      }
    },
    "GetAuthorizationTokenResponse": {
      "type": "object",
      "properties": {
        "authorizationData": {
          "$ref": "#/definitions/AuthorizationDataList",
          "description": "A list of authorization token data objects that correspond to the <code>registryIds</code> values in the request."
        }
      }
    },
    "GetDownloadUrlForLayerRequest": {
      "type": "object",
      "required": [
        "repositoryName",
        "layerDigest"
      ],
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that contains the image layer to download. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository that is associated with the image layer to download."
        },
        "layerDigest": {
          "$ref": "#/definitions/LayerDigest",
          "description": "The digest of the image layer to download."
        }
      }
    },
    "GetDownloadUrlForLayerResponse": {
      "type": "object",
      "properties": {
        "downloadUrl": {
          "$ref": "#/definitions/Url",
          "description": "The pre-signed Amazon S3 download URL for the requested layer."
        },
        "layerDigest": {
          "$ref": "#/definitions/LayerDigest",
          "description": "The digest of the image layer to download."
        }
      }
    },
    "GetRepositoryPolicyRequest": {
      "type": "object",
      "required": [
        "repositoryName"
      ],
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository whose policy you want to retrieve."
        }
      }
    },
    "GetRepositoryPolicyResponse": {
      "type": "object",
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The registry ID associated with the request."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The repository name associated with the request."
        },
        "policyText": {
          "$ref": "#/definitions/RepositoryPolicyText",
          "description": "The JSON repository policy text associated with the repository."
        }
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry containing the image."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository associated with the image."
        },
        "imageId": {
          "$ref": "#/definitions/ImageIdentifier",
          "description": "An object containing the image tag and image digest associated with an image."
        },
        "imageManifest": {
          "$ref": "#/definitions/ImageManifest",
          "description": "The image manifest associated with the image."
        }
      },
      "description": "An object representing an Amazon ECR image."
    },
    "ImageAlreadyExistsException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The specified image has already been pushed, and there are no changes to the manifest or image tag since the last push."
    },
    "ImageDigest": {
      "type": "string"
    },
    "ImageFailure": {
      "type": "object",
      "properties": {
        "imageId": {
          "$ref": "#/definitions/ImageIdentifier",
          "description": "The image ID associated with the failure."
        },
        "failureCode": {
          "$ref": "#/definitions/ImageFailureCode",
          "description": "The code associated with the failure."
        },
        "failureReason": {
          "$ref": "#/definitions/ImageFailureReason",
          "description": "The reason for the failure."
        }
      },
      "description": "An object representing an Amazon ECR image failure."
    },
    "ImageFailureCode": {
      "type": "string",
      "enum": [
        "InvalidImageDigest",
        "InvalidImageTag",
        "ImageTagDoesNotMatchDigest",
        "ImageNotFound",
        "MissingDigestAndTag"
      ]
    },
    "ImageFailureList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ImageFailure"
      }
    },
    "ImageFailureReason": {
      "type": "string"
    },
    "ImageIdentifier": {
      "type": "object",
      "properties": {
        "imageDigest": {
          "$ref": "#/definitions/ImageDigest",
          "description": "The <code>sha256</code> digest of the image manifest."
        },
        "imageTag": {
          "$ref": "#/definitions/ImageTag",
          "description": "The tag used for the image."
        }
      },
      "description": "An object with identifying information for an Amazon ECR image."
    },
    "ImageIdentifierList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ImageIdentifier"
      },
      "minItems": 1,
      "maxItems": 100
    },
    "ImageList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Image"
      }
    },
    "ImageManifest": {
      "type": "string"
    },
    "ImageTag": {
      "type": "string"
    },
    "InitiateLayerUploadRequest": {
      "type": "object",
      "required": [
        "repositoryName"
      ],
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that you intend to upload layers to. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository that you intend to upload layers to."
        }
      }
    },
    "InitiateLayerUploadResponse": {
      "type": "object",
      "properties": {
        "uploadId": {
          "$ref": "#/definitions/UploadId",
          "description": "The upload ID for the layer upload. This parameter is passed to further <a>UploadLayerPart</a> and <a>CompleteLayerUpload</a> operations."
        },
        "partSize": {
          "$ref": "#/definitions/PartSize",
          "description": "The size, in bytes, that Amazon ECR expects future layer part uploads to be."
        }
      }
    },
    "InvalidLayerException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The layer digest calculation performed by Amazon ECR upon receipt of the image layer does not match the digest specified."
    },
    "InvalidLayerPartException": {
      "type": "object",
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The registry ID associated with the exception."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The repository name associated with the exception."
        },
        "uploadId": {
          "$ref": "#/definitions/UploadId",
          "description": "The upload ID associated with the exception."
        },
        "lastValidByteReceived": {
          "$ref": "#/definitions/PartSize",
          "description": "The last valid byte received from the layer part upload that is associated with the exception."
        },
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The layer part size is not valid, or the first byte specified is not consecutive to the last byte of a previous layer part upload."
    },
    "InvalidParameterException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The specified parameter is invalid. Review the available parameters for the API request."
    },
    "Layer": {
      "type": "object",
      "properties": {
        "layerDigest": {
          "$ref": "#/definitions/LayerDigest",
          "description": "The <code>sha256</code> digest of the image layer."
        },
        "layerAvailability": {
          "$ref": "#/definitions/LayerAvailability",
          "description": "The availability status of the image layer. Valid values are <code>AVAILABLE</code> and <code>UNAVAILABLE</code>."
        },
        "layerSize": {
          "$ref": "#/definitions/LayerSizeInBytes",
          "description": "The size, in bytes, of the image layer."
        }
      },
      "description": "An object representing an Amazon ECR image layer."
    },
    "LayerAlreadyExistsException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The image layer already exists in the associated repository."
    },
    "LayerAvailability": {
      "type": "string",
      "enum": [
        "AVAILABLE",
        "UNAVAILABLE"
      ]
    },
    "LayerDigest": {
      "type": "string",
      "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+"
    },
    "LayerDigestList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/LayerDigest"
      },
      "minItems": 1,
      "maxItems": 100
    },
    "LayerFailure": {
      "type": "object",
      "properties": {
        "layerDigest": {
          "$ref": "#/definitions/BatchedOperationLayerDigest",
          "description": "The layer digest associated with the failure."
        },
        "failureCode": {
          "$ref": "#/definitions/LayerFailureCode",
          "description": "The failure code associated with the failure."
        },
        "failureReason": {
          "$ref": "#/definitions/LayerFailureReason",
          "description": "The reason for the failure."
        }
      },
      "description": "An object representing an Amazon ECR image layer failure."
    },
    "LayerFailureCode": {
      "type": "string",
      "enum": [
        "InvalidLayerDigest",
        "MissingLayerDigest"
      ]
    },
    "LayerFailureList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/LayerFailure"
      }
    },
    "LayerFailureReason": {
      "type": "string"
    },
    "LayerInaccessibleException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The specified layer is not available because it is not associated with an image. Unassociated image layers may be cleaned up at any time."
    },
    "LayerList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Layer"
      }
    },
    "LayerPartBlob": {
      "type": "string"
    },
    "LayerPartTooSmallException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "Layer parts must be at least 5 MiB in size."
    },
    "LayerSizeInBytes": {
      "type": "integer"
    },
    "LayersNotFoundException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The specified layers could not be found, or the specified layer is not valid for this repository."
    },
    "LimitExceededException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The operation did not succeed because it would have exceeded a service limit for your account. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonECR/latest/userguide/service_limits.html\">Amazon ECR Default Service Limits</a> in the Amazon EC2 Container Registry User Guide."
    },
    "ListImagesFilter": {
      "type": "object",
      "properties": {
        "tagStatus": {
          "$ref": "#/definitions/TagStatus",
          "description": "The tag status with which to filter your <a>ListImages</a> results. You can filter results based on whether they are <code>TAGGED</code> or <code>UNTAGGED</code>."
        }
      },
      "description": "An object representing a filter on a <a>ListImages</a> operation."
    },
    "ListImagesRequest": {
      "type": "object",
      "required": [
        "repositoryName"
      ],
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that contains the repository to list images in. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The repository whose image IDs are to be listed."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "<p>The <code>nextToken</code> value returned from a previous paginated <code>ListImages</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>"
        },
        "maxResults": {
          "$ref": "#/definitions/MaxResults",
          "description": "The maximum number of image results returned by <code>ListImages</code> in paginated output. When this parameter is used, <code>ListImages</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListImages</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>ListImages</code> returns up to 100 results and a <code>nextToken</code> value, if applicable."
        },
        "filter": {
          "$ref": "#/definitions/ListImagesFilter",
          "description": "The filter key and value with which to filter your <code>ListImages</code> results."
        }
      }
    },
    "ListImagesResponse": {
      "type": "object",
      "properties": {
        "imageIds": {
          "$ref": "#/definitions/ImageIdentifierList",
          "description": "The list of image IDs for the requested repository."
        },
        "nextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The <code>nextToken</code> value to include in a future <code>ListImages</code> request. When the results of a <code>ListImages</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
        }
      }
    },
    "MaxResults": {
      "type": "integer",
      "minimum": 1,
      "maximum": 100
    },
    "NextToken": {
      "type": "string"
    },
    "PartSize": {
      "type": "integer",
      "minimum": 0
    },
    "ProxyEndpoint": {
      "type": "string"
    },
    "PutImageRequest": {
      "type": "object",
      "required": [
        "repositoryName",
        "imageManifest"
      ],
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that contains the repository in which to put the image. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository in which to put the image."
        },
        "imageManifest": {
          "$ref": "#/definitions/ImageManifest",
          "description": "The image manifest corresponding to the image to be uploaded."
        }
      }
    },
    "PutImageResponse": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/Image",
          "description": "Details of the image uploaded."
        }
      }
    },
    "RegistryId": {
      "type": "string",
      "pattern": "[0-9]{12}"
    },
    "Repository": {
      "type": "object",
      "properties": {
        "repositoryArn": {
          "$ref": "#/definitions/Arn",
          "description": "The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the <code>arn:aws:ecr</code> namespace, followed by the region of the repository, the AWS account ID of the repository owner, the repository namespace, and then the repository name. For example, <code>arn:aws:ecr:region:012345678910:repository/test</code>."
        },
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that contains the repository."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository."
        },
        "repositoryUri": {
          "$ref": "#/definitions/Url",
          "description": "The URI for the repository. You can use this URI for Docker <code>push</code> and <code>pull</code> operations."
        }
      },
      "description": "An object representing a repository."
    },
    "RepositoryAlreadyExistsException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The specified repository already exists in the specified registry."
    },
    "RepositoryList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Repository"
      }
    },
    "RepositoryName": {
      "type": "string",
      "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
      "minLength": 2,
      "maxLength": 256
    },
    "RepositoryNameList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RepositoryName"
      },
      "minItems": 1,
      "maxItems": 100
    },
    "RepositoryNotEmptyException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The specified repository contains images. To delete a repository that contains images, you must force the deletion with the <code>force</code> parameter."
    },
    "RepositoryNotFoundException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The specified repository could not be found. Check the spelling of the specified repository and ensure that you are performing operations on the correct registry."
    },
    "RepositoryPolicyNotFoundException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The specified repository and registry combination does not have an associated repository policy."
    },
    "RepositoryPolicyText": {
      "type": "string",
      "minLength": 0,
      "maxLength": 10240
    },
    "ServerException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "These errors are usually caused by a server-side issue."
    },
    "SetRepositoryPolicyRequest": {
      "type": "object",
      "required": [
        "repositoryName",
        "policyText"
      ],
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository to receive the policy."
        },
        "policyText": {
          "$ref": "#/definitions/RepositoryPolicyText",
          "description": "The JSON repository policy text to apply to the repository."
        },
        "force": {
          "$ref": "#/definitions/ForceFlag",
          "description": "If the policy you are attempting to set on a repository policy would prevent you from setting another policy in the future, you must force the <a>SetRepositoryPolicy</a> operation. This is intended to prevent accidental repository lock outs."
        }
      }
    },
    "SetRepositoryPolicyResponse": {
      "type": "object",
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The registry ID associated with the request."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The repository name associated with the request."
        },
        "policyText": {
          "$ref": "#/definitions/RepositoryPolicyText",
          "description": "The JSON repository policy text applied to the repository."
        }
      }
    },
    "TagStatus": {
      "type": "string",
      "enum": [
        "TAGGED",
        "UNTAGGED"
      ]
    },
    "UploadId": {
      "type": "string",
      "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
    },
    "UploadLayerPartRequest": {
      "type": "object",
      "required": [
        "repositoryName",
        "uploadId",
        "partFirstByte",
        "partLastByte",
        "layerPartBlob"
      ],
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The AWS account ID associated with the registry that you are uploading layer parts to. If you do not specify a registry, the default registry is assumed."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The name of the repository that you are uploading layer parts to."
        },
        "uploadId": {
          "$ref": "#/definitions/UploadId",
          "description": "The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with the layer part upload."
        },
        "partFirstByte": {
          "$ref": "#/definitions/PartSize",
          "description": "The integer value of the first byte of the layer part."
        },
        "partLastByte": {
          "$ref": "#/definitions/PartSize",
          "description": "The integer value of the last byte of the layer part."
        },
        "layerPartBlob": {
          "$ref": "#/definitions/LayerPartBlob",
          "description": "The base64-encoded layer part payload."
        }
      }
    },
    "UploadLayerPartResponse": {
      "type": "object",
      "properties": {
        "registryId": {
          "$ref": "#/definitions/RegistryId",
          "description": "The registry ID associated with the request."
        },
        "repositoryName": {
          "$ref": "#/definitions/RepositoryName",
          "description": "The repository name associated with the request."
        },
        "uploadId": {
          "$ref": "#/definitions/UploadId",
          "description": "The upload ID associated with the request."
        },
        "lastByteReceived": {
          "$ref": "#/definitions/PartSize",
          "description": "The integer value of the last byte received in the request."
        }
      }
    },
    "UploadNotFoundException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "The error message associated with the exception."
        }
      },
      "description": "The upload could not be found, or the specified upload id is not valid for this repository."
    },
    "Url": {
      "type": "string"
    }
  }
}