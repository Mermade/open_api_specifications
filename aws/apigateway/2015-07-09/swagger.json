{
  "swagger": "2.0",
  "info": {
    "version": "2015-07-09",
    "x-release": "v4",
    "title": "Amazon API Gateway",
    "description": "<fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. Amazon API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>",
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "contact": {
      "name": "Mike Ralphson",
      "email": "mike.ralphson@gmail.com",
      "url": "https://github.com/mermade/aws2openapi"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    }
  },
  "x-logo": {
    "url": "https://media.amazonwebservices.com/blog/2007/big_pbaws_logo_300px.jpg",
    "backgroundColor": "#FFFFFF"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/apigateway/"
  },
  "host": "apigateway.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "hmac": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "paths": {
    "/apikeys": {
      "post": {
        "operationId": "CreateApiKey",
        "description": "<p>Create an <a>ApiKey</a> resource. </p> <div class=\"seeAlso\"><a href=\"http://docs.aws.amazon.com/cli/latest/reference/apigateway/create-api-key.html\">AWS CLI</a></div>",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "404": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "405": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateApiKeyRequest"
            }
          }
        ]
      },
      "get": {
        "operationId": "GetApiKeys",
        "description": "Gets information about the current <a>ApiKeys</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiKeys"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetApiKeysRequest"
            }
          }
        ]
      }
    },
    "/restapis/{restapi_id}/authorizers": {
      "post": {
        "operationId": "CreateAuthorizer",
        "description": "<p>Adds a new <a>Authorizer</a> resource to an existing <a>RestApi</a> resource.</p> <div class=\"seeAlso\"><a href=\"http://docs.aws.amazon.com/cli/latest/reference/apigateway/create-authorizer.html\">AWS CLI</a></div>",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Authorizer"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAuthorizerRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetAuthorizers",
        "description": "<p>Describe an existing <a>Authorizers</a> resource.</p> <div class=\"seeAlso\"><a href=\"http://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizers.html\">AWS CLI</a></div>",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Authorizers"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAuthorizersRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/domainnames/{domain_name}/basepathmappings": {
      "post": {
        "operationId": "CreateBasePathMapping",
        "description": "Creates a new <a>BasePathMapping</a> resource.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BasePathMapping"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBasePathMappingRequest"
            }
          },
          {
            "name": "domain_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetBasePathMappings",
        "description": "Represents a collection of <a>BasePathMapping</a> resources.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BasePathMappings"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBasePathMappingsRequest"
            }
          },
          {
            "name": "domain_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/deployments": {
      "post": {
        "operationId": "CreateDeployment",
        "description": "Creates a <a>Deployment</a> resource, which makes a specified <a>RestApi</a> callable over the internet.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "404": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "405": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "406": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDeploymentRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetDeployments",
        "description": "Gets information about a <a>Deployments</a> collection.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Deployments"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDeploymentsRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/domainnames": {
      "post": {
        "operationId": "CreateDomainName",
        "description": "Creates a new domain name.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DomainName"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "402": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDomainNameRequest"
            }
          }
        ]
      },
      "get": {
        "operationId": "GetDomainNames",
        "description": "Represents a collection of <a>DomainName</a> resources.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DomainNames"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDomainNamesRequest"
            }
          }
        ]
      }
    },
    "/restapis/{restapi_id}/models": {
      "post": {
        "operationId": "CreateModel",
        "description": "Adds a new <a>Model</a> resource to an existing <a>RestApi</a> resource.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "404": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "405": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateModelRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetModels",
        "description": "Describes existing <a>Models</a> defined for a <a>RestApi</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Models"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetModelsRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/resources/{parent_id}": {
      "post": {
        "operationId": "CreateResource",
        "description": "Creates a <a>Resource</a> resource.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "403": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "404": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "405": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateResourceRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "parent_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis": {
      "post": {
        "operationId": "CreateRestApi",
        "description": "Creates a new <a>RestApi</a> resource.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestApi"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRestApiRequest"
            }
          }
        ]
      },
      "get": {
        "operationId": "GetRestApis",
        "description": "Lists the <a>RestApis</a> resources for your collection.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestApis"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetRestApisRequest"
            }
          }
        ]
      }
    },
    "/restapis/{restapi_id}/stages": {
      "post": {
        "operationId": "CreateStage",
        "description": "Creates a new <a>Stage</a> resource that references a pre-existing <a>Deployment</a> for the API. ",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Stage"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "404": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "405": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateStageRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetStages",
        "description": "Gets information about one or more <a>Stage</a> resources.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Stages"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetStagesRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/usageplans": {
      "post": {
        "operationId": "CreateUsagePlan",
        "description": "Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload. ",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsagePlan"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "404": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUsagePlanRequest"
            }
          }
        ]
      },
      "get": {
        "operationId": "GetUsagePlans",
        "description": "Gets all the usage plans of the caller's account.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsagePlans"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetUsagePlansRequest"
            }
          }
        ]
      }
    },
    "/usageplans/{usageplanId}/keys": {
      "post": {
        "operationId": "CreateUsagePlanKey",
        "description": "Creates a usage plan key for adding an existing API key to a usage plan.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsagePlanKey"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "402": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "403": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUsagePlanKeyRequest"
            }
          },
          {
            "name": "usageplanId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetUsagePlanKeys",
        "description": "Gets all the usage plan keys representing the API keys added to a specified usage plan.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsagePlanKeys"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetUsagePlanKeysRequest"
            }
          },
          {
            "name": "usageplanId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/apikeys/{api_Key}": {
      "delete": {
        "operationId": "DeleteApiKey",
        "description": "Deletes the <a>ApiKey</a> resource.",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteApiKeyRequest"
            }
          },
          {
            "name": "api_Key",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetApiKey",
        "description": "Gets information about the current <a>ApiKey</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetApiKeyRequest"
            }
          },
          {
            "name": "api_Key",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateApiKey",
        "description": "Changes information about an <a>ApiKey</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "404": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateApiKeyRequest"
            }
          },
          {
            "name": "api_Key",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/authorizers/{authorizer_id}": {
      "delete": {
        "operationId": "DeleteAuthorizer",
        "description": "<p>Deletes an existing <a>Authorizer</a> resource.</p> <div class=\"seeAlso\"><a href=\"http://docs.aws.amazon.com/cli/latest/reference/apigateway/delete-authorizer.html\">AWS CLI</a></div>",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "404": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteAuthorizerRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "authorizer_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetAuthorizer",
        "description": "<p>Describe an existing <a>Authorizer</a> resource.</p> <div class=\"seeAlso\"><a href=\"http://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizer.html\">AWS CLI</a></div>",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Authorizer"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAuthorizerRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "authorizer_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "post": {
        "operationId": "TestInvokeAuthorizer",
        "description": "<p>Simulate the execution of an <a>Authorizer</a> in your <a>RestApi</a> with headers, parameters, and an incoming request body.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/use-custom-authorizer.html\">Enable custom authorizers</a> </div>",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TestInvokeAuthorizerResponse"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestInvokeAuthorizerRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "authorizer_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateAuthorizer",
        "description": "<p>Updates an existing <a>Authorizer</a> resource.</p> <div class=\"seeAlso\"><a href=\"http://docs.aws.amazon.com/cli/latest/reference/apigateway/update-authorizer.html\">AWS CLI</a></div>",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Authorizer"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAuthorizerRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "authorizer_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/domainnames/{domain_name}/basepathmappings/{base_path}": {
      "delete": {
        "operationId": "DeleteBasePathMapping",
        "description": "Deletes the <a>BasePathMapping</a> resource.",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBasePathMappingRequest"
            }
          },
          {
            "name": "domain_name",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "base_path",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetBasePathMapping",
        "description": "Describe a <a>BasePathMapping</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BasePathMapping"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBasePathMappingRequest"
            }
          },
          {
            "name": "domain_name",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "base_path",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateBasePathMapping",
        "description": "Changes information about the <a>BasePathMapping</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BasePathMapping"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "403": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateBasePathMappingRequest"
            }
          },
          {
            "name": "domain_name",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "base_path",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/clientcertificates/{clientcertificate_id}": {
      "delete": {
        "operationId": "DeleteClientCertificate",
        "description": "Deletes the <a>ClientCertificate</a> resource.",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteClientCertificateRequest"
            }
          },
          {
            "name": "clientcertificate_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetClientCertificate",
        "description": "Gets information about the current <a>ClientCertificate</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClientCertificate"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetClientCertificateRequest"
            }
          },
          {
            "name": "clientcertificate_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateClientCertificate",
        "description": "Changes information about an <a>ClientCertificate</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClientCertificate"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateClientCertificateRequest"
            }
          },
          {
            "name": "clientcertificate_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/deployments/{deployment_id}": {
      "delete": {
        "operationId": "DeleteDeployment",
        "description": "Deletes a <a>Deployment</a> resource. Deleting a deployment will only succeed if there are no <a>Stage</a> resources associated with it.",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDeploymentRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "deployment_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetDeployment",
        "description": "Gets information about a <a>Deployment</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDeploymentRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "deployment_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateDeployment",
        "description": "Changes information about a <a>Deployment</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "404": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDeploymentRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "deployment_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/domainnames/{domain_name}": {
      "delete": {
        "operationId": "DeleteDomainName",
        "description": "Deletes the <a>DomainName</a> resource.",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDomainNameRequest"
            }
          },
          {
            "name": "domain_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetDomainName",
        "description": "Represents a domain name that is contained in a simpler, more intuitive URL that can be called.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DomainName"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDomainNameRequest"
            }
          },
          {
            "name": "domain_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateDomainName",
        "description": "Changes information about the <a>DomainName</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DomainName"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDomainNameRequest"
            }
          },
          {
            "name": "domain_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration": {
      "delete": {
        "operationId": "DeleteIntegration",
        "description": "Represents a delete integration.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteIntegrationRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetIntegration",
        "description": "Represents a get integration.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Integration"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetIntegrationRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "put": {
        "operationId": "PutIntegration",
        "description": "Represents a put integration.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Integration"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "402": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "403": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutIntegrationRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateIntegration",
        "description": "Represents an update integration.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Integration"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "404": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateIntegrationRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}": {
      "delete": {
        "operationId": "DeleteIntegrationResponse",
        "description": "Represents a delete integration response.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "404": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteIntegrationResponseRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "status_code",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetIntegrationResponse",
        "description": "Represents a get integration response.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IntegrationResponse"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetIntegrationResponseRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "status_code",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "put": {
        "operationId": "PutIntegrationResponse",
        "description": "Represents a put integration.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IntegrationResponse"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "403": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "405": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutIntegrationResponseRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "status_code",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateIntegrationResponse",
        "description": "Represents an update integration response.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IntegrationResponse"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "403": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateIntegrationResponseRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "status_code",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}": {
      "delete": {
        "operationId": "DeleteMethod",
        "description": "Deletes an existing <a>Method</a> resource.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteMethodRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetMethod",
        "description": "Describe an existing <a>Method</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Method"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMethodRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "put": {
        "operationId": "PutMethod",
        "description": "Add a method to an existing <a>Resource</a> resource.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Method"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "404": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "405": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutMethodRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "post": {
        "operationId": "TestInvokeMethod",
        "description": "Simulate the execution of a <a>Method</a> in your <a>RestApi</a> with headers, parameters, and an incoming request body.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TestInvokeMethodResponse"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestInvokeMethodRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateMethod",
        "description": "Updates an existing <a>Method</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Method"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMethodRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}": {
      "delete": {
        "operationId": "DeleteMethodResponse",
        "description": "Deletes an existing <a>MethodResponse</a> resource.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "404": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteMethodResponseRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "status_code",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetMethodResponse",
        "description": "Describes a <a>MethodResponse</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MethodResponse"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMethodResponseRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "status_code",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "put": {
        "operationId": "PutMethodResponse",
        "description": "Adds a <a>MethodResponse</a> to an existing <a>Method</a> resource.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MethodResponse"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "403": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "404": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "405": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutMethodResponseRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "status_code",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateMethodResponse",
        "description": "Updates an existing <a>MethodResponse</a> resource.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MethodResponse"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "403": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "404": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "405": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMethodResponseRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "http_method",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "status_code",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/models/{model_name}": {
      "delete": {
        "operationId": "DeleteModel",
        "description": "Deletes a model.",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "404": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteModelRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "model_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetModel",
        "description": "Describes an existing model defined for a <a>RestApi</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetModelRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "model_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateModel",
        "description": "Changes information about a model.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateModelRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "model_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/resources/{resource_id}": {
      "delete": {
        "operationId": "DeleteResource",
        "description": "Deletes a <a>Resource</a> resource.",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteResourceRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetResource",
        "description": "Lists information about a resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetResourceRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateResource",
        "description": "Changes information about a <a>Resource</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "403": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateResourceRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}": {
      "delete": {
        "operationId": "DeleteRestApi",
        "description": "Deletes the specified API.",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRestApiRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetRestApi",
        "description": "Lists the <a>RestApi</a> resource in the collection.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestApi"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetRestApiRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "put": {
        "operationId": "PutRestApi",
        "description": "A feature of the Amazon API Gateway control service for updating an existing API with an input of external API definitions. The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestApi"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "405": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutRestApiRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateRestApi",
        "description": "Changes information about the specified API.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestApi"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "403": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRestApiRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/stages/{stage_name}": {
      "delete": {
        "operationId": "DeleteStage",
        "description": "Deletes a <a>Stage</a> resource.",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteStageRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "stage_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetStage",
        "description": "Gets information about a <a>Stage</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Stage"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetStageRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "stage_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateStage",
        "description": "Changes information about a <a>Stage</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Stage"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "403": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateStageRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "stage_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/usageplans/{usageplanId}": {
      "delete": {
        "operationId": "DeleteUsagePlan",
        "description": "Deletes a usage plan of a given plan Id.",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteUsagePlanRequest"
            }
          },
          {
            "name": "usageplanId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "GetUsagePlan",
        "description": "Gets a usage plan of a given plan identifier.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsagePlan"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetUsagePlanRequest"
            }
          },
          {
            "name": "usageplanId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "patch": {
        "operationId": "UpdateUsagePlan",
        "description": "Updates a usage plan of a given plan Id.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsagePlan"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "404": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUsagePlanRequest"
            }
          },
          {
            "name": "usageplanId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/usageplans/{usageplanId}/keys/{keyId}": {
      "delete": {
        "operationId": "DeleteUsagePlanKey",
        "description": "Deletes a usage plan key and remove the underlying API key from the associated usage plan.",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "402": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "403": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "404": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteUsagePlanKeyRequest"
            }
          },
          {
            "name": "usageplanId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "keyId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "keyId",
            "in": "query",
            "type": "string"
          }
        ]
      },
      "get": {
        "operationId": "GetUsagePlanKey",
        "description": "Gets a usage plan key of a given key identifier.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsagePlanKey"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetUsagePlanKeyRequest"
            }
          },
          {
            "name": "usageplanId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "keyId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "keyId",
            "in": "query",
            "type": "string"
          }
        ]
      }
    },
    "/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers": {
      "delete": {
        "operationId": "FlushStageAuthorizersCache",
        "description": "Flushes all authorizer cache entries on a stage.",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FlushStageAuthorizersCacheRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "stage_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/stages/{stage_name}/cache/data": {
      "delete": {
        "operationId": "FlushStageCache",
        "description": "Flushes a stage's cache.",
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FlushStageCacheRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "stage_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/clientcertificates": {
      "post": {
        "operationId": "GenerateClientCertificate",
        "description": "Generates a <a>ClientCertificate</a> resource.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClientCertificate"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "402": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GenerateClientCertificateRequest"
            }
          }
        ]
      },
      "get": {
        "operationId": "GetClientCertificates",
        "description": "Gets a collection of <a>ClientCertificate</a> resources.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClientCertificates"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetClientCertificatesRequest"
            }
          }
        ]
      }
    },
    "/account": {
      "get": {
        "operationId": "GetAccount",
        "description": "Gets information about the current <a>Account</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAccountRequest"
            }
          }
        ]
      },
      "patch": {
        "operationId": "UpdateAccount",
        "description": "Changes information about the current <a>Account</a> resource.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccountRequest"
            }
          }
        ]
      }
    },
    "/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}": {
      "get": {
        "operationId": "GetExport",
        "description": "Exports a deployed version of a <a>RestApi</a> in a specified format.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExportResponse"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetExportRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "stage_name",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "export_type",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/models/{model_name}/default_template": {
      "get": {
        "operationId": "GetModelTemplate",
        "description": "Generates a sample mapping template that can be used to transform a payload into the structure of a model.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetModelTemplateRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "model_name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/resources": {
      "get": {
        "operationId": "GetResources",
        "description": "Lists information about a collection of <a>Resource</a> resources.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Resources"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetResourcesRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}": {
      "get": {
        "operationId": "GetSdk",
        "description": "Generates a client SDK for a <a>RestApi</a> and <a>Stage</a>.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SdkResponse"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSdkRequest"
            }
          },
          {
            "name": "restapi_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "stage_name",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "sdk_type",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/usageplans/{usageplanId}/usage": {
      "get": {
        "operationId": "GetUsage",
        "description": "Gets the usage data of a usage plan in a specified time interval.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Usage"
            }
          },
          "400": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "401": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "402": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetUsageRequest"
            }
          },
          {
            "name": "usageplanId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      }
    },
    "/apikeys?mode=import": {
      "post": {
        "operationId": "ImportApiKeys",
        "description": "Import API keys from an external source, such as a CSV-formatted file.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiKeyIds"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "402": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "403": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "404": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "405": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportApiKeysRequest"
            }
          }
        ]
      }
    },
    "/restapis?mode=import": {
      "post": {
        "operationId": "ImportRestApi",
        "description": "A feature of the Amazon API Gateway control service for creating a new API from an external API definition file.",
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestApi"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "404": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportRestApiRequest"
            }
          }
        ]
      }
    },
    "/usageplans/{usageplanId}/keys/{keyId}/usage": {
      "patch": {
        "operationId": "UpdateUsage",
        "description": "Grants a temporary extension to the reamining quota of a usage plan associated with a specified API key.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Usage"
            }
          },
          "400": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "401": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "402": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "403": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUsageRequest"
            }
          },
          {
            "name": "usageplanId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "keyId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "keyId",
            "in": "query",
            "type": "string"
          }
        ]
      }
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "properties": {
        "cloudwatchRoleArn": {
          "$ref": "#/definitions/String",
          "description": "The ARN of an Amazon CloudWatch role for the current <a>Account</a>. "
        },
        "throttleSettings": {
          "$ref": "#/definitions/ThrottleSettings",
          "description": "Specifies the API request limits configured for the current <a>Account</a>."
        },
        "features": {
          "$ref": "#/definitions/ListOfString",
          "description": "A list of features supported for the account. When usage plans are enabled, the features list will include an entry of <code>\"UsagePlans\"</code>."
        },
        "apiKeyVersion": {
          "$ref": "#/definitions/String",
          "description": "The version of the API keys used for the account."
        }
      },
      "description": "<p>Represents an AWS account that is associated with Amazon API Gateway.</p> <div class=\"remarks\"> <p>To view the account info, call <code>GET</code> on this resource.</p> <h4>Error Codes</h4> <p>The following exception may be thrown when the request fails.</p> <ul> <li>UnauthorizedException</li> <li>NotFoundException</li> <li>TooManyRequestsException</li> </ul> <p>For detailed error code information, including the corresponding HTTP Status Codes, see <a href=\"http://docs.aws.amazon.com/apigateway/api-reference/handling-errors/#api-error-codes\">API Gateway Error Codes</a></p> <h4>Example: Get the information about an account.</h4> <h5>Request</h5> <pre><code>GET /account HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160531T184618Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} </code></pre> <h5>Response</h5> <p>The successful response returns a <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ \"_links\": { \"curies\": { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/account-apigateway-{rel}.html\", \"name\": \"account\", \"templated\": true }, \"self\": { \"href\": \"/account\" }, \"account:update\": { \"href\": \"/account\" } }, \"cloudwatchRoleArn\": \"arn:aws:iam::123456789012:role/apigAwsProxyRole\", \"throttleSettings\": { \"rateLimit\": 500, \"burstLimit\": 1000 } } </code></pre> <p>In addition to making the REST API call directly, you can use the AWS CLI and an AWS SDK to access this resource.</p> </div> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-limits.html\">API Gateway Limits</a> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html\">Developer Guide</a>, <a href=\"http://docs.aws.amazon.com/cli/latest/reference/apigateway/get-account.html\">AWS CLI</a> </div>"
    },
    "ApiKey": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/String",
          "description": "The identifier of the API Key."
        },
        "value": {
          "$ref": "#/definitions/String",
          "description": "The value of the API Key."
        },
        "name": {
          "$ref": "#/definitions/String",
          "description": "The name of the API Key."
        },
        "description": {
          "$ref": "#/definitions/String",
          "description": "The description of the API Key."
        },
        "enabled": {
          "$ref": "#/definitions/Boolean",
          "description": "Specifies whether the API Key can be used by callers."
        },
        "createdDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The date when the API Key was created, in <a href=\"http://www.iso.org/iso/home/standards/iso8601.htm\" target=\"_blank\">ISO 8601 format</a>."
        },
        "lastUpdatedDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "When the API Key was last updated, in ISO 8601 format."
        },
        "stageKeys": {
          "$ref": "#/definitions/ListOfString",
          "description": "A list of <a>Stage</a> resources that are associated with the <a>ApiKey</a> resource."
        }
      },
      "description": "<p>A resource that can be distributed to callers for executing <a>Method</a> resources that require an API key. API keys can be mapped to any <a>Stage</a> on any <a>RestApi</a>, which indicates that the callers with the API key can make requests to that stage.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-api-keys.html\">Use API Keys</a> </div>"
    },
    "ApiKeyIds": {
      "type": "object",
      "properties": {
        "ids": {
          "$ref": "#/definitions/ListOfString",
          "description": "A list of all the <a>ApiKey</a> identifiers."
        },
        "warnings": {
          "$ref": "#/definitions/ListOfString",
          "description": "A list of warning messages."
        }
      },
      "description": "The identifier of an API key used to reference an API key in a usage plan."
    },
    "ApiKeys": {
      "type": "object",
      "properties": {
        "warnings": {
          "$ref": "#/definitions/ListOfString",
          "description": "A list of warning messages logged during the import of API keys when the <code>failOnWarnings</code> option is set to true."
        },
        "position": {
          "$ref": "#/definitions/String"
        },
        "items": {
          "$ref": "#/definitions/ListOfApiKey",
          "description": "The current page of any <a>ApiKey</a> resources in the collection of <a>ApiKey</a> resources."
        }
      },
      "description": "<p>Represents a collection of API keys as represented by an <a>ApiKeys</a> resource.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-api-keys.html\">Use API Keys</a> </div>"
    },
    "ApiKeysFormat": {
      "type": "string",
      "enum": [
        "csv"
      ]
    },
    "ApiStage": {
      "type": "object",
      "properties": {
        "apiId": {
          "$ref": "#/definitions/String",
          "description": "API Id of the associated API stage in a usage plan."
        },
        "stage": {
          "$ref": "#/definitions/String",
          "description": "API stage name of the associated API stage in a usage plan."
        }
      },
      "description": "API stage name of the associated API stage in a usage plan."
    },
    "Authorizer": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/String",
          "description": "The identifier for the authorizer resource."
        },
        "name": {
          "$ref": "#/definitions/String",
          "description": "[Required] The name of the authorizer."
        },
        "type": {
          "$ref": "#/definitions/AuthorizerType",
          "description": "[Required] The type of the authorizer. Currently, the only valid type is TOKEN."
        },
        "providerARNs": {
          "$ref": "#/definitions/ListOfARNs",
          "description": "A list of the provider ARNs of the authorizer."
        },
        "authType": {
          "$ref": "#/definitions/String",
          "description": "Optional customer-defined field, used in Swagger imports/exports. Has no functional impact."
        },
        "authorizerUri": {
          "$ref": "#/definitions/String",
          "description": "[Required] Specifies the authorizer's Uniform Resource Identifier (URI). For TOKEN authorizers, this must be a well-formed Lambda function URI. The URI should be of the form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>. <code>Region</code> is used to determine the right endpoint. In this case, <code>path</code> is used to indicate that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations"
        },
        "authorizerCredentials": {
          "$ref": "#/definitions/String",
          "description": "Specifies the credentials required for the authorizer, if any. Two options are available. To specify an IAM role for Amazon API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null."
        },
        "identitySource": {
          "$ref": "#/definitions/String",
          "description": "[Required] The source of the identity in an incoming request. For TOKEN authorizers, this value is a mapping expression with the same syntax as integration parameter mappings. The only valid source for tokens is 'header', so the expression should match 'method.request.header.[headerName]'. The value of the header '[headerName]' will be interpreted as the incoming token."
        },
        "identityValidationExpression": {
          "$ref": "#/definitions/String",
          "description": "A validation expression for the incoming identity. For TOKEN authorizers, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response."
        },
        "authorizerResultTtlInSeconds": {
          "$ref": "#/definitions/NullableInteger",
          "description": "The TTL in seconds of cached authorizer results. If greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour."
        }
      },
      "description": "<p>Represents an authorization layer for methods. If enabled on a method, API Gateway will activate the authorizer when a client calls the method.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/use-custom-authorizer.html\">Enable custom authorization</a> </div>"
    },
    "AuthorizerType": {
      "type": "string",
      "enum": [
        "TOKEN",
        "COGNITO_USER_POOLS"
      ],
      "description": "The authorizer type. the only current value is TOKEN."
    },
    "Authorizers": {
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/String"
        },
        "items": {
          "$ref": "#/definitions/ListOfAuthorizer",
          "description": "Gets the current list of <a>Authorizer</a> resources in the collection."
        }
      },
      "description": "<p>Represents a collection of <a>Authorizer</a> resources.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/use-custom-authorizer.html\">Enable custom authorization</a> </div>"
    },
    "BadRequestException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String"
        }
      }
    },
    "BasePathMapping": {
      "type": "object",
      "properties": {
        "basePath": {
          "$ref": "#/definitions/String",
          "description": "The base path name that callers of the API must provide as part of the URL after the domain name."
        },
        "restApiId": {
          "$ref": "#/definitions/String",
          "description": "The name of the API."
        },
        "stage": {
          "$ref": "#/definitions/String",
          "description": "The name of the API's stage."
        }
      },
      "description": "<p>Represents the base path that callers of the API must provide as part of the URL after the domain name.</p> <div class=\"remarks\">A custom domain name plus a <code>BasePathMapping</code> specification identifies a deployed <a>RestApi</a> in a given stage of the owner <a>Account</a>.</div> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html\">Use Custom Domain Names</a> </div>"
    },
    "BasePathMappings": {
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/String"
        },
        "items": {
          "$ref": "#/definitions/ListOfBasePathMapping",
          "description": "The current page of any <a>BasePathMapping</a> resources in the collection of base path mapping resources."
        }
      },
      "description": "<p>Represents a collection of <a>BasePathMapping</a> resources.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html\">Use Custom Domain Names</a> </div>"
    },
    "Blob": {
      "type": "string"
    },
    "Boolean": {
      "type": "boolean"
    },
    "CacheClusterSize": {
      "type": "string",
      "enum": [
        "0.5",
        "1.6",
        "6.1",
        "13.5",
        "28.4",
        "58.2",
        "118",
        "237"
      ],
      "description": "Returns the size of the <b>CacheCluster</b>."
    },
    "CacheClusterStatus": {
      "type": "string",
      "enum": [
        "CREATE_IN_PROGRESS",
        "AVAILABLE",
        "DELETE_IN_PROGRESS",
        "NOT_AVAILABLE",
        "FLUSH_IN_PROGRESS"
      ],
      "description": "Returns the status of the <b>CacheCluster</b>."
    },
    "ClientCertificate": {
      "type": "object",
      "properties": {
        "clientCertificateId": {
          "$ref": "#/definitions/String",
          "description": "The identifier of the client certificate."
        },
        "description": {
          "$ref": "#/definitions/String",
          "description": "The description of the client certificate."
        },
        "pemEncodedCertificate": {
          "$ref": "#/definitions/String",
          "description": "The PEM-encoded public key of the client certificate, which can be used to configure certificate authentication in the integration endpoint ."
        },
        "createdDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The date when the client certificate was created, in <a href=\"http://www.iso.org/iso/home/standards/iso8601.htm\" target=\"_blank\">ISO 8601 format</a>."
        },
        "expirationDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The date when the client certificate will expire, in <a href=\"http://www.iso.org/iso/home/standards/iso8601.htm\" target=\"_blank\">ISO 8601 format</a>."
        }
      },
      "description": "<p>Represents a client certificate used to configure client-side SSL authentication while sending requests to the integration endpoint.</p> <div class=\"remarks\">Client certificates are used authenticate an API by the back-end server. To authenticate an API client (or user), use a custom <a>Authorizer</a>.</div> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html\">Use Client-Side Certificate</a> </div>"
    },
    "ClientCertificates": {
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/String"
        },
        "items": {
          "$ref": "#/definitions/ListOfClientCertificate",
          "description": "The current page of any <a>ClientCertificate</a> resources in the collection of <a>ClientCertificate</a> resources."
        }
      },
      "description": "<p>Represents a collection of <a>ClientCertificate</a> resources.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html\">Use Client-Side Certificate</a> </div>"
    },
    "ConflictException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String"
        }
      }
    },
    "CreateApiKeyRequest": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/String",
          "description": "The name of the <a>ApiKey</a>."
        },
        "description": {
          "$ref": "#/definitions/String",
          "description": "The description of the <a>ApiKey</a>."
        },
        "enabled": {
          "$ref": "#/definitions/Boolean",
          "description": "Specifies whether the <a>ApiKey</a> can be used by callers."
        },
        "generateDistinctId": {
          "$ref": "#/definitions/Boolean",
          "description": "Specifies whether (<code>true</code>) or not (<code>false</code>) the key identifier is distinct from the created API key value."
        },
        "value": {
          "$ref": "#/definitions/String",
          "description": "Specifies a value of the API key."
        },
        "stageKeys": {
          "$ref": "#/definitions/ListOfStageKeys",
          "description": "DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key."
        }
      },
      "description": "Request to create an <a>ApiKey</a> resource."
    },
    "CreateAuthorizerRequest": {
      "type": "object",
      "required": [
        "name",
        "type",
        "identitySource"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/String",
          "description": "[Required] The name of the authorizer."
        },
        "type": {
          "$ref": "#/definitions/AuthorizerType",
          "description": "[Required] The type of the authorizer."
        },
        "providerARNs": {
          "$ref": "#/definitions/ListOfARNs",
          "description": "A list of the Cognito Your User Pool authorizer's provider ARNs."
        },
        "authType": {
          "$ref": "#/definitions/String",
          "description": "Optional customer-defined field, used in Swagger imports/exports. Has no functional impact."
        },
        "authorizerUri": {
          "$ref": "#/definitions/String",
          "description": "[Required] Specifies the authorizer's Uniform Resource Identifier (URI)."
        },
        "authorizerCredentials": {
          "$ref": "#/definitions/String",
          "description": "Specifies the credentials required for the authorizer, if any."
        },
        "identitySource": {
          "$ref": "#/definitions/String",
          "description": "[Required] The source of the identity in an incoming request."
        },
        "identityValidationExpression": {
          "$ref": "#/definitions/String",
          "description": "A validation expression for the incoming identity."
        },
        "authorizerResultTtlInSeconds": {
          "$ref": "#/definitions/NullableInteger",
          "description": "The TTL of cached authorizer results."
        }
      },
      "description": "Request to add a new <a>Authorizer</a> to an existing <a>RestApi</a> resource."
    },
    "CreateBasePathMappingRequest": {
      "type": "object",
      "required": [
        "restApiId"
      ],
      "properties": {
        "basePath": {
          "$ref": "#/definitions/String",
          "description": "The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Leave this blank if you do not want callers to specify a base path name after the domain name."
        },
        "restApiId": {
          "$ref": "#/definitions/String",
          "description": "The name of the API that you want to apply this mapping to."
        },
        "stage": {
          "$ref": "#/definitions/String",
          "description": "The name of the API's stage that you want to use for this mapping. Leave this blank if you do not want callers to explicitly specify the stage name after any base path name."
        }
      },
      "description": "Requests Amazon API Gateway to create a new <a>BasePathMapping</a> resource."
    },
    "CreateDeploymentRequest": {
      "type": "object",
      "required": [
        "stageName"
      ],
      "properties": {
        "stageName": {
          "$ref": "#/definitions/String",
          "description": "The name of the <a>Stage</a> resource for the <a>Deployment</a> resource to create."
        },
        "stageDescription": {
          "$ref": "#/definitions/String",
          "description": "The description of the <a>Stage</a> resource for the <a>Deployment</a> resource to create."
        },
        "description": {
          "$ref": "#/definitions/String",
          "description": "The description for the <a>Deployment</a> resource to create."
        },
        "cacheClusterEnabled": {
          "$ref": "#/definitions/NullableBoolean",
          "description": "Enables a cache cluster for the <a>Stage</a> resource specified in the input."
        },
        "cacheClusterSize": {
          "$ref": "#/definitions/CacheClusterSize",
          "description": "Specifies the cache cluster size for the <a>Stage</a> resource specified in the input, if a cache cluster is enabled."
        },
        "variables": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "A map that defines the stage variables for the <a>Stage</a> resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>."
        }
      },
      "description": "Requests Amazon API Gateway to create a <a>Deployment</a> resource."
    },
    "CreateDomainNameRequest": {
      "type": "object",
      "required": [
        "domainName",
        "certificateName",
        "certificateBody",
        "certificatePrivateKey",
        "certificateChain"
      ],
      "properties": {
        "domainName": {
          "$ref": "#/definitions/String",
          "description": "The name of the <a>DomainName</a> resource."
        },
        "certificateName": {
          "$ref": "#/definitions/String",
          "description": "The name of the certificate."
        },
        "certificateBody": {
          "$ref": "#/definitions/String",
          "description": "The body of the server certificate provided by your certificate authority."
        },
        "certificatePrivateKey": {
          "$ref": "#/definitions/String",
          "description": "Your certificate's private key."
        },
        "certificateChain": {
          "$ref": "#/definitions/String",
          "description": "The intermediate certificates and optionally the root certificate, one after the other without any blank lines. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path."
        }
      },
      "description": "A request to create a new domain name."
    },
    "CreateModelRequest": {
      "type": "object",
      "required": [
        "name",
        "contentType"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/String",
          "description": "The name of the model."
        },
        "description": {
          "$ref": "#/definitions/String",
          "description": "The description of the model."
        },
        "schema": {
          "$ref": "#/definitions/String",
          "description": "The schema for the model. For <code>application/json</code> models, this should be <a href=\"http://json-schema.org/documentation.html\" target=\"_blank\">JSON-schema draft v4</a> model."
        },
        "contentType": {
          "$ref": "#/definitions/String",
          "description": "The content-type for the model."
        }
      },
      "description": "Request to add a new <a>Model</a> to an existing <a>RestApi</a> resource."
    },
    "CreateResourceRequest": {
      "type": "object",
      "required": [
        "pathPart"
      ],
      "properties": {
        "pathPart": {
          "$ref": "#/definitions/String",
          "description": "The last path segment for this resource."
        }
      },
      "description": "Requests Amazon API Gateway to create a <a>Resource</a> resource."
    },
    "CreateRestApiRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/String",
          "description": "The name of the <a>RestApi</a>."
        },
        "description": {
          "$ref": "#/definitions/String",
          "description": "The description of the <a>RestApi</a>."
        },
        "cloneFrom": {
          "$ref": "#/definitions/String",
          "description": "The ID of the <a>RestApi</a> that you want to clone from."
        }
      },
      "description": "The POST Request to add a new <a>RestApi</a> resource to your collection."
    },
    "CreateStageRequest": {
      "type": "object",
      "required": [
        "stageName",
        "deploymentId"
      ],
      "properties": {
        "stageName": {
          "$ref": "#/definitions/String",
          "description": "The name for the <a>Stage</a> resource."
        },
        "deploymentId": {
          "$ref": "#/definitions/String",
          "description": "The identifier of the <a>Deployment</a> resource for the <a>Stage</a> resource."
        },
        "description": {
          "$ref": "#/definitions/String",
          "description": "The description of the <a>Stage</a> resource."
        },
        "cacheClusterEnabled": {
          "$ref": "#/definitions/Boolean",
          "description": "Whether cache clustering is enabled for the stage."
        },
        "cacheClusterSize": {
          "$ref": "#/definitions/CacheClusterSize",
          "description": "The stage's cache cluster size."
        },
        "variables": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "A map that defines the stage variables for the new <a>Stage</a> resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>."
        }
      },
      "description": "Requests Amazon API Gateway to create a <a>Stage</a> resource."
    },
    "CreateUsagePlanKeyRequest": {
      "type": "object",
      "required": [
        "keyId",
        "keyType"
      ],
      "properties": {
        "keyId": {
          "$ref": "#/definitions/String",
          "description": "The identifier of a <a>UsagePlanKey</a> resource for a plan customer."
        },
        "keyType": {
          "$ref": "#/definitions/String",
          "description": "The type of a <a>UsagePlanKey</a> resource for a plan customer."
        }
      },
      "description": "The POST request to create a usage plan key for adding an existing API key to a usage plan."
    },
    "CreateUsagePlanRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/String",
          "description": "The name of the usage plan."
        },
        "description": {
          "$ref": "#/definitions/String",
          "description": "The description of the usage plan."
        },
        "apiStages": {
          "$ref": "#/definitions/ListOfApiStage",
          "description": "The associated API stages of the usage plan."
        },
        "throttle": {
          "$ref": "#/definitions/ThrottleSettings",
          "description": "The throttling limits of the usage plan."
        },
        "quota": {
          "$ref": "#/definitions/QuotaSettings",
          "description": "The quota of the usage plan."
        }
      },
      "description": "The POST request to create a usage plan with the name, description, throttle limits and quota limits, as well as the associated API stages, specified in the payload."
    },
    "DeleteApiKeyRequest": {
      "type": "object",
      "properties": {},
      "description": "A request to delete the <a>ApiKey</a> resource."
    },
    "DeleteAuthorizerRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to delete an existing <a>Authorizer</a> resource."
    },
    "DeleteBasePathMappingRequest": {
      "type": "object",
      "properties": {},
      "description": "A request to delete the <a>BasePathMapping</a> resource."
    },
    "DeleteClientCertificateRequest": {
      "type": "object",
      "properties": {},
      "description": "A request to delete the <a>ClientCertificate</a> resource."
    },
    "DeleteDeploymentRequest": {
      "type": "object",
      "properties": {},
      "description": "Requests Amazon API Gateway to delete a <a>Deployment</a> resource."
    },
    "DeleteDomainNameRequest": {
      "type": "object",
      "properties": {},
      "description": "A request to delete the <a>DomainName</a> resource."
    },
    "DeleteIntegrationRequest": {
      "type": "object",
      "properties": {},
      "description": "Represents a delete integration request."
    },
    "DeleteIntegrationResponseRequest": {
      "type": "object",
      "properties": {},
      "description": "Represents a delete integration response request."
    },
    "DeleteMethodRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to delete an existing <a>Method</a> resource."
    },
    "DeleteMethodResponseRequest": {
      "type": "object",
      "properties": {},
      "description": "A request to delete an existing <a>MethodResponse</a> resource."
    },
    "DeleteModelRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to delete an existing model in an existing <a>RestApi</a> resource."
    },
    "DeleteResourceRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to delete a <a>Resource</a>."
    },
    "DeleteRestApiRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to delete the specified API from your collection."
    },
    "DeleteStageRequest": {
      "type": "object",
      "properties": {},
      "description": "Requests Amazon API Gateway to delete a <a>Stage</a> resource."
    },
    "DeleteUsagePlanKeyRequest": {
      "type": "object",
      "properties": {},
      "description": "The DELETE request to delete a usage plan key and remove the underlying API key from the associated usage plan."
    },
    "DeleteUsagePlanRequest": {
      "type": "object",
      "properties": {},
      "description": "The DELETE request to delete a uasge plan of a given plan Id."
    },
    "Deployment": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/String",
          "description": "The identifier for the deployment resource."
        },
        "description": {
          "$ref": "#/definitions/String",
          "description": "The description for the deployment resource."
        },
        "createdDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The date and time that the deployment resource was created."
        },
        "apiSummary": {
          "$ref": "#/definitions/PathToMapOfMethodSnapshot",
          "description": "A summary of the <a>RestApi</a> at the date and time that the deployment resource was created."
        }
      },
      "description": "<p>An immutable representation of a <a>RestApi</a> resource that can be called by users using <a>Stages</a>. A deployment must be associated with a <a>Stage</a> for it to be callable over the Internet.</p> <div class=\"remarks\">To create a deployment, call <code>POST</code> on the <a>Deployments</a> resource of a <a>RestApi</a>. To view, update, or delete a deployment, call <code>GET</code>, <code>PATCH</code>, or <code>DELETE</code> on the specified deployment resource (<code>/restapis/{restapi_id}/deployments/{deployment_id}</code>).</div> <div class=\"seeAlso\"><a>RestApi</a>, <a>Deployments</a>, <a>Stage</a>, <a href=\"http://docs.aws.amazon.com/cli/latest/reference/apigateway/get-deployment.html\">AWS CLI</a>, <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a> </div>"
    },
    "Deployments": {
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/String"
        },
        "items": {
          "$ref": "#/definitions/ListOfDeployment",
          "description": "The current page of any <a>Deployment</a> resources in the collection of deployment resources."
        }
      },
      "description": "<p>Represents a collection resource that contains zero or more references to your existing deployments, and links that guide you on how to interact with your collection. The collection offers a paginated view of the contained deployments.</p> <div class=\"remarks\">To create a new deployment of a <a>RestApi</a>, make a <code>POST</code> request against this resource. To view, update, or delete an existing deployment, make a <code>GET</code>, <code>PATCH</code>, or <code>DELETE</code> request, respectively, on a specified <a>Deployment</a> resource.</div> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-deploy-api.html\">Deploying an API</a>, <a href=\"http://docs.aws.amazon.com/cli/latest/reference/apigateway/get-deployment.html\">AWS CLI</a>, <a href=\"https://aws.amazon.com/tools/\">AWS SDKs</a> </div>"
    },
    "DomainName": {
      "type": "object",
      "properties": {
        "domainName": {
          "$ref": "#/definitions/String",
          "description": "The name of the <a>DomainName</a> resource."
        },
        "certificateName": {
          "$ref": "#/definitions/String",
          "description": "The name of the certificate."
        },
        "certificateUploadDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The date when the certificate was uploaded, in <a href=\"http://www.iso.org/iso/home/standards/iso8601.htm\" target=\"_blank\">ISO 8601 format</a>."
        },
        "distributionDomainName": {
          "$ref": "#/definitions/String",
          "description": "The domain name of the Amazon CloudFront distribution. For more information, see the <a href=\"http://aws.amazon.com/documentation/cloudfront/\" target=\"_blank\">Amazon CloudFront documentation</a>."
        }
      },
      "description": "<p>Represents a domain name that is contained in a simpler, more intuitive URL that can be called.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html\">Use Client-Side Certificate</a> </div>"
    },
    "DomainNames": {
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/String"
        },
        "items": {
          "$ref": "#/definitions/ListOfDomainName",
          "description": "The current page of any <a>DomainName</a> resources in the collection of <a>DomainName</a> resources."
        }
      },
      "description": "<p>Represents a collection of <a>DomainName</a> resources.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html\">Use Client-Side Certificate</a> </div>"
    },
    "Double": {
      "type": "number",
      "format": "double"
    },
    "ExportResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/Blob",
          "description": "The binary blob response to <a>GetExport</a>, which contains the export."
        }
      },
      "description": "The binary blob response to <a>GetExport</a>, which contains the generated SDK."
    },
    "FlushStageAuthorizersCacheRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to flush authorizer cache entries on a specified stage."
    },
    "FlushStageCacheRequest": {
      "type": "object",
      "properties": {},
      "description": "Requests Amazon API Gateway to flush a stage's cache."
    },
    "GenerateClientCertificateRequest": {
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/String",
          "description": "The description of the <a>ClientCertificate</a>."
        }
      },
      "description": "A request to generate a <a>ClientCertificate</a> resource."
    },
    "GetAccountRequest": {
      "type": "object",
      "properties": {},
      "description": "Requests Amazon API Gateway to get information about the current <a>Account</a> resource."
    },
    "GetApiKeyRequest": {
      "type": "object",
      "properties": {},
      "description": "A request to get information about the current <a>ApiKey</a> resource."
    },
    "GetApiKeysRequest": {
      "type": "object",
      "properties": {},
      "description": "A request to get information about the current <a>ApiKeys</a> resource."
    },
    "GetAuthorizerRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to describe an existing <a>Authorizer</a> resource."
    },
    "GetAuthorizersRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to describe an existing <a>Authorizers</a> resource."
    },
    "GetBasePathMappingRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to describe a <a>BasePathMapping</a> resource."
    },
    "GetBasePathMappingsRequest": {
      "type": "object",
      "properties": {},
      "description": "A request to get information about a collection of <a>BasePathMapping</a> resources."
    },
    "GetClientCertificateRequest": {
      "type": "object",
      "properties": {},
      "description": "A request to get information about the current <a>ClientCertificate</a> resource."
    },
    "GetClientCertificatesRequest": {
      "type": "object",
      "properties": {},
      "description": "A request to get information about a collection of <a>ClientCertificate</a> resources."
    },
    "GetDeploymentRequest": {
      "type": "object",
      "properties": {},
      "description": "Requests Amazon API Gateway to get information about a <a>Deployment</a> resource."
    },
    "GetDeploymentsRequest": {
      "type": "object",
      "properties": {},
      "description": "Requests Amazon API Gateway to get information about a <a>Deployments</a> collection."
    },
    "GetDomainNameRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to get the name of a <a>DomainName</a> resource."
    },
    "GetDomainNamesRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to describe a collection of <a>DomainName</a> resources."
    },
    "GetExportRequest": {
      "type": "object",
      "properties": {},
      "description": "Request a new export of a <a>RestApi</a> for a particular <a>Stage</a>."
    },
    "GetIntegrationRequest": {
      "type": "object",
      "properties": {},
      "description": "Represents a get integration request."
    },
    "GetIntegrationResponseRequest": {
      "type": "object",
      "properties": {},
      "description": "Represents a get integration response request."
    },
    "GetMethodRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to describe an existing <a>Method</a> resource."
    },
    "GetMethodResponseRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to describe a <a>MethodResponse</a> resource."
    },
    "GetModelRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to list information about a model in an existing <a>RestApi</a> resource."
    },
    "GetModelTemplateRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to generate a sample mapping template used to transform the payload."
    },
    "GetModelsRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to list existing <a>Models</a> defined for a <a>RestApi</a> resource."
    },
    "GetResourceRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to list information about a resource."
    },
    "GetResourcesRequest": {
      "type": "object",
      "properties": {},
      "description": "Request to list information about a collection of resources."
    },
    "GetRestApiRequest": {
      "type": "object",
      "properties": {},
      "description": "The GET request to list an existing <a>RestApi</a> defined for your collection. "
    },
    "GetRestApisRequest": {
      "type": "object",
      "properties": {},
      "description": "The GET request to list existing <a>RestApis</a> defined for your collection."
    },
    "GetSdkRequest": {
      "type": "object",
      "properties": {},
      "description": "Request a new generated client SDK for a <a>RestApi</a> and <a>Stage</a>."
    },
    "GetStageRequest": {
      "type": "object",
      "properties": {},
      "description": "Requests Amazon API Gateway to get information about a <a>Stage</a> resource."
    },
    "GetStagesRequest": {
      "type": "object",
      "properties": {},
      "description": "Requests Amazon API Gateway to get information about one or more <a>Stage</a> resources."
    },
    "GetUsagePlanKeyRequest": {
      "type": "object",
      "properties": {},
      "description": "The GET request to get a usage plan key of a given key identifier."
    },
    "GetUsagePlanKeysRequest": {
      "type": "object",
      "properties": {},
      "description": "The GET request to get all the usage plan keys representing the API keys added to a specified usage plan."
    },
    "GetUsagePlanRequest": {
      "type": "object",
      "properties": {},
      "description": "The GET request to get a usage plan of a given plan identifier."
    },
    "GetUsagePlansRequest": {
      "type": "object",
      "properties": {},
      "description": "The GET request to get all the usage plans of the caller's account."
    },
    "GetUsageRequest": {
      "type": "object",
      "properties": {},
      "description": "The GET request to get the usage data of a usage plan in a specified time interval."
    },
    "ImportApiKeysRequest": {
      "type": "object",
      "required": [
        "body"
      ],
      "properties": {
        "body": {
          "$ref": "#/definitions/Blob",
          "description": "The payload of the POST request to import API keys. For the payload format, see <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/api-key-file-format.html\">API Key File Format</a>."
        }
      },
      "description": "The POST request to import API keys from an external source, such as a CSV-formatted file."
    },
    "ImportRestApiRequest": {
      "type": "object",
      "required": [
        "body"
      ],
      "properties": {
        "body": {
          "$ref": "#/definitions/Blob",
          "description": "The POST request body containing external API definitions. Currently, only Swagger definition JSON files are supported."
        }
      },
      "description": "A POST request to import an API to Amazon API Gateway using an input of an API definition file."
    },
    "Integer": {
      "type": "integer"
    },
    "Integration": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/IntegrationType",
          "description": "Specifies the integration's type. The valid value is <code>HTTP</code>, <code>AWS</code>, or <code>MOCK</code>."
        },
        "httpMethod": {
          "$ref": "#/definitions/String",
          "description": "Specifies the integration's HTTP method type."
        },
        "uri": {
          "$ref": "#/definitions/String",
          "description": "Specifies the integration's Uniform Resource Identifier (URI). For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the <a href=\"https://www.ietf.org/rfc/rfc3986.txt\" target=\"_blank\">RFC-3986 specification</a>. For AWS integrations, the URI should be of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}</code>. <code>Region</code>, <code>subdomain</code> and <code>service</code> are used to determine the right endpoint. For AWS services that use the <code>Action=</code> query string parameter, <code>service_api</code> should be a valid action for the desired service. For RESTful AWS service APIs, <code>path</code> is used to indicate that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>."
        },
        "credentials": {
          "$ref": "#/definitions/String",
          "description": "Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string <code>arn:aws:iam::\\*:user/\\*</code>. To use resource-based permissions on supported AWS services, specify null."
        },
        "requestParameters": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name."
        },
        "requestTemplates": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value."
        },
        "passthroughBehavior": {
          "$ref": "#/definitions/String",
          "description": "<div> <p> Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in <code>requestTemplates</code>. There are three valid values: <code>WHEN_NO_MATCH</code>, <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. </p> <ul> <li> <code>WHEN_NO_MATCH</code> passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. </li> <li> <code>WHEN_NO_TEMPLATES</code> passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP <code>415 Unsupported Media Type</code> response. </li> <li> <code>NEVER</code> rejects the method request with an HTTP <code>415 Unsupported Media Type</code> response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request. </li> </ul> </div>"
        },
        "cacheNamespace": {
          "$ref": "#/definitions/String",
          "description": "Specifies the integration's cache namespace."
        },
        "cacheKeyParameters": {
          "$ref": "#/definitions/ListOfString",
          "description": "Specifies the integration's cache key parameters."
        },
        "integrationResponses": {
          "$ref": "#/definitions/MapOfIntegrationResponse",
          "description": "<p>Specifies the integration's responses.</p> <div class=\"remarks\"> <p/> <h4>Example: Get integration responses of a method</h4> <h5>Request</h5> <p/> <pre><code>GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200 HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160607T191449Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160607/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} </code></pre> <h5>Response</h5> <p>The successful response returns <code>200 OK</code> status and a payload as follows:</p> <pre><code>{ \"_links\": { \"curies\": { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html\", \"name\": \"integrationresponse\", \"templated\": true }, \"self\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200\", \"title\": \"200\" }, \"integrationresponse:delete\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200\" }, \"integrationresponse:update\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200\" } }, \"responseParameters\": { \"method.response.header.Content-Type\": \"'application/xml'\" }, \"responseTemplates\": { \"application/json\": \"$util.urlDecode(\\\"%3CkinesisStreams%3E#foreach($stream in $input.path('$.StreamNames'))%3Cstream%3E%3Cname%3E$stream%3C/name%3E%3C/stream%3E#end%3C/kinesisStreams%3E\\\")\\n\" }, \"statusCode\": \"200\" }</code></pre> <p/> </div> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html\">Creating an API</a> </div>"
        }
      },
      "description": "<p>Represents an HTTP, AWS, or Mock integration.</p> <div class=\"remarks\">In the API Gateway console, the built-in Lambda integration is an AWS integration.</div> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html\">Creating an API</a> </div>"
    },
    "IntegrationResponse": {
      "type": "object",
      "properties": {
        "statusCode": {
          "$ref": "#/definitions/StatusCode",
          "description": "Specifies the status code that is used to map the integration response to an existing <a>MethodResponse</a>."
        },
        "selectionPattern": {
          "$ref": "#/definitions/String",
          "description": "Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the <code>.+</code> regex to match error response. However, make sure that the error response does not contain any newline (<code>\\n</code>) character in such cases. If the back end is an AWS Lambda function, the AWS Lambda function error header is matched. For all other HTTP and AWS back ends, the HTTP status code is matched."
        },
        "responseParameters": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> is a valid and unique response header name and <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix."
        },
        "responseTemplates": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value."
        }
      },
      "description": "<p>Represents an integration response. The status code must map to an existing <a>MethodResponse</a>, and parameters and templates can be used to transform the back-end response.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html\">Creating an API</a> </div>"
    },
    "IntegrationType": {
      "type": "string",
      "enum": [
        "HTTP",
        "AWS",
        "MOCK"
      ],
      "description": "The integration type. The valid value is <code>HTTP</code>, <code>AWS</code>, or <code>MOCK</code>."
    },
    "LimitExceededException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String"
        }
      }
    },
    "ListOfARNs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProviderARN"
      }
    },
    "ListOfApiKey": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ApiKey"
      }
    },
    "ListOfApiStage": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ApiStage"
      }
    },
    "ListOfAuthorizer": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Authorizer"
      }
    },
    "ListOfBasePathMapping": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/BasePathMapping"
      }
    },
    "ListOfClientCertificate": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ClientCertificate"
      }
    },
    "ListOfDeployment": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Deployment"
      }
    },
    "ListOfDomainName": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DomainName"
      }
    },
    "ListOfLong": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Long"
      }
    },
    "ListOfModel": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model"
      }
    },
    "ListOfPatchOperation": {
      "type": "array",
      "description": "A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.",
      "items": {
        "$ref": "#/definitions/PatchOperation"
      }
    },
    "ListOfResource": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Resource"
      }
    },
    "ListOfRestApi": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RestApi"
      }
    },
    "ListOfStage": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Stage"
      }
    },
    "ListOfStageKeys": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/StageKey"
      }
    },
    "ListOfString": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/String"
      }
    },
    "ListOfUsage": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ListOfLong"
      }
    },
    "ListOfUsagePlan": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/UsagePlan"
      }
    },
    "ListOfUsagePlanKey": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/UsagePlanKey"
      }
    },
    "Long": {
      "type": "integer"
    },
    "MapOfHeaderValues": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/String"
          }
        }
      }
    },
    "MapOfIntegrationResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/IntegrationResponse"
          }
        }
      }
    },
    "MapOfKeyUsages": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/ListOfUsage"
          }
        }
      }
    },
    "MapOfMethod": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/Method"
          }
        }
      }
    },
    "MapOfMethodResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/MethodResponse"
          }
        }
      }
    },
    "MapOfMethodSettings": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/MethodSetting"
          }
        }
      }
    },
    "MapOfMethodSnapshot": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/MethodSnapshot"
          }
        }
      }
    },
    "MapOfStringToBoolean": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/NullableBoolean"
          }
        }
      }
    },
    "MapOfStringToList": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/ListOfString"
          }
        }
      }
    },
    "MapOfStringToString": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/String"
          }
        }
      }
    },
    "Method": {
      "type": "object",
      "properties": {
        "httpMethod": {
          "$ref": "#/definitions/String",
          "description": "The method's HTTP verb."
        },
        "authorizationType": {
          "$ref": "#/definitions/String",
          "description": "The method's authorization type."
        },
        "authorizerId": {
          "$ref": "#/definitions/String",
          "description": "The identifier of an <a>Authorizer</a> to use on this method. The <code>authorizationType</code> must be <code>CUSTOM</code>."
        },
        "apiKeyRequired": {
          "$ref": "#/definitions/NullableBoolean",
          "description": "A boolean flag specifying whether a valid <a>ApiKey</a> is required to invoke this method."
        },
        "requestParameters": {
          "$ref": "#/definitions/MapOfStringToBoolean",
          "description": "A key-value map defining required or optional method request parameters that can be accepted by Amazon API Gateway. A key is a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in <a>Integration</a> to be mapped to integration request parameters or templates."
        },
        "requestModels": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "A key-value map specifying data schemas, represented by <a>Model</a> resources, (as the mapped value) of the request payloads of given content types (as the mapping key)."
        },
        "methodResponses": {
          "$ref": "#/definitions/MapOfMethodResponse",
          "description": "<p>Gets a method response associated with a given HTTP status code. </p> <div class=\"remarks\"> <p>The collection of method responses are encapsulated in a key-value map, where the key is a response's HTTP status code and the value is a <a>MethodResponse</a> resource that specifies the response returned to the caller from the back end through the integration response.</p> <h4>Example: Get a 200 OK response of a GET method</h4> <h5>Request</h5> <p/> <pre><code>GET /restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200 HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com Content-Length: 117 X-Amz-Date: 20160613T215008Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160613/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}</code></pre> <h5>Response</h5> <p>The successful response returns a <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ \"_links\": { \"curies\": { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html\", \"name\": \"methodresponse\", \"templated\": true }, \"self\": { \"href\": \"/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200\", \"title\": \"200\" }, \"methodresponse:delete\": { \"href\": \"/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200\" }, \"methodresponse:update\": { \"href\": \"/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200\" } }, \"responseModels\": { \"application/json\": \"Empty\" }, \"responseParameters\": { \"method.response.header.operator\": false, \"method.response.header.operand_2\": false, \"method.response.header.operand_1\": false }, \"statusCode\": \"200\" }</code></pre> <p/> </div> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/cli/latest/reference/apigateway/get-method-response.html\">AWS CLI</a> </div>"
        },
        "methodIntegration": {
          "$ref": "#/definitions/Integration",
          "description": "<p>Gets the method's integration responsible for passing the client-submitted request to the back end and performing necessary transformations to make the request compliant with the back end.</p> <div class=\"remarks\"> <p/> <h4>Example: </h4> <h5>Request</h5> <p/> <pre><code>GET /restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com Content-Length: 117 X-Amz-Date: 20160613T213210Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160613/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}</code></pre> <h5>Response</h5> <p>The successful response returns a <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ \"_links\": { \"curies\": [ { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-{rel}.html\", \"name\": \"integration\", \"templated\": true }, { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html\", \"name\": \"integrationresponse\", \"templated\": true } ], \"self\": { \"href\": \"/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration\" }, \"integration:delete\": { \"href\": \"/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration\" }, \"integration:responses\": { \"href\": \"/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200\", \"name\": \"200\", \"title\": \"200\" }, \"integration:update\": { \"href\": \"/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration\" }, \"integrationresponse:put\": { \"href\": \"/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/{status_code}\", \"templated\": true } }, \"cacheKeyParameters\": [], \"cacheNamespace\": \"0cjtch\", \"credentials\": \"arn:aws:iam::123456789012:role/apigAwsProxyRole\", \"httpMethod\": \"POST\", \"passthroughBehavior\": \"WHEN_NO_MATCH\", \"requestTemplates\": { \"application/json\": \"{\\n \\\"a\\\": \\\"$input.params('operand1')\\\",\\n \\\"b\\\": \\\"$input.params('operand2')\\\", \\n \\\"op\\\": \\\"$input.params('operator')\\\" \\n}\" }, \"type\": \"AWS\", \"uri\": \"arn:aws:apigateway:us-west-2:lambda:path//2015-03-31/functions/arn:aws:lambda:us-west-2:123456789012:function:Calc/invocations\", \"_embedded\": { \"integration:responses\": { \"_links\": { \"self\": { \"href\": \"/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200\", \"name\": \"200\", \"title\": \"200\" }, \"integrationresponse:delete\": { \"href\": \"/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200\" }, \"integrationresponse:update\": { \"href\": \"/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200\" } }, \"responseParameters\": { \"method.response.header.operator\": \"integration.response.body.op\", \"method.response.header.operand_2\": \"integration.response.body.b\", \"method.response.header.operand_1\": \"integration.response.body.a\" }, \"responseTemplates\": { \"application/json\": \"#set($res = $input.path('$'))\\n{\\n \\\"result\\\": \\\"$res.a, $res.b, $res.op => $res.c\\\",\\n \\\"a\\\" : \\\"$res.a\\\",\\n \\\"b\\\" : \\\"$res.b\\\",\\n \\\"op\\\" : \\\"$res.op\\\",\\n \\\"c\\\" : \\\"$res.c\\\"\\n}\" }, \"selectionPattern\": \"\", \"statusCode\": \"200\" } } }</code></pre> <p/> </div> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/cli/latest/reference/apigateway/get-integration.html\">AWS CLI</a> </div>"
        }
      },
      "description": "<p> Represents a client-facing interface by which the client calls the API to access back-end resources. A <b>Method</b> resource is integrated with an <a>Integration</a> resource. Both consist of a request and one or more responses. The method request takes the client input that is passed to the back end through the integration request. A method response returns the output from the back end to the client through an integration response. A method request is embodied in a <b>Method</b> resource, whereas an integration request is embodied in an <a>Integration</a> resource. On the other hand, a method response is represented by a <a>MethodResponse</a> resource, whereas an integration response is represented by an <a>IntegrationResponse</a> resource. </p> <div class=\"remarks\"> <p/> <h4>Example: Retrive the GET method on a specified resource</h4> <h5>Request</h5> <p>The following example request retrieves the information about the GET method on an API resource (<code>3kzxbg5sa2</code>) of an API (<code>fugvjdxtri</code>). </p> <pre><code>GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160603T210259Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160603/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}</code></pre> <h5>Response</h5> <p>The successful response returns a <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ \"_links\": { \"curies\": [ { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-{rel}.html\", \"name\": \"integration\", \"templated\": true }, { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html\", \"name\": \"integrationresponse\", \"templated\": true }, { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-{rel}.html\", \"name\": \"method\", \"templated\": true }, { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html\", \"name\": \"methodresponse\", \"templated\": true } ], \"self\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET\", \"name\": \"GET\", \"title\": \"GET\" }, \"integration:put\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration\" }, \"method:delete\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET\" }, \"method:integration\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration\" }, \"method:responses\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200\", \"name\": \"200\", \"title\": \"200\" }, \"method:update\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET\" }, \"methodresponse:put\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/{status_code}\", \"templated\": true } }, \"apiKeyRequired\": true, \"authorizationType\": \"NONE\", \"httpMethod\": \"GET\", \"_embedded\": { \"method:integration\": { \"_links\": { \"self\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration\" }, \"integration:delete\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration\" }, \"integration:responses\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200\", \"name\": \"200\", \"title\": \"200\" }, \"integration:update\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration\" }, \"integrationresponse:put\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/{status_code}\", \"templated\": true } }, \"cacheKeyParameters\": [], \"cacheNamespace\": \"3kzxbg5sa2\", \"credentials\": \"arn:aws:iam::123456789012:role/apigAwsProxyRole\", \"httpMethod\": \"POST\", \"passthroughBehavior\": \"WHEN_NO_MATCH\", \"requestParameters\": { \"integration.request.header.Content-Type\": \"'application/x-amz-json-1.1'\" }, \"requestTemplates\": { \"application/json\": \"{\\n}\" }, \"type\": \"AWS\", \"uri\": \"arn:aws:apigateway:us-east-1:kinesis:action/ListStreams\", \"_embedded\": { \"integration:responses\": { \"_links\": { \"self\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200\", \"name\": \"200\", \"title\": \"200\" }, \"integrationresponse:delete\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200\" }, \"integrationresponse:update\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200\" } }, \"responseParameters\": { \"method.response.header.Content-Type\": \"'application/xml'\" }, \"responseTemplates\": { \"application/json\": \"$util.urlDecode(\\\"%3CkinesisStreams%3E%23foreach(%24stream%20in%20%24input.path(%27%24.StreamNames%27))%3Cstream%3E%3Cname%3E%24stream%3C%2Fname%3E%3C%2Fstream%3E%23end%3C%2FkinesisStreams%3E\\\")\" }, \"statusCode\": \"200\" } } }, \"method:responses\": { \"_links\": { \"self\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200\", \"name\": \"200\", \"title\": \"200\" }, \"methodresponse:delete\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200\" }, \"methodresponse:update\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200\" } }, \"responseModels\": { \"application/json\": \"Empty\" }, \"responseParameters\": { \"method.response.header.Content-Type\": false }, \"statusCode\": \"200\" } } }</code></pre> <p>In the example above, the response template for the <code>200 OK</code> response maps the JSON output from the <code>ListStreams</code> action in the back end to an XML output. The mapping template is URL-encoded as <code>%3CkinesisStreams%3E%23foreach(%24stream%20in%20%24input.path(%27%24.StreamNames%27))%3Cstream%3E%3Cname%3E%24stream%3C%2Fname%3E%3C%2Fstream%3E%23end%3C%2FkinesisStreams%3E</code> and the output is decoded using the <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#util-templat-reference\">$util.urlDecode()</a> helper function.</p> </div> <div class=\"seeAlso\"> <a>MethodResponse</a>, <a>Integration</a>, <a>IntegrationResponse</a>, <a>Resource</a>, <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-method-settings.html\">Set up an API's method</a> </div>"
    },
    "MethodResponse": {
      "type": "object",
      "properties": {
        "statusCode": {
          "$ref": "#/definitions/StatusCode",
          "description": "The method response's status code."
        },
        "responseParameters": {
          "$ref": "#/definitions/MapOfStringToBoolean",
          "description": "A key-value map specifying required or optional response parameters that Amazon API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. Amazon API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's <a>IntegrationResponse</a>. The integration response data that can be mapped include an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)"
        },
        "responseModels": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "Specifies the <a>Model</a> resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a <a>Model</a> name as the value."
        }
      },
      "description": "<p>Represents a method response of a given HTTP status code returned to the client. The method response is passed from the back end through the associated integration response that can be transformed using a mapping template. </p> <div class=\"remarks\"> <p/> <h4>Example: A <b>MethodResponse</b> instance of an API</h4> <h5>Request</h5> <p>The example request retrieves a <b>MethodResponse</b> of the 200 status code.</p> <pre><code>GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200 HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160603T222952Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160603/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}</code></pre> <h5>Response</h5> <p>The successful response returns <code>200 OK</code> status and a payload as follows:</p> <pre><code>{ \"_links\": { \"curies\": { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html\", \"name\": \"methodresponse\", \"templated\": true }, \"self\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200\", \"title\": \"200\" }, \"methodresponse:delete\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200\" }, \"methodresponse:update\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200\" } }, \"responseModels\": { \"application/json\": \"Empty\" }, \"responseParameters\": { \"method.response.header.Content-Type\": false }, \"statusCode\": \"200\" }</code></pre> <p/> </div> <div class=\"seeAlso\"> <a>Method</a>, <a>IntegrationResponse</a>, <a>Integration</a> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html\">Creating an API</a> </div>"
    },
    "MethodSetting": {
      "type": "object",
      "properties": {
        "metricsEnabled": {
          "$ref": "#/definitions/Boolean",
          "description": "Specifies whether Amazon CloudWatch metrics are enabled for this method. The PATCH path for this setting is <code>/{method_setting_key}/metrics/enabled</code>, and the value is a Boolean."
        },
        "loggingLevel": {
          "$ref": "#/definitions/String",
          "description": "Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is <code>/{method_setting_key}/logging/loglevel</code>, and the available levels are <code>OFF</code>, <code>ERROR</code>, and <code>INFO</code>."
        },
        "dataTraceEnabled": {
          "$ref": "#/definitions/Boolean",
          "description": "Specifies whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is <code>/{method_setting_key}/logging/dataTrace</code>, and the value is a Boolean."
        },
        "throttlingBurstLimit": {
          "$ref": "#/definitions/Integer",
          "description": "Specifies the throttling burst limit. The PATCH path for this setting is <code>/{method_setting_key}/throttling/burstLimit</code>, and the value is an integer."
        },
        "throttlingRateLimit": {
          "$ref": "#/definitions/Double",
          "description": "Specifies the throttling rate limit. The PATCH path for this setting is <code>/{method_setting_key}/throttling/rateLimit</code>, and the value is a double."
        },
        "cachingEnabled": {
          "$ref": "#/definitions/Boolean",
          "description": "Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. The PATCH path for this setting is <code>/{method_setting_key}/caching/enabled</code>, and the value is a Boolean."
        },
        "cacheTtlInSeconds": {
          "$ref": "#/definitions/Integer",
          "description": "Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached. The PATCH path for this setting is <code>/{method_setting_key}/caching/ttlInSeconds</code>, and the value is an integer."
        },
        "cacheDataEncrypted": {
          "$ref": "#/definitions/Boolean",
          "description": "Specifies whether the cached responses are encrypted. The PATCH path for this setting is <code>/{method_setting_key}/caching/dataEncrypted</code>, and the value is a Boolean."
        },
        "requireAuthorizationForCacheControl": {
          "$ref": "#/definitions/Boolean",
          "description": "Specifies whether authorization is required for a cache invalidation request. The PATCH path for this setting is <code>/{method_setting_key}/caching/requireAuthorizationForCacheControl</code>, and the value is a Boolean."
        },
        "unauthorizedCacheControlHeaderStrategy": {
          "$ref": "#/definitions/UnauthorizedCacheControlHeaderStrategy",
          "description": "Specifies how to handle unauthorized requests for cache invalidation. The PATCH path for this setting is <code>/{method_setting_key}/caching/unauthorizedCacheControlHeaderStrategy</code>, and the available values are <code>FAIL_WITH_403</code>, <code>SUCCEED_WITH_RESPONSE_HEADER</code>, <code>SUCCEED_WITHOUT_RESPONSE_HEADER</code>."
        }
      },
      "description": "Specifies the method setting properties."
    },
    "MethodSnapshot": {
      "type": "object",
      "properties": {
        "authorizationType": {
          "$ref": "#/definitions/String",
          "description": "Specifies the type of authorization used for the method."
        },
        "apiKeyRequired": {
          "$ref": "#/definitions/Boolean",
          "description": "Specifies whether the method requires a valid <a>ApiKey</a>."
        }
      },
      "description": "Represents a summary of a <a>Method</a> resource, given a particular date and time."
    },
    "Model": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/String",
          "description": "The identifier for the model resource."
        },
        "name": {
          "$ref": "#/definitions/String",
          "description": "The name of the model."
        },
        "description": {
          "$ref": "#/definitions/String",
          "description": "The description of the model."
        },
        "schema": {
          "$ref": "#/definitions/String",
          "description": "The schema for the model. For <code>application/json</code> models, this should be <a href=\"http://json-schema.org/documentation.html\" target=\"_blank\">JSON-schema draft v4</a> model. Do not include \"\\*/\" characters in the description of any properties because such \"\\*/\" characters may be interpreted as the closing marker for comments in some languages, such as Java or JavaScript, causing the installation of your API's SDK generated by API Gateway to fail."
        },
        "contentType": {
          "$ref": "#/definitions/String",
          "description": "The content-type for the model."
        }
      },
      "description": "<p>Represents the data structure of a method's request or response payload.</p> <div class=\"remarks\"> <p>A request model defines the data structure of the client-supplied request payload. A response model defines the data structure of the response payload returned by the back end. Although not required, models are useful for mapping payloads between the front end and back end.</p> <p>A model is used for generating an API's SDK, validating the input request body, and creating a skeletal mapping template.</p> </div> <div class=\"seeAlso\"> <a>Method</a>, <a>MethodResponse</a>, <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html\">Models and Mappings</a> </div>"
    },
    "Models": {
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/String"
        },
        "items": {
          "$ref": "#/definitions/ListOfModel",
          "description": "Gets the current <a>Model</a> resource in the collection."
        }
      },
      "description": "<p>Represents a collection of <a>Model</a> resources.</p> <div class=\"seeAlso\"> <a>Method</a>, <a>MethodResponse</a>, <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html\">Models and Mappings</a> </div>"
    },
    "NotFoundException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String"
        }
      }
    },
    "NullableBoolean": {
      "type": "boolean"
    },
    "NullableInteger": {
      "type": "integer"
    },
    "PatchOperation": {
      "type": "object",
      "properties": {
        "op": {
          "$ref": "#/definitions/op",
          "description": "An update operation to be performed with this PATCH request. The valid value can be \"add\", \"remove\", or \"replace\". Not all valid operations are supported for a given resource. Support of the operations depends on specific operational contexts. Attempts to apply an unsupported operation on a resource will return an error message."
        },
        "path": {
          "$ref": "#/definitions/String",
          "description": "The <code>op</code> operation's target, as identified by a <a href=\"https://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-08\">JSON Pointer</a> value that references a location within the targeted resource. For example, if the target resource has an updateable property of <code>{\"name\":\"value\"}</code>, the path for this property is <code>/name</code>. If the <code>name</code> property value is a JSON object (e.g., <code>{\"name\": {\"child/name\": \"child-value\"}}</code>), the path for the <code>child/name</code> property will be <code>/name/child~1name</code>. Any slash (\"/\") character appearing in path names must be escaped with \"~1\", as shown in the example above. Each <code>op</code> operation can have only one <code>path</code> associated with it."
        },
        "value": {
          "$ref": "#/definitions/String",
          "description": "The new target value of the update operation. "
        },
        "from": {
          "$ref": "#/definitions/String",
          "description": " Not supported."
        }
      },
      "description": "A single patch operation to apply to the specified resource. Please refer to http://tools.ietf.org/html/rfc6902#section-4 for an explanation of how each operation is used."
    },
    "PathToMapOfMethodSnapshot": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/definitions/String"
          },
          "value": {
            "$ref": "#/definitions/MapOfMethodSnapshot"
          }
        }
      }
    },
    "ProviderARN": {
      "type": "string"
    },
    "PutIntegrationRequest": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/IntegrationType",
          "description": "Specifies a put integration input's type."
        },
        "integrationHttpMethod": {
          "$ref": "#/definitions/String",
          "description": "Specifies a put integration HTTP method. When the integration type is HTTP or AWS, this field is required."
        },
        "uri": {
          "$ref": "#/definitions/String",
          "description": "Specifies a put integration input's Uniform Resource Identifier (URI). When the integration type is HTTP or AWS, this field is required. For integration with Lambda as an AWS service proxy, this value is of the 'arn:aws:apigateway:&lt;region&gt;:lambda:path/2015-03-31/functions/&lt;functionArn&gt;/invocations' format."
        },
        "credentials": {
          "$ref": "#/definitions/String",
          "description": "Specifies whether credentials are required for a put integration."
        },
        "requestParameters": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name."
        },
        "requestTemplates": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value."
        },
        "passthroughBehavior": {
          "$ref": "#/definitions/String",
          "description": "<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the <code>requestTemplates</code> property on the Integration resource. There are three valid values: <code>WHEN_NO_MATCH</code>, <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. </p> <ul> <li><p><code>WHEN_NO_MATCH</code> passes the request body for unmapped content types through to the integration back end without transformation.</p></li> <li><p><code>NEVER</code> rejects unmapped content types with an HTTP 415 'Unsupported Media Type' response.</p></li> <li><p><code>WHEN_NO_TEMPLATES</code> allows pass-through when the integration has NO content types mapped to templates. However if there is at least one content type defined, unmapped content types will be rejected with the same 415 response.</p></li> </ul>"
        },
        "cacheNamespace": {
          "$ref": "#/definitions/String",
          "description": "Specifies a put integration input's cache namespace."
        },
        "cacheKeyParameters": {
          "$ref": "#/definitions/ListOfString",
          "description": "Specifies a put integration input's cache key parameters."
        }
      },
      "description": "Represents a put integration request."
    },
    "PutIntegrationResponseRequest": {
      "type": "object",
      "properties": {
        "selectionPattern": {
          "$ref": "#/definitions/String",
          "description": "Specifies the selection pattern of a put integration response."
        },
        "responseParameters": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix."
        },
        "responseTemplates": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "Specifies a put integration response's templates."
        }
      },
      "description": "Represents a put integration response request."
    },
    "PutMethodRequest": {
      "type": "object",
      "required": [
        "authorizationType"
      ],
      "properties": {
        "authorizationType": {
          "$ref": "#/definitions/String",
          "description": "Specifies the type of authorization used for the method."
        },
        "authorizerId": {
          "$ref": "#/definitions/String",
          "description": "Specifies the identifier of an <a>Authorizer</a> to use on this Method, if the type is CUSTOM."
        },
        "apiKeyRequired": {
          "$ref": "#/definitions/Boolean",
          "description": "Specifies whether the method required a valid <a>ApiKey</a>."
        },
        "requestParameters": {
          "$ref": "#/definitions/MapOfStringToBoolean",
          "description": "A key-value map defining required or optional method request parameters that can be accepted by Amazon API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in <a>Integration</a> to be mapped to integration request parameters or body-mapping templates."
        },
        "requestModels": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "Specifies the <a>Model</a> resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a <a>Model</a> name as the value."
        }
      },
      "description": "Request to add a method to an existing <a>Resource</a> resource."
    },
    "PutMethodResponseRequest": {
      "type": "object",
      "properties": {
        "responseParameters": {
          "$ref": "#/definitions/MapOfStringToBoolean",
          "description": "A key-value map specifying required or optional response parameters that Amazon API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)"
        },
        "responseModels": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "Specifies the <a>Model</a> resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a <a>Model</a> name as the value."
        }
      },
      "description": "Request to add a <a>MethodResponse</a> to an existing <a>Method</a> resource."
    },
    "PutMode": {
      "type": "string",
      "enum": [
        "merge",
        "overwrite"
      ]
    },
    "PutRestApiRequest": {
      "type": "object",
      "required": [
        "body"
      ],
      "properties": {
        "body": {
          "$ref": "#/definitions/Blob",
          "description": "The PUT request body containing external API definitions. Currently, only Swagger definition JSON files are supported."
        }
      },
      "description": "A PUT request to update an existing API, with external API definitions specified as the request body."
    },
    "QuotaPeriodType": {
      "type": "string",
      "enum": [
        "DAY",
        "WEEK",
        "MONTH"
      ]
    },
    "QuotaSettings": {
      "type": "object",
      "properties": {
        "limit": {
          "$ref": "#/definitions/Integer",
          "description": "The maximum number of requests that can be made in a given time period."
        },
        "offset": {
          "$ref": "#/definitions/Integer",
          "description": "The number of requests subtracted from the given limit in the initial time period."
        },
        "period": {
          "$ref": "#/definitions/QuotaPeriodType",
          "description": "The time period in which the limit applies. Valid values are \"DAY\", \"WEEK\" or \"MONTH\"."
        }
      },
      "description": "Quotas configured for a usage plan."
    },
    "Resource": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/String",
          "description": "The resource's identifier."
        },
        "parentId": {
          "$ref": "#/definitions/String",
          "description": "The parent resource's identifier."
        },
        "pathPart": {
          "$ref": "#/definitions/String",
          "description": "The last path segment for this resource."
        },
        "path": {
          "$ref": "#/definitions/String",
          "description": "The full path for this resource."
        },
        "resourceMethods": {
          "$ref": "#/definitions/MapOfMethod",
          "description": "<p>Gets an API resource's method of a given HTTP verb.</p> <div class=\"remarks\"> <p>The resource methods are a map of methods indexed by methods' HTTP verbs enabled on the resource. This method map is included in the <code>200 OK</code> response of the <code>GET /restapis/{restapi_id}/resources/{resource_id}</code> or <code>GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods</code> request.</p> <h4>Example: Get the GET method of an API resource</h4> <h5>Request</h5> <pre><code>GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160608T031827Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160608/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}</code></pre> <h5>Response</h5> <pre><code>{ \"_links\": { \"curies\": [ { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-{rel}.html\", \"name\": \"integration\", \"templated\": true }, { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html\", \"name\": \"integrationresponse\", \"templated\": true }, { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-{rel}.html\", \"name\": \"method\", \"templated\": true }, { \"href\": \"http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html\", \"name\": \"methodresponse\", \"templated\": true } ], \"self\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET\", \"name\": \"GET\", \"title\": \"GET\" }, \"integration:put\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration\" }, \"method:delete\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET\" }, \"method:integration\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration\" }, \"method:responses\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200\", \"name\": \"200\", \"title\": \"200\" }, \"method:update\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET\" }, \"methodresponse:put\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/{status_code}\", \"templated\": true } }, \"apiKeyRequired\": false, \"authorizationType\": \"NONE\", \"httpMethod\": \"GET\", \"_embedded\": { \"method:integration\": { \"_links\": { \"self\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration\" }, \"integration:delete\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration\" }, \"integration:responses\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200\", \"name\": \"200\", \"title\": \"200\" }, \"integration:update\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration\" }, \"integrationresponse:put\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/{status_code}\", \"templated\": true } }, \"cacheKeyParameters\": [], \"cacheNamespace\": \"3kzxbg5sa2\", \"credentials\": \"arn:aws:iam::123456789012:role/apigAwsProxyRole\", \"httpMethod\": \"POST\", \"passthroughBehavior\": \"WHEN_NO_MATCH\", \"requestParameters\": { \"integration.request.header.Content-Type\": \"'application/x-amz-json-1.1'\" }, \"requestTemplates\": { \"application/json\": \"{\\n}\" }, \"type\": \"AWS\", \"uri\": \"arn:aws:apigateway:us-east-1:kinesis:action/ListStreams\", \"_embedded\": { \"integration:responses\": { \"_links\": { \"self\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200\", \"name\": \"200\", \"title\": \"200\" }, \"integrationresponse:delete\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200\" }, \"integrationresponse:update\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200\" } }, \"responseParameters\": { \"method.response.header.Content-Type\": \"'application/xml'\" }, \"responseTemplates\": { \"application/json\": \"$util.urlDecode(\\\"%3CkinesisStreams%3E#foreach($stream in $input.path('$.StreamNames'))%3Cstream%3E%3Cname%3E$stream%3C/name%3E%3C/stream%3E#end%3C/kinesisStreams%3E\\\")\\n\" }, \"statusCode\": \"200\" } } }, \"method:responses\": { \"_links\": { \"self\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200\", \"name\": \"200\", \"title\": \"200\" }, \"methodresponse:delete\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200\" }, \"methodresponse:update\": { \"href\": \"/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200\" } }, \"responseModels\": { \"application/json\": \"Empty\" }, \"responseParameters\": { \"method.response.header.Content-Type\": false }, \"statusCode\": \"200\" } } }</code></pre> <p>If the <code>OPTIONS</code> is enabled on the resource, you can follow the example here to get that method. Just replace the <code>GET</code> of the last path segment in the request URL with <code>OPTIONS</code>.</p> </div> <div class=\"seeAlso\"> </div>"
        }
      },
      "description": "<p>Represents an API resource.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html\">Create an API</a> </div>"
    },
    "Resources": {
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/String"
        },
        "items": {
          "$ref": "#/definitions/ListOfResource",
          "description": "Gets the current <a>Resource</a> resource in the collection."
        }
      },
      "description": "<p>Represents a collection of <a>Resource</a> resources.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html\">Create an API</a> </div>"
    },
    "RestApi": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/String",
          "description": "The API's identifier. This identifier is unique across all of your APIs in Amazon API Gateway."
        },
        "name": {
          "$ref": "#/definitions/String",
          "description": "The API's name."
        },
        "description": {
          "$ref": "#/definitions/String",
          "description": "The API's description."
        },
        "createdDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The date when the API was created, in <a href=\"http://www.iso.org/iso/home/standards/iso8601.htm\" target=\"_blank\">ISO 8601 format</a>."
        },
        "warnings": {
          "$ref": "#/definitions/ListOfString",
          "description": "The warning messages reported when <code>failonwarnings</code> is turned on during API import."
        }
      },
      "description": "<p>Represents a REST API.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html\">Create an API</a> </div>"
    },
    "RestApis": {
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/String"
        },
        "items": {
          "$ref": "#/definitions/ListOfRestApi",
          "description": "An array of links to the current page of <a>RestApi</a> resources."
        }
      },
      "description": "<p>Contains references to your APIs and links that guide you in how to interact with your collection. A collection offers a paginated view of your APIs.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html\">Create an API</a> </div>"
    },
    "SdkResponse": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/Blob",
          "description": "The binary blob response to <a>GetSdk</a>, which contains the generated SDK."
        }
      },
      "description": "The binary blob response to <a>GetSdk</a>, which contains the generated SDK."
    },
    "ServiceUnavailableException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String"
        }
      }
    },
    "Stage": {
      "type": "object",
      "properties": {
        "deploymentId": {
          "$ref": "#/definitions/String",
          "description": "The identifier of the <a>Deployment</a> that the stage points to."
        },
        "clientCertificateId": {
          "$ref": "#/definitions/String",
          "description": "The identifier of a client certificate for an API stage."
        },
        "stageName": {
          "$ref": "#/definitions/String",
          "description": "The name of the stage is the first path segment in the Uniform Resource Identifier (URI) of a call to Amazon API Gateway."
        },
        "description": {
          "$ref": "#/definitions/String",
          "description": "The stage's description."
        },
        "cacheClusterEnabled": {
          "$ref": "#/definitions/Boolean",
          "description": "Specifies whether a cache cluster is enabled for the stage."
        },
        "cacheClusterSize": {
          "$ref": "#/definitions/CacheClusterSize",
          "description": "The size of the cache cluster for the stage, if enabled."
        },
        "cacheClusterStatus": {
          "$ref": "#/definitions/CacheClusterStatus",
          "description": "The status of the cache cluster for the stage, if enabled."
        },
        "methodSettings": {
          "$ref": "#/definitions/MapOfMethodSettings",
          "description": "A map that defines the method settings for a <a>Stage</a> resource. Keys (designated as <code>/{method_setting_key</code> below) are method paths defined as <code>{resource_path}/{http_method}</code> for an individual method override, or <code>/\\*/\\*</code> for overriding all methods in the stage. Any forward slash (\"/\") characters in the <code>resource_path</code> part must be encoded as \"~1\" as in, for example, <code>~1resource~1sub-resource/GET</code>."
        },
        "variables": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "A map that defines the stage variables for a <a>Stage</a> resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>."
        },
        "createdDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The date and time that the stage was created, in <a href=\"http://www.iso.org/iso/home/standards/iso8601.htm\" target=\"_blank\">ISO 8601 format</a>."
        },
        "lastUpdatedDate": {
          "$ref": "#/definitions/Timestamp",
          "description": "The date and time that information about the stage was last updated, in <a href=\"http://www.iso.org/iso/home/standards/iso8601.htm\" target=\"_blank\">ISO 8601 format</a>."
        }
      },
      "description": "<p>Represents a unique identifier for a version of a deployed <a>RestApi</a> that is callable by users.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-deploy-api.html\">Deploy an API</a> </div>"
    },
    "StageKey": {
      "type": "object",
      "properties": {
        "restApiId": {
          "$ref": "#/definitions/String",
          "description": "A list of <a>Stage</a> resources that are associated with the <a>ApiKey</a> resource."
        },
        "stageName": {
          "$ref": "#/definitions/String",
          "description": "The stage name in the <a>RestApi</a> that the stage key references."
        }
      },
      "description": "A reference to a unique stage identified in the format <code>{restApiId}/{stage}</code>."
    },
    "Stages": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/ListOfStage",
          "description": "An individual <a>Stage</a> resource."
        }
      },
      "description": "<p>A list of <a>Stage</a> resources that are associated with the <a>ApiKey</a> resource.</p> <div class=\"seeAlso\"><a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/stages.html\">Deploying API in Stages</a></div>"
    },
    "StatusCode": {
      "type": "string",
      "pattern": "[1-5]\\d\\d",
      "description": "The status code."
    },
    "String": {
      "type": "string"
    },
    "Template": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/String",
          "description": "The Apache <a href=\"http://velocity.apache.org/engine/devel/vtl-reference-guide.html\" target=\"_blank\">Velocity Template Language (VTL)</a> template content used for the template resource."
        }
      },
      "description": "<p>Represents a mapping template used to transform a payload.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html#models-mappings-mappings\">Mapping Templates</a> </div>"
    },
    "TestInvokeAuthorizerRequest": {
      "type": "object",
      "properties": {
        "headers": {
          "$ref": "#/definitions/MapOfHeaderValues",
          "description": "[Required] A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified."
        },
        "pathWithQueryString": {
          "$ref": "#/definitions/String",
          "description": "[Optional] The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters."
        },
        "body": {
          "$ref": "#/definitions/String",
          "description": "[Optional] The simulated request body of an incoming invocation request."
        },
        "stageVariables": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "A key-value map of stage variables to simulate an invocation on a deployed <a>Stage</a>."
        },
        "additionalContext": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "[Optional] A key-value map of additional context variables."
        }
      },
      "description": "Make a request to simulate the execution of an <a>Authorizer</a>."
    },
    "TestInvokeAuthorizerResponse": {
      "type": "object",
      "properties": {
        "clientStatus": {
          "$ref": "#/definitions/Integer",
          "description": "The HTTP status code that the client would have received. Value is 0 if the authorizer succeeded."
        },
        "log": {
          "$ref": "#/definitions/String",
          "description": "The Amazon API Gateway execution log for the test authorizer request."
        },
        "latency": {
          "$ref": "#/definitions/Long",
          "description": "The execution latency of the test authorizer request."
        },
        "principalId": {
          "$ref": "#/definitions/String",
          "description": "The principal identity returned by the <a>Authorizer</a>"
        },
        "policy": {
          "$ref": "#/definitions/String",
          "description": "The JSON policy document returned by the <a>Authorizer</a>"
        },
        "authorization": {
          "$ref": "#/definitions/MapOfStringToList"
        },
        "claims": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "The <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\">open identity claims</a>, with any supported custom attributes, returned from the Cognito Your User Pool configured for the API."
        }
      },
      "description": "Represents the response of the test invoke request for a custom <a>Authorizer</a>"
    },
    "TestInvokeMethodRequest": {
      "type": "object",
      "properties": {
        "pathWithQueryString": {
          "$ref": "#/definitions/String",
          "description": "The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters."
        },
        "body": {
          "$ref": "#/definitions/String",
          "description": "The simulated request body of an incoming invocation request."
        },
        "headers": {
          "$ref": "#/definitions/MapOfHeaderValues",
          "description": "A key-value map of headers to simulate an incoming invocation request."
        },
        "clientCertificateId": {
          "$ref": "#/definitions/String",
          "description": "A <a>ClientCertificate</a> identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint."
        },
        "stageVariables": {
          "$ref": "#/definitions/MapOfStringToString",
          "description": "A key-value map of stage variables to simulate an invocation on a deployed <a>Stage</a>."
        }
      },
      "description": "Make a request to simulate the execution of a <a>Method</a>."
    },
    "TestInvokeMethodResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/Integer",
          "description": "The HTTP status code."
        },
        "body": {
          "$ref": "#/definitions/String",
          "description": "The body of the HTTP response."
        },
        "headers": {
          "$ref": "#/definitions/MapOfHeaderValues",
          "description": "The headers of the HTTP response."
        },
        "log": {
          "$ref": "#/definitions/String",
          "description": "The Amazon API Gateway execution log for the test invoke request."
        },
        "latency": {
          "$ref": "#/definitions/Long",
          "description": "The execution latency of the test invoke request."
        }
      },
      "description": "<p>Represents the response of the test invoke request in the HTTP method.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-test-method.html#how-to-test-method-console\">Test API using the API Gateway console</a> </div>"
    },
    "ThrottleSettings": {
      "type": "object",
      "properties": {
        "burstLimit": {
          "$ref": "#/definitions/Integer",
          "description": "The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity."
        },
        "rateLimit": {
          "$ref": "#/definitions/Double",
          "description": "The API request steady-state rate limit."
        }
      },
      "description": " The API request rate limits."
    },
    "Timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "TooManyRequestsException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String"
        }
      }
    },
    "UnauthorizedCacheControlHeaderStrategy": {
      "type": "string",
      "enum": [
        "FAIL_WITH_403",
        "SUCCEED_WITH_RESPONSE_HEADER",
        "SUCCEED_WITHOUT_RESPONSE_HEADER"
      ]
    },
    "UnauthorizedException": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/String"
        }
      }
    },
    "UpdateAccountRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "Requests Amazon API Gateway to change information about the current <a>Account</a> resource."
    },
    "UpdateApiKeyRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "A request to change information about an <a>ApiKey</a> resource."
    },
    "UpdateAuthorizerRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "Request to update an existing <a>Authorizer</a> resource."
    },
    "UpdateBasePathMappingRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "A request to change information about the <a>BasePathMapping</a> resource."
    },
    "UpdateClientCertificateRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "A request to change information about an <a>ClientCertificate</a> resource."
    },
    "UpdateDeploymentRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "Requests Amazon API Gateway to change information about a <a>Deployment</a> resource."
    },
    "UpdateDomainNameRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "A request to change information about the <a>DomainName</a> resource."
    },
    "UpdateIntegrationRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "Represents an update integration request."
    },
    "UpdateIntegrationResponseRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "Represents an update integration response request."
    },
    "UpdateMethodRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "Request to update an existing <a>Method</a> resource."
    },
    "UpdateMethodResponseRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "A request to update an existing <a>MethodResponse</a> resource."
    },
    "UpdateModelRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "Request to update an existing model in an existing <a>RestApi</a> resource."
    },
    "UpdateResourceRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "Request to change information about a <a>Resource</a> resource."
    },
    "UpdateRestApiRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "Request to update an existing <a>RestApi</a> resource in your collection."
    },
    "UpdateStageRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "Requests Amazon API Gateway to change information about a <a>Stage</a> resource."
    },
    "UpdateUsagePlanRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "The PATCH request to update a usage plan of a given plan Id."
    },
    "UpdateUsageRequest": {
      "type": "object",
      "properties": {
        "patchOperations": {
          "$ref": "#/definitions/ListOfPatchOperation",
          "description": "A list of update operations to be applied to the specified resource and in the order specified in this list."
        }
      },
      "description": "The PATCH request to grant a temporary extension to the reamining quota of a usage plan associated with a specified API key."
    },
    "Usage": {
      "type": "object",
      "properties": {
        "usagePlanId": {
          "$ref": "#/definitions/String",
          "description": "The plan Id associated with this usage data."
        },
        "startDate": {
          "$ref": "#/definitions/String",
          "description": "The starting date of the usage data."
        },
        "endDate": {
          "$ref": "#/definitions/String",
          "description": "The ending date of the usage data."
        },
        "position": {
          "$ref": "#/definitions/String"
        },
        "items": {
          "$ref": "#/definitions/MapOfKeyUsages",
          "description": "The usage data, as daily logs of used and remaining quotas, over the specified time interval indexed over the API keys in a usage plan. For example, <code>{..., \"values\" : { \"{api_key}\" : [ [0, 100], [10, 90], [100, 10]]}</code>, where <code>{api_key}</code> stands for an API key value and the daily log entry is of the format <code>[used quota, remaining quota]</code>."
        }
      },
      "description": "<p>Represents the usage data of a usage plan.</p> <div class=\"remarks\"/> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html\">Create and Use Usage Plans</a>, <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-usage-plans-with-console.html#api-gateway-usage-plan-manage-usage\">Manage Usage in a Usage Plan</a> </div>"
    },
    "UsagePlan": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/String",
          "description": "The identifier of a <a>UsagePlan</a> resource."
        },
        "name": {
          "$ref": "#/definitions/String",
          "description": "The name of a usage plan."
        },
        "description": {
          "$ref": "#/definitions/String",
          "description": "The description of a usage plan."
        },
        "apiStages": {
          "$ref": "#/definitions/ListOfApiStage",
          "description": "The associated API stages of a usage plan."
        },
        "throttle": {
          "$ref": "#/definitions/ThrottleSettings",
          "description": "The request throttle limits of a usage plan."
        },
        "quota": {
          "$ref": "#/definitions/QuotaSettings",
          "description": "The maximum number of permitted requests per a given unit time interval."
        }
      },
      "description": "<p>Represents a usage plan than can specify who can assess associated API stages with specified request limits and quotas.</p> <div class=\"remarks\"> <p>In a usage plan, you associate an API by specifying the API's Id and a stage name of the specified API. You add plan customers by adding API keys to the plan. </p> </div> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html\">Create and Use Usage Plans</a> </div>"
    },
    "UsagePlanKey": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/String",
          "description": "The Id of a usage plan key."
        },
        "type": {
          "$ref": "#/definitions/String",
          "description": "The type of a usage plan key. Currently, the valid key type is <code>API_KEY</code>."
        },
        "value": {
          "$ref": "#/definitions/String",
          "description": "The value of a usage plan key."
        },
        "name": {
          "$ref": "#/definitions/String",
          "description": "The name of a usage plan key."
        }
      },
      "description": "<p>Represents a usage plan key to identify a plan customer.</p> <div class=\"remarks\"> <p>To associate an API stage with a selected API key in a usage plan, you must create a UsagePlanKey resource to represent the selected <a>ApiKey</a>.</p> </div>\" <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html\">Create and Use Usage Plans</a> </div>"
    },
    "UsagePlanKeys": {
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/String"
        },
        "items": {
          "$ref": "#/definitions/ListOfUsagePlanKey",
          "description": "Gets the current item of the usage plan keys collection."
        }
      },
      "description": "<p>Represents the collection of usage plan keys added to usage plans for the associated API keys and, possibly, other types of keys.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html\">Create and Use Usage Plans</a> </div>"
    },
    "UsagePlans": {
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/String"
        },
        "items": {
          "$ref": "#/definitions/ListOfUsagePlan",
          "description": "Gets the current item when enumerating the collection of <a>UsagePlan</a>."
        }
      },
      "description": "<p>Represents a collection of usage plans for an AWS account.</p> <div class=\"seeAlso\"> <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html\">Create and Use Usage Plans</a> </div>"
    },
    "op": {
      "type": "string",
      "enum": [
        "add",
        "remove",
        "replace",
        "move",
        "copy",
        "test"
      ]
    }
  }
}